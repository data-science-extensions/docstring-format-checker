{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"code/","title":"Modules","text":""},{"location":"code/#overview","title":"Overview","text":"<p>These are the modules used in the docstring-format-checker package:</p> Module Description Core The <code>core</code> module contains the main <code>DocstringChecker</code> class responsible for parsing Python files with AST, extracting docstrings from functions/classes/methods, and validating them against configured section requirements. Configuration The <code>config</code> module handles loading and validating configuration from TOML files. It supports automatic discovery of <code>pyproject.toml</code> files and defines section validation rules through the <code>SectionConfig</code> dataclass. CLI The <code>cli</code> module provides the command-line interface using Typer. It supports both <code>docstring-format-checker</code> and <code>dfc</code> entry points with subcommands for checking files/directories and generating configuration examples. Exceptions The <code>exceptions</code> module defines custom exception classes for structured error handling, including <code>DocstringError</code> for validation failures, <code>InvalidFileError</code> for non-Python files, and <code>DirectoryNotFoundError</code> for path validation."},{"location":"code/#key-features","title":"Key Features","text":"<ul> <li>AST-based parsing: Uses Python's AST module for robust code analysis</li> <li>Configurable validation: TOML-based configuration with 4 section types: <code>free_text</code>, <code>list_name</code>, <code>list_type</code>, <code>list_name_and_type</code></li> <li>Hierarchical config discovery: Automatically finds configuration in <code>pyproject.toml</code> files</li> <li>Rich output formatting: Uses Rich library for colored console output and error tables</li> <li>Dual CLI entry points: Available as both <code>docstring-format-checker</code> and <code>dfc</code></li> <li>Comprehensive error handling: Custom exceptions for different failure scenarios</li> </ul>"},{"location":"code/#section-types","title":"Section Types","text":"<p>The checker supports four types of docstring sections:</p> <ol> <li><code>free_text</code>: Admonition-style sections like summary, details, examples</li> <li><code>list_name</code>: Simple name lists</li> <li><code>list_type</code>: Type-only lists for raises, yields sections</li> <li><code>list_name_and_type</code>: Name and type lists for parameters, returns sections</li> </ol>"},{"location":"code/#testing","title":"Testing","text":"<p>This package maintains 100% test coverage with comprehensive testing against:</p> <ol> <li>Unit tests: Complete test coverage for all modules and functions</li> <li>Integration tests: CLI and end-to-end workflow testing</li> <li>Configuration tests: TOML parsing and validation testing</li> <li>Error handling tests: Exception scenarios and edge cases</li> <li>AST parsing tests: Python code analysis and docstring extraction</li> </ol> <p>Tests are run in matrix against:</p> <ol> <li>Python Versions:</li> <li><code>3.10</code></li> <li><code>3.11</code></li> <li><code>3.12</code></li> <li><code>3.13</code></li> <li>Operating Systems:</li> <li><code>ubuntu-latest</code></li> <li><code>windows-latest</code></li> <li><code>macos-latest</code></li> </ol>"},{"location":"code/#coverage","title":"Coverage","text":""},{"location":"code/cli/","title":"CLI","text":""},{"location":"code/cli/#docstring_format_checker.cli","title":"docstring_format_checker.cli","text":"<p>Summary</p> <p>Command-line interface for the docstring format checker.</p>"},{"location":"code/cli/#docstring_format_checker.cli.check_docstrings","title":"check_docstrings","text":"<pre><code>check_docstrings(\n    paths: list[str],\n    config: Optional[str] = None,\n    exclude: Optional[list[str]] = None,\n    quiet: bool = False,\n    output: str = \"list\",\n    check: bool = False,\n) -&gt; None\n</code></pre> <p>Summary</p> <p>Core logic for checking docstrings.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>list[str]</code> <p>The path(s) to the file(s) or directory(ies) to check.</p> required <code>config</code> <code>Optional[str]</code> <p>The path to the configuration file. Default: <code>None</code>.</p> <code>None</code> <code>exclude</code> <code>Optional[list[str]]</code> <p>List of glob patterns to exclude from checking. Default: <code>None</code>.</p> <code>None</code> <code>quiet</code> <code>bool</code> <p>Whether to suppress output. Default: <code>False</code>.</p> <code>False</code> <code>output</code> <code>str</code> <p>Output format: 'table' or 'list'. Default: <code>'list'</code>.</p> <code>'list'</code> <code>check</code> <code>bool</code> <p>Whether to throw error if issues are found. Default: <code>False</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>Nothing is returned.</p> Source code in <code>src/docstring_format_checker/cli.py</code> <pre><code>def check_docstrings(\n    paths: list[str],\n    config: Optional[str] = None,\n    exclude: Optional[list[str]] = None,\n    quiet: bool = False,\n    output: str = \"list\",\n    check: bool = False,\n) -&gt; None:\n    \"\"\"\n    !!! note \"Summary\"\n        Core logic for checking docstrings.\n\n    Params:\n        paths (list[str]):\n            The path(s) to the file(s) or directory(ies) to check.\n        config (Optional[str]):\n            The path to the configuration file.\n            Default: `None`.\n        exclude (Optional[list[str]]):\n            List of glob patterns to exclude from checking.\n            Default: `None`.\n        quiet (bool):\n            Whether to suppress output.\n            Default: `False`.\n        output (str):\n            Output format: 'table' or 'list'.\n            Default: `'list'`.\n        check (bool):\n            Whether to throw error if issues are found.\n            Default: `False`.\n\n    Returns:\n        (None):\n            Nothing is returned.\n    \"\"\"\n    # Validate and process input paths\n    target_paths: list[Path] = _validate_and_process_paths(paths)\n\n    # Load and validate configuration\n    config_obj: Config = _load_and_validate_config(config, target_paths)\n\n    # Initialize checker and process all paths\n    checker = DocstringChecker(config_obj)\n    all_results: dict[str, list[DocstringError]] = _process_all_paths(checker, target_paths, exclude)\n\n    # Display results and handle exit\n    exit_code: int = _display_results(all_results, quiet, output, check)\n    if exit_code != 0:\n        raise Exit(exit_code)\n</code></pre>"},{"location":"code/cli/#docstring_format_checker.cli.main","title":"main","text":"<pre><code>main(\n    ctx: Context,\n    paths: Optional[list[str]] = Argument(\n        None,\n        help=\"Path(s) to Python file(s) or directory(s) for DFC to check\",\n    ),\n    config: Optional[str] = Option(\n        None,\n        \"--config\",\n        \"-f\",\n        help=\"Path to configuration file (TOML format)\",\n    ),\n    exclude: Optional[list[str]] = Option(\n        None,\n        \"--exclude\",\n        \"-x\",\n        help=\"Glob patterns to exclude (can be used multiple times)\",\n    ),\n    output: str = Option(\n        \"list\",\n        \"--output\",\n        \"-o\",\n        help=\"Output format: 'table' or 'list'\",\n        show_default=True,\n    ),\n    check: bool = Option(\n        False,\n        \"--check\",\n        \"-c\",\n        help=\"Throw error (exit 1) if any issues are found\",\n    ),\n    quiet: bool = Option(\n        False,\n        \"--quiet\",\n        \"-q\",\n        help=\"Only output pass/fail confirmation, suppress errors unless failing\",\n    ),\n    example: Optional[str] = Option(\n        None,\n        \"--example\",\n        \"-e\",\n        callback=_example_callback,\n        is_eager=True,\n        help=\"Show examples: 'config' for configuration example, 'usage' for usage examples\",\n    ),\n    version: Optional[bool] = Option(\n        None,\n        \"--version\",\n        \"-v\",\n        callback=_version_callback,\n        is_eager=True,\n        help=\"Show version and exit\",\n    ),\n    help_flag: Optional[bool] = Option(\n        None,\n        \"--help\",\n        \"-h\",\n        callback=_help_callback_main,\n        is_eager=True,\n        help=\"Show this message and exit\",\n    ),\n) -&gt; None\n</code></pre> <p>Summary</p> <p>Check Python docstring formatting and completeness.</p> Details <p>This tool analyzes Python files and validates that functions, methods, and classes have properly formatted docstrings according to the configured sections.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The context object for the command.</p> required <code>paths</code> <code>Optional[list[str]]</code> <p>Path(s) to Python file(s) or directory(ies) to check.</p> <code>Argument(None, help='Path(s) to Python file(s) or directory(s) for DFC to check')</code> <code>config</code> <code>Optional[str]</code> <p>Path to configuration file (TOML format).</p> <code>Option(None, '--config', '-f', help='Path to configuration file (TOML format)')</code> <code>exclude</code> <code>Optional[list[str]]</code> <p>Glob patterns to exclude.</p> <code>Option(None, '--exclude', '-x', help='Glob patterns to exclude (can be used multiple times)')</code> <code>output</code> <code>str</code> <p>Output format: 'table' or 'list'.</p> <code>Option('list', '--output', '-o', help=\"Output format: 'table' or 'list'\", show_default=True)</code> <code>check</code> <code>bool</code> <p>Throw error if any issues are found.</p> <code>Option(False, '--check', '-c', help='Throw error (exit 1) if any issues are found')</code> <code>quiet</code> <code>bool</code> <p>Only output pass/fail confirmation.</p> <code>Option(False, '--quiet', '-q', help='Only output pass/fail confirmation, suppress errors unless failing')</code> <code>example</code> <code>Optional[str]</code> <p>Show examples: 'config' or 'usage'.</p> <code>Option(None, '--example', '-e', callback=_example_callback, is_eager=True, help=\"Show examples: 'config' for configuration example, 'usage' for usage examples\")</code> <code>version</code> <code>Optional[bool]</code> <p>Show version and exit.</p> <code>Option(None, '--version', '-v', callback=_version_callback, is_eager=True, help='Show version and exit')</code> <code>help_flag</code> <code>Optional[bool]</code> <p>Show help message and exit.</p> <code>Option(None, '--help', '-h', callback=_help_callback_main, is_eager=True, help='Show this message and exit')</code> <p>Returns:</p> Type Description <code>None</code> <p>Nothing is returned.</p> Source code in <code>src/docstring_format_checker/cli.py</code> <pre><code>@app.callback(invoke_without_command=True)\ndef main(\n    ctx: Context,\n    paths: Optional[list[str]] = Argument(None, help=\"Path(s) to Python file(s) or directory(s) for DFC to check\"),\n    config: Optional[str] = Option(None, \"--config\", \"-f\", help=\"Path to configuration file (TOML format)\"),\n    exclude: Optional[list[str]] = Option(\n        None,\n        \"--exclude\",\n        \"-x\",\n        help=\"Glob patterns to exclude (can be used multiple times)\",\n    ),\n    output: str = Option(\n        \"list\",\n        \"--output\",\n        \"-o\",\n        help=\"Output format: 'table' or 'list'\",\n        show_default=True,\n    ),\n    check: bool = Option(\n        False,\n        \"--check\",\n        \"-c\",\n        help=\"Throw error (exit 1) if any issues are found\",\n    ),\n    quiet: bool = Option(\n        False,\n        \"--quiet\",\n        \"-q\",\n        help=\"Only output pass/fail confirmation, suppress errors unless failing\",\n    ),\n    example: Optional[str] = Option(\n        None,\n        \"--example\",\n        \"-e\",\n        callback=_example_callback,\n        is_eager=True,\n        help=\"Show examples: 'config' for configuration example, 'usage' for usage examples\",\n    ),\n    version: Optional[bool] = Option(\n        None,\n        \"--version\",\n        \"-v\",\n        callback=_version_callback,\n        is_eager=True,\n        help=\"Show version and exit\",\n    ),\n    help_flag: Optional[bool] = Option(\n        None,\n        \"--help\",\n        \"-h\",\n        callback=_help_callback_main,\n        is_eager=True,\n        help=\"Show this message and exit\",\n    ),\n) -&gt; None:\n    \"\"\"\n    !!! note \"Summary\"\n        Check Python docstring formatting and completeness.\n\n    ???+ abstract \"Details\"\n        This tool analyzes Python files and validates that functions, methods, and classes have properly formatted docstrings according to the configured sections.\n\n    Params:\n        ctx (Context):\n            The context object for the command.\n        paths (Optional[list[str]]):\n            Path(s) to Python file(s) or directory(ies) to check.\n        config (Optional[str]):\n            Path to configuration file (TOML format).\n        exclude (Optional[list[str]]):\n            Glob patterns to exclude.\n        output (str):\n            Output format: 'table' or 'list'.\n        check (bool):\n            Throw error if any issues are found.\n        quiet (bool):\n            Only output pass/fail confirmation.\n        example (Optional[str]):\n            Show examples: 'config' or 'usage'.\n        version (Optional[bool]):\n            Show version and exit.\n        help_flag (Optional[bool]):\n            Show help message and exit.\n\n    Returns:\n        (None):\n            Nothing is returned.\n    \"\"\"\n\n    # If no paths are provided, show help\n    if not paths:\n        echo(ctx.get_help())\n        raise Exit(0)\n\n    # Validate output format\n    if output not in [\"table\", \"list\"]:\n        console.print(_red(f\"Error: Invalid output format '{output}'. Use 'table' or 'list'.\"))\n        raise Exit(1)\n\n    check_docstrings(\n        paths=paths,\n        config=config,\n        exclude=exclude,\n        quiet=quiet,\n        output=output,\n        check=check,\n    )\n</code></pre>"},{"location":"code/cli/#docstring_format_checker.cli.entry_point","title":"entry_point","text":"<pre><code>entry_point() -&gt; None\n</code></pre> <p>Summary</p> <p>Entry point for the CLI scripts defined in pyproject.toml.</p> Source code in <code>src/docstring_format_checker/cli.py</code> <pre><code>def entry_point() -&gt; None:\n    \"\"\"\n    !!! note \"Summary\"\n        Entry point for the CLI scripts defined in pyproject.toml.\n    \"\"\"\n    app()\n</code></pre>"},{"location":"code/config/","title":"Config","text":""},{"location":"code/config/#docstring_format_checker.config","title":"docstring_format_checker.config","text":"<p>Summary</p> <p>Configuration handling for the docstring format checker.</p>"},{"location":"code/config/#docstring_format_checker.config.GlobalConfig","title":"GlobalConfig  <code>dataclass</code>","text":"<p>Summary</p> <p>Global configuration for docstring checking behavior.</p> Source code in <code>src/docstring_format_checker/config.py</code> <pre><code>@dataclass\nclass GlobalConfig:\n    \"\"\"\n    !!! note \"Summary\"\n        Global configuration for docstring checking behavior.\n    \"\"\"\n\n    allow_undefined_sections: bool = False\n    require_docstrings: bool = True\n    check_private: bool = False\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.GlobalConfig.__init__","title":"__init__","text":"<pre><code>__init__(\n    allow_undefined_sections: bool = False,\n    require_docstrings: bool = True,\n    check_private: bool = False,\n) -&gt; None\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.GlobalConfig.allow_undefined_sections","title":"allow_undefined_sections  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allow_undefined_sections: bool = False\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.GlobalConfig.require_docstrings","title":"require_docstrings  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>require_docstrings: bool = True\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.GlobalConfig.check_private","title":"check_private  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>check_private: bool = False\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.SectionConfig","title":"SectionConfig  <code>dataclass</code>","text":"<p>Summary</p> <p>Configuration for a docstring section.</p> Source code in <code>src/docstring_format_checker/config.py</code> <pre><code>@dataclass\nclass SectionConfig:\n    \"\"\"\n    !!! note \"Summary\"\n        Configuration for a docstring section.\n    \"\"\"\n\n    order: int\n    name: str\n    type: Literal[\"free_text\", \"list_name\", \"list_type\", \"list_name_and_type\"]\n    admonition: Union[bool, str] = False\n    prefix: str = \"\"  # Support any prefix string\n    required: bool = False\n    message: str = \"\"  # Optional message for validation errors\n\n    def __post_init__(self) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate configuration after initialization.\n        \"\"\"\n        self._validate_types()\n        self._validate_admonition_prefix_combination()\n\n    def _validate_types(self) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate the 'type' field.\n        \"\"\"\n        if self.type not in VALID_TYPES:\n            raise InvalidTypeValuesError(f\"Invalid section type: {self.type}. Valid types: {VALID_TYPES}\")\n\n    def _validate_admonition_prefix_combination(self) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate admonition and prefix combination rules.\n        \"\"\"\n\n        if isinstance(self.admonition, bool):\n            # Rule: admonition cannot be True (only False or string)\n            if self.admonition is True:\n                raise ValueError(f\"Section '{self.name}': admonition cannot be True, must be False or a string\")\n\n            # Rule: if admonition is False, prefix cannot be provided\n            if self.admonition is False and self.prefix:\n                raise ValueError(f\"Section '{self.name}': when admonition=False, prefix cannot be provided\")\n\n        elif isinstance(self.admonition, str):\n            # Rule: if admonition is a string, prefix must be provided\n            if not self.prefix:\n                raise ValueError(f\"Section '{self.name}': when admonition is a string, prefix must be provided\")\n\n        else:\n            raise ValueError(\n                f\"Section '{self.name}': admonition must be a boolean or string, got {type(self.admonition)}\"\n            )\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.SectionConfig.__init__","title":"__init__","text":"<pre><code>__init__(\n    order: int,\n    name: str,\n    type: Literal[\n        \"free_text\",\n        \"list_name\",\n        \"list_type\",\n        \"list_name_and_type\",\n    ],\n    admonition: Union[bool, str] = False,\n    prefix: str = \"\",\n    required: bool = False,\n    message: str = \"\",\n) -&gt; None\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.SectionConfig.order","title":"order  <code>instance-attribute</code>","text":"<pre><code>order: int\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.SectionConfig.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.SectionConfig.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Literal[\n    \"free_text\",\n    \"list_name\",\n    \"list_type\",\n    \"list_name_and_type\",\n]\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.SectionConfig.admonition","title":"admonition  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>admonition: Union[bool, str] = False\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.SectionConfig.prefix","title":"prefix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefix: str = ''\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.SectionConfig.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required: bool = False\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.SectionConfig.message","title":"message  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>message: str = ''\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.SectionConfig.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__() -&gt; None\n</code></pre> <p>Summary</p> <p>Validate configuration after initialization.</p> Source code in <code>src/docstring_format_checker/config.py</code> <pre><code>def __post_init__(self) -&gt; None:\n    \"\"\"\n    !!! note \"Summary\"\n        Validate configuration after initialization.\n    \"\"\"\n    self._validate_types()\n    self._validate_admonition_prefix_combination()\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.Config","title":"Config  <code>dataclass</code>","text":"<p>Summary</p> <p>Complete configuration containing global settings and section definitions.</p> Source code in <code>src/docstring_format_checker/config.py</code> <pre><code>@dataclass\nclass Config:\n    \"\"\"\n    !!! note \"Summary\"\n        Complete configuration containing global settings and section definitions.\n    \"\"\"\n\n    global_config: GlobalConfig\n    sections: list[SectionConfig]\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.Config.__init__","title":"__init__","text":"<pre><code>__init__(\n    global_config: GlobalConfig,\n    sections: list[SectionConfig],\n) -&gt; None\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.Config.global_config","title":"global_config  <code>instance-attribute</code>","text":"<pre><code>global_config: GlobalConfig\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.Config.sections","title":"sections  <code>instance-attribute</code>","text":"<pre><code>sections: list[SectionConfig]\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.DEFAULT_CONFIG","title":"DEFAULT_CONFIG  <code>module-attribute</code>","text":"<pre><code>DEFAULT_CONFIG: Config = Config(\n    global_config=GlobalConfig(), sections=DEFAULT_SECTIONS\n)\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.load_config","title":"load_config","text":"<pre><code>load_config(\n    config_path: Optional[Union[str, Path]] = None,\n) -&gt; Config\n</code></pre> <p>Summary</p> <p>Load configuration from a TOML file or return default configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>Optional[Union[str, Path]]</code> <p>Path to the TOML configuration file. If <code>None</code>, looks for <code>pyproject.toml</code> in current directory. Default: <code>None</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified config file doesn't exist.</p> <code>InvalidConfigError</code> <p>If the configuration is invalid.</p> <p>Returns:</p> Type Description <code>Config</code> <p>Configuration object containing global settings and section definitions.</p> Source code in <code>src/docstring_format_checker/config.py</code> <pre><code>def load_config(config_path: Optional[Union[str, Path]] = None) -&gt; Config:\n    \"\"\"\n    !!! note \"Summary\"\n        Load configuration from a TOML file or return default configuration.\n\n    Params:\n        config_path (Optional[Union[str, Path]]):\n            Path to the TOML configuration file.\n            If `None`, looks for `pyproject.toml` in current directory.\n            Default: `None`.\n\n    Raises:\n        (FileNotFoundError):\n            If the specified config file doesn't exist.\n        (InvalidConfigError):\n            If the configuration is invalid.\n\n    Returns:\n        (Config):\n            Configuration object containing global settings and section definitions.\n    \"\"\"\n    # Resolve config file path\n    resolved_path = _resolve_config_path(config_path)\n    if resolved_path is None:\n        return DEFAULT_CONFIG\n\n    # Parse TOML configuration\n    config_data = _parse_toml_file(resolved_path)\n\n    # Extract tool configuration\n    tool_config = _extract_tool_config(config_data)\n    if tool_config is None:\n        return DEFAULT_CONFIG\n\n    # Parse configuration components\n    global_config = _parse_global_config(tool_config)\n    sections_config = _parse_sections_config(tool_config)\n\n    return Config(global_config=global_config, sections=sections_config)\n</code></pre>"},{"location":"code/config/#docstring_format_checker.config.find_config_file","title":"find_config_file","text":"<pre><code>find_config_file(\n    start_path: Optional[Path] = None,\n) -&gt; Optional[Path]\n</code></pre> <p>Summary</p> <p>Find configuration file by searching up the directory tree.</p> <p>Parameters:</p> Name Type Description Default <code>start_path</code> <code>Optional[Path]</code> <p>Directory to start searching from. If <code>None</code>, resolves to current directory. Default: <code>None</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Path]</code> <p>Path to the configuration file if found, None otherwise.</p> Source code in <code>src/docstring_format_checker/config.py</code> <pre><code>def find_config_file(start_path: Optional[Path] = None) -&gt; Optional[Path]:\n    \"\"\"\n    !!! note \"Summary\"\n        Find configuration file by searching up the directory tree.\n\n    Params:\n        start_path (Optional[Path]):\n            Directory to start searching from.\n            If `None`, resolves to current directory.\n            Default: `None`.\n\n    Returns:\n        (Optional[Path]):\n            Path to the configuration file if found, None otherwise.\n    \"\"\"\n    if start_path is None:\n        start_path = Path.cwd()\n\n    current_path: Path = start_path.resolve()\n\n    while current_path != current_path.parent:\n        pyproject_path: Path = current_path.joinpath(\"pyproject.toml\")\n        if pyproject_path.exists():\n            # Check if it contains dfc configuration\n            try:\n                with open(pyproject_path, \"rb\") as f:\n                    config_data: dict[str, Any] = tomllib.load(f)\n                    if \"tool\" in config_data and (\n                        \"dfc\" in config_data[\"tool\"] or \"docstring-format-checker\" in config_data[\"tool\"]\n                    ):\n                        return pyproject_path\n            except Exception:\n                pass\n\n        current_path = current_path.parent\n\n    return None\n</code></pre>"},{"location":"code/core/","title":"Core","text":""},{"location":"code/core/#docstring_format_checker.core","title":"docstring_format_checker.core","text":"<p>Summary</p> <p>Core docstring checking functionality.</p>"},{"location":"code/core/#docstring_format_checker.core.SectionConfig","title":"SectionConfig  <code>dataclass</code>","text":"<p>Summary</p> <p>Configuration for a docstring section.</p> Source code in <code>src/docstring_format_checker/config.py</code> <pre><code>@dataclass\nclass SectionConfig:\n    \"\"\"\n    !!! note \"Summary\"\n        Configuration for a docstring section.\n    \"\"\"\n\n    order: int\n    name: str\n    type: Literal[\"free_text\", \"list_name\", \"list_type\", \"list_name_and_type\"]\n    admonition: Union[bool, str] = False\n    prefix: str = \"\"  # Support any prefix string\n    required: bool = False\n    message: str = \"\"  # Optional message for validation errors\n\n    def __post_init__(self) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate configuration after initialization.\n        \"\"\"\n        self._validate_types()\n        self._validate_admonition_prefix_combination()\n\n    def _validate_types(self) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate the 'type' field.\n        \"\"\"\n        if self.type not in VALID_TYPES:\n            raise InvalidTypeValuesError(f\"Invalid section type: {self.type}. Valid types: {VALID_TYPES}\")\n\n    def _validate_admonition_prefix_combination(self) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate admonition and prefix combination rules.\n        \"\"\"\n\n        if isinstance(self.admonition, bool):\n            # Rule: admonition cannot be True (only False or string)\n            if self.admonition is True:\n                raise ValueError(f\"Section '{self.name}': admonition cannot be True, must be False or a string\")\n\n            # Rule: if admonition is False, prefix cannot be provided\n            if self.admonition is False and self.prefix:\n                raise ValueError(f\"Section '{self.name}': when admonition=False, prefix cannot be provided\")\n\n        elif isinstance(self.admonition, str):\n            # Rule: if admonition is a string, prefix must be provided\n            if not self.prefix:\n                raise ValueError(f\"Section '{self.name}': when admonition is a string, prefix must be provided\")\n\n        else:\n            raise ValueError(\n                f\"Section '{self.name}': admonition must be a boolean or string, got {type(self.admonition)}\"\n            )\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.SectionConfig.order","title":"order  <code>instance-attribute</code>","text":"<pre><code>order: int\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.SectionConfig.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.SectionConfig.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Literal[\n    \"free_text\",\n    \"list_name\",\n    \"list_type\",\n    \"list_name_and_type\",\n]\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.SectionConfig.admonition","title":"admonition  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>admonition: Union[bool, str] = False\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.SectionConfig.prefix","title":"prefix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefix: str = ''\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.SectionConfig.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required: bool = False\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.SectionConfig.message","title":"message  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>message: str = ''\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.SectionConfig.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__() -&gt; None\n</code></pre> <p>Summary</p> <p>Validate configuration after initialization.</p> Source code in <code>src/docstring_format_checker/config.py</code> <pre><code>def __post_init__(self) -&gt; None:\n    \"\"\"\n    !!! note \"Summary\"\n        Validate configuration after initialization.\n    \"\"\"\n    self._validate_types()\n    self._validate_admonition_prefix_combination()\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.SectionConfig.__init__","title":"__init__","text":"<pre><code>__init__(\n    order: int,\n    name: str,\n    type: Literal[\n        \"free_text\",\n        \"list_name\",\n        \"list_type\",\n        \"list_name_and_type\",\n    ],\n    admonition: Union[bool, str] = False,\n    prefix: str = \"\",\n    required: bool = False,\n    message: str = \"\",\n) -&gt; None\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringError","title":"DocstringError","text":"<p>               Bases: <code>Exception</code></p> <p>Summary</p> <p>Exception raised when a docstring validation error occurs.</p> Source code in <code>src/docstring_format_checker/utils/exceptions.py</code> <pre><code>class DocstringError(Exception):\n    \"\"\"\n    !!! note \"Summary\"\n        Exception raised when a docstring validation error occurs.\n    \"\"\"\n\n    def __init__(\n        self,\n        message: str,\n        file_path: str,\n        line_number: int,\n        item_name: str,\n        item_type: str,\n    ) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Initialize a DocstringError.\n        \"\"\"\n        self.message: str = message\n        self.file_path: str = file_path\n        self.line_number: int = line_number\n        self.item_name: str = item_name\n        self.item_type: str = item_type\n        super().__init__(f\"Line {line_number}, {item_type} '{item_name}': {message}\")\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringError.__init__","title":"__init__","text":"<pre><code>__init__(\n    message: str,\n    file_path: str,\n    line_number: int,\n    item_name: str,\n    item_type: str,\n) -&gt; None\n</code></pre> <p>Summary</p> <p>Initialize a DocstringError.</p> Source code in <code>src/docstring_format_checker/utils/exceptions.py</code> <pre><code>def __init__(\n    self,\n    message: str,\n    file_path: str,\n    line_number: int,\n    item_name: str,\n    item_type: str,\n) -&gt; None:\n    \"\"\"\n    !!! note \"Summary\"\n        Initialize a DocstringError.\n    \"\"\"\n    self.message: str = message\n    self.file_path: str = file_path\n    self.line_number: int = line_number\n    self.item_name: str = item_name\n    self.item_type: str = item_type\n    super().__init__(f\"Line {line_number}, {item_type} '{item_name}': {message}\")\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringError.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str = message\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringError.file_path","title":"file_path  <code>instance-attribute</code>","text":"<pre><code>file_path: str = file_path\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringError.line_number","title":"line_number  <code>instance-attribute</code>","text":"<pre><code>line_number: int = line_number\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringError.item_name","title":"item_name  <code>instance-attribute</code>","text":"<pre><code>item_name: str = item_name\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringError.item_type","title":"item_type  <code>instance-attribute</code>","text":"<pre><code>item_type: str = item_type\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.FunctionAndClassDetails","title":"FunctionAndClassDetails","text":"<p>               Bases: <code>NamedTuple</code></p> <p>Summary</p> <p>Details about a function or class found in the AST.</p> Source code in <code>src/docstring_format_checker/core.py</code> <pre><code>class FunctionAndClassDetails(NamedTuple):\n    \"\"\"\n    !!! note \"Summary\"\n        Details about a function or class found in the AST.\n    \"\"\"\n\n    item_type: Literal[\"function\", \"class\", \"method\"]\n    name: str\n    node: Union[ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef]\n    lineno: int\n    parent_class: Optional[str] = None\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.FunctionAndClassDetails.item_type","title":"item_type  <code>instance-attribute</code>","text":"<pre><code>item_type: Literal['function', 'class', 'method']\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.FunctionAndClassDetails.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.FunctionAndClassDetails.node","title":"node  <code>instance-attribute</code>","text":"<pre><code>node: Union[FunctionDef, AsyncFunctionDef, ClassDef]\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.FunctionAndClassDetails.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.FunctionAndClassDetails.parent_class","title":"parent_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parent_class: Optional[str] = None\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringChecker","title":"DocstringChecker","text":"<p>Summary</p> <p>Main class for checking docstring format and completeness.</p> Source code in <code>src/docstring_format_checker/core.py</code> <pre><code>class DocstringChecker:\n    \"\"\"\n    !!! note \"Summary\"\n        Main class for checking docstring format and completeness.\n    \"\"\"\n\n    def __init__(self, config: Config) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Initialize the docstring checker.\n\n        Params:\n            config (Config):\n                Configuration object containing global settings and section definitions.\n        \"\"\"\n        self.config: Config = config\n        self.sections_config: list[SectionConfig] = config.sections\n        self.required_sections: list[SectionConfig] = [s for s in config.sections if s.required]\n        self.optional_sections: list[SectionConfig] = [s for s in config.sections if not s.required]\n\n    def check_file(self, file_path: Union[str, Path]) -&gt; list[DocstringError]:\n        \"\"\"\n        !!! note \"Summary\"\n            Check docstrings in a Python file.\n\n        Params:\n            file_path (Union[str, Path]):\n                Path to the Python file to check.\n\n        Raises:\n            (FileNotFoundError):\n                If the file doesn't exist.\n            (InvalidFileError):\n                If the file is not a Python file.\n            (UnicodeError):\n                If the file can't be decoded.\n            (SyntaxError):\n                If the file contains invalid Python syntax.\n\n        Returns:\n            (list[DocstringError]):\n                List of DocstringError objects for any validation failures.\n        \"\"\"\n\n        file_path = Path(file_path)\n        if not file_path.exists():\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        if file_path.suffix != \".py\":\n            raise InvalidFileError(f\"File must be a Python file (.py): {file_path}\")\n\n        # Read and parse the file\n        try:\n            with open(file_path, encoding=\"utf-8\") as f:\n                content: str = f.read()\n        except UnicodeDecodeError as e:\n            raise UnicodeError(f\"Cannot decode file {file_path}: {e}\") from e\n\n        try:\n            tree: ast.Module = ast.parse(content)\n        except SyntaxError as e:\n            raise SyntaxError(f\"Invalid Python syntax in {file_path}: {e}\") from e\n\n        # Extract all functions and classes\n        items: list[FunctionAndClassDetails] = self._extract_items(tree)\n\n        # Check each item\n        errors: list[DocstringError] = []\n        for item in items:\n            try:\n                self._check_single_docstring(item, str(file_path))\n            except DocstringError as e:\n                errors.append(e)\n\n        return errors\n\n    def _should_exclude_file(self, relative_path: Path, exclude_patterns: list[str]) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if a file should be excluded based on patterns.\n\n        Params:\n            relative_path (Path):\n                The relative path of the file to check.\n            exclude_patterns (list[str]):\n                List of glob patterns to check against.\n\n        Returns:\n            (bool):\n                True if the file matches any exclusion pattern.\n        \"\"\"\n        for pattern in exclude_patterns:\n            if fnmatch.fnmatch(str(relative_path), pattern):\n                return True\n        return False\n\n    def _filter_python_files(\n        self,\n        python_files: list[Path],\n        directory_path: Path,\n        exclude_patterns: list[str],\n    ) -&gt; list[Path]:\n        \"\"\"\n        !!! note \"Summary\"\n            Filter Python files based on exclusion patterns.\n\n        Params:\n            python_files (list[Path]):\n                List of Python files to filter.\n            directory_path (Path):\n                The base directory path for relative path calculation.\n            exclude_patterns (list[str]):\n                List of glob patterns to exclude.\n\n        Returns:\n            (list[Path]):\n                Filtered list of Python files that don't match exclusion patterns.\n        \"\"\"\n        filtered_files: list[Path] = []\n        for file_path in python_files:\n            relative_path: Path = file_path.relative_to(directory_path)\n            if not self._should_exclude_file(relative_path, exclude_patterns):\n                filtered_files.append(file_path)\n        return filtered_files\n\n    def _check_file_with_error_handling(self, file_path: Path) -&gt; list[DocstringError]:\n        \"\"\"\n        !!! note \"Summary\"\n            Check a single file and handle exceptions gracefully.\n\n        Params:\n            file_path (Path):\n                Path to the file to check.\n\n        Returns:\n            (list[DocstringError]):\n                List of DocstringError objects found in the file.\n        \"\"\"\n        try:\n            return self.check_file(file_path)\n        except (FileNotFoundError, ValueError, SyntaxError) as e:\n            # Create a special error for file-level issues\n            error = DocstringError(\n                message=str(e),\n                file_path=str(file_path),\n                line_number=0,\n                item_name=\"\",\n                item_type=\"file\",\n            )\n            return [error]\n\n    def check_directory(\n        self,\n        directory_path: Union[str, Path],\n        exclude_patterns: Optional[list[str]] = None,\n    ) -&gt; dict[str, list[DocstringError]]:\n        \"\"\"\n        !!! note \"Summary\"\n            Check docstrings in all Python files in a directory recursively.\n\n        Params:\n            directory_path (Union[str, Path]):\n                Path to the directory to check.\n            exclude_patterns (Optional[list[str]]):\n                List of glob patterns to exclude.\n\n        Raises:\n            (FileNotFoundError):\n                If the directory doesn't exist.\n            (DirectoryNotFoundError):\n                If the path is not a directory.\n\n        Returns:\n            (dict[str, list[DocstringError]]):\n                Dictionary mapping file paths to lists of DocstringError objects.\n        \"\"\"\n        directory_path = Path(directory_path)\n        if not directory_path.exists():\n            raise FileNotFoundError(f\"Directory not found: {directory_path}\")\n\n        if not directory_path.is_dir():\n            raise DirectoryNotFoundError(f\"Path is not a directory: {directory_path}\")\n\n        python_files: list[Path] = list(directory_path.glob(\"**/*.py\"))\n\n        # Filter out excluded patterns if provided\n        if exclude_patterns:\n            python_files = self._filter_python_files(python_files, directory_path, exclude_patterns)\n\n        # Check each file and collect results\n        results: dict[str, list[DocstringError]] = {}\n        for file_path in python_files:\n            errors: list[DocstringError] = self._check_file_with_error_handling(file_path)\n            if errors:  # Only include files with errors\n                results[str(file_path)] = errors\n\n        return results\n\n    def _is_overload_function(self, node: Union[ast.FunctionDef, ast.AsyncFunctionDef]) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if a function definition is decorated with @overload.\n\n        Params:\n            node (Union[ast.FunctionDef, ast.AsyncFunctionDef]):\n                The function node to check for @overload decorator.\n\n        Returns:\n            (bool):\n                True if the function has @overload decorator, False otherwise.\n        \"\"\"\n\n        for decorator in node.decorator_list:\n            # Handle direct name reference: @overload\n            if isinstance(decorator, ast.Name) and decorator.id == \"overload\":\n                return True\n            # Handle attribute reference: @typing.overload\n            elif isinstance(decorator, ast.Attribute) and decorator.attr == \"overload\":\n                return True\n        return False\n\n    def _extract_items(self, tree: ast.AST) -&gt; list[FunctionAndClassDetails]:\n        \"\"\"\n        !!! note \"Summary\"\n            Extract all functions and classes from the AST.\n\n        Params:\n            tree (ast.AST):\n                The Abstract Syntax Tree (AST) to extract items from.\n\n        Returns:\n            (list[FunctionAndClassDetails]):\n                A list of extracted function and class details.\n        \"\"\"\n\n        items: list[FunctionAndClassDetails] = []\n\n        class ItemVisitor(ast.NodeVisitor):\n            \"\"\"\n            !!! note \"Summary\"\n                AST visitor to extract function and class definitions\n            \"\"\"\n\n            def __init__(self, checker: DocstringChecker) -&gt; None:\n                \"\"\"\n                !!! note \"Summary\"\n                    Initialize the AST visitor.\n                \"\"\"\n                self.class_stack: list[str] = []\n                self.checker: DocstringChecker = checker\n\n            def visit_ClassDef(self, node: ast.ClassDef) -&gt; None:\n                \"\"\"\n                !!! note \"Summary\"\n                    Visit class definition node.\n                \"\"\"\n                # Skip private classes unless check_private is enabled\n                should_check: bool = self.checker.config.global_config.check_private or not node.name.startswith(\"_\")\n                if should_check:\n                    items.append(\n                        FunctionAndClassDetails(\n                            item_type=\"class\",\n                            name=node.name,\n                            node=node,\n                            lineno=node.lineno,\n                            parent_class=None,\n                        )\n                    )\n\n                # Visit methods in this class\n                self.class_stack.append(node.name)\n                self.generic_visit(node)\n                self.class_stack.pop()\n\n            def visit_FunctionDef(self, node: ast.FunctionDef) -&gt; None:\n                \"\"\"\n                !!! note \"Summary\"\n                    Visit function definition node.\n                \"\"\"\n                self._visit_function(node)\n\n            def visit_AsyncFunctionDef(self, node: ast.AsyncFunctionDef) -&gt; None:\n                \"\"\"\n                !!! note \"Summary\"\n                    Visit async function definition node.\n                \"\"\"\n                self._visit_function(node)\n\n            def _visit_function(self, node: Union[ast.FunctionDef, ast.AsyncFunctionDef]) -&gt; None:\n                \"\"\"\n                !!! note \"Summary\"\n                    Visit function definition node (sync or async).\n                \"\"\"\n\n                # Skip private functions unless check_private is enabled\n                should_check: bool = self.checker.config.global_config.check_private or not node.name.startswith(\"_\")\n                if should_check:\n                    # Skip @overload functions - they don't need docstrings\n                    if not self.checker._is_overload_function(node):\n                        item_type: Literal[\"function\", \"method\"] = \"method\" if self.class_stack else \"function\"\n                        parent_class: Optional[str] = self.class_stack[-1] if self.class_stack else None\n\n                        items.append(\n                            FunctionAndClassDetails(\n                                item_type=item_type,\n                                name=node.name,\n                                node=node,\n                                lineno=node.lineno,\n                                parent_class=parent_class,\n                            )\n                        )\n\n                self.generic_visit(node)\n\n        visitor = ItemVisitor(self)\n        visitor.visit(tree)\n\n        return items\n\n    def _is_section_applicable_to_item(\n        self,\n        section: SectionConfig,\n        item: FunctionAndClassDetails,\n    ) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if a section configuration applies to the given item type.\n\n        Params:\n            section (SectionConfig):\n                The section configuration to check.\n            item (FunctionAndClassDetails):\n                The function or class to check against.\n\n        Returns:\n            (bool):\n                True if the section applies to this item type.\n        \"\"\"\n\n        is_function: bool = isinstance(item.node, (ast.FunctionDef, ast.AsyncFunctionDef))\n\n        # Free text sections apply only to functions and methods, not classes\n        if section.type == \"free_text\":\n            return is_function\n\n        # List name and type sections have specific rules\n        if section.type == \"list_name_and_type\":\n            section_name_lower: str = section.name.lower()\n\n            # Params only apply to functions/methods\n            if section_name_lower == \"params\" and is_function:\n                return True\n\n            # Returns only apply to functions/methods\n            if section_name_lower in [\"returns\", \"return\"] and is_function:\n                return True\n\n            return False\n\n        # These sections apply to functions/methods that might have them\n        if section.type in [\"list_type\", \"list_name\"]:\n            return is_function\n\n        return False\n\n    def _get_applicable_required_sections(self, item: FunctionAndClassDetails) -&gt; list[SectionConfig]:\n        \"\"\"\n        !!! note \"Summary\"\n            Get all required sections that apply to the given item.\n\n        Params:\n            item (FunctionAndClassDetails):\n                The function or class to check.\n\n        Returns:\n            (list[SectionConfig]):\n                List of section configurations that are required and apply to this item.\n        \"\"\"\n\n        # Filter required sections based on item type\n        applicable_sections: list[SectionConfig] = []\n        for section in self.sections_config:\n            if section.required and self._is_section_applicable_to_item(section, item):\n                applicable_sections.append(section)\n        return applicable_sections\n\n    def _handle_missing_docstring(\n        self,\n        item: FunctionAndClassDetails,\n        file_path: str,\n        requires_docstring: bool,\n    ) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Handle the case where a docstring is missing.\n\n        Params:\n            item (FunctionAndClassDetails):\n                The function or class without a docstring.\n            file_path (str):\n                The path to the file containing the item.\n            requires_docstring (bool):\n                Whether a docstring is required for this item.\n\n        Raises:\n            DocstringError: If docstring is required but missing.\n        \"\"\"\n\n        # Raise error if docstring is required\n        if requires_docstring and self.config.global_config.require_docstrings:\n            message: str = f\"Missing docstring for {item.item_type}\"\n            raise DocstringError(\n                message=message,\n                file_path=file_path,\n                line_number=item.lineno,\n                item_name=item.name,\n                item_type=item.item_type,\n            )\n\n    def _check_single_docstring(self, item: FunctionAndClassDetails, file_path: str) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Check a single function or class docstring.\n\n        Params:\n            item (FunctionAndClassDetails):\n                The function or class to check.\n            file_path (str):\n                The path to the file containing the item.\n\n        Returns:\n            (None):\n                Nothing is returned.\n        \"\"\"\n\n        docstring: Optional[str] = ast.get_docstring(item.node)\n\n        # Determine which required sections apply to this item type\n        applicable_sections: list[SectionConfig] = self._get_applicable_required_sections(item)\n        requires_docstring: bool = len(applicable_sections) &gt; 0\n\n        # Only require docstrings if the global flag is enabled\n        if not docstring:\n            self._handle_missing_docstring(item, file_path, requires_docstring)\n            return  # No docstring required or docstring requirement disabled\n\n        # Validate docstring sections if docstring exists\n        self._validate_docstring_sections(docstring, item, file_path)\n\n    def _validate_docstring_sections(\n        self,\n        docstring: str,\n        item: FunctionAndClassDetails,\n        file_path: str,\n    ) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate the sections within a docstring.\n\n        Params:\n            docstring (str):\n                The docstring to validate.\n            item (FunctionAndClassDetails):\n                The function or class to check.\n            file_path (str):\n                The path to the file containing the item.\n\n        Returns:\n            (None):\n                Nothing is returned.\n        \"\"\"\n\n        errors: list[str] = []\n\n        # Validate required sections\n        required_section_errors: list[str] = self._validate_all_required_sections(docstring, item)\n        errors.extend(required_section_errors)\n\n        # Perform comprehensive validation checks\n        comprehensive_errors: list[str] = self._perform_comprehensive_validation(docstring)\n        errors.extend(comprehensive_errors)\n\n        # Report errors if found\n        if errors:\n            combined_message: str = \"; \".join(errors)\n            raise DocstringError(\n                message=combined_message,\n                file_path=file_path,\n                line_number=item.lineno,\n                item_name=item.name,\n                item_type=item.item_type,\n            )\n\n    def _validate_all_required_sections(self, docstring: str, item: FunctionAndClassDetails) -&gt; list[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate all required sections are present and valid.\n\n        Params:\n            docstring (str):\n                The docstring to validate.\n            item (FunctionAndClassDetails):\n                The function or class details.\n\n        Returns:\n            (list[str]):\n                List of validation error messages.\n        \"\"\"\n\n        errors: list[str] = []\n        for section in self.required_sections:\n            section_error = self._validate_single_required_section(docstring, section, item)\n            if section_error:\n                errors.append(section_error)\n        return errors\n\n    def _validate_single_required_section(\n        self, docstring: str, section: SectionConfig, item: FunctionAndClassDetails\n    ) -&gt; Optional[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate a single required section based on its type.\n\n        Params:\n            docstring (str):\n                The docstring to validate.\n            section (SectionConfig):\n                The section configuration to validate against.\n            item (FunctionAndClassDetails):\n                The function or class details.\n\n        Returns:\n            (Optional[str]):\n                Error message if validation fails, None otherwise.\n        \"\"\"\n\n        if section.type == \"free_text\":\n            return self._validate_free_text_section(docstring, section)\n        elif section.type == \"list_name_and_type\":\n            return self._validate_list_name_and_type_section(docstring, section, item)\n        elif section.type == \"list_type\":\n            return self._validate_list_type_section(docstring, section)\n        elif section.type == \"list_name\":\n            return self._validate_list_name_section(docstring, section)\n        return None\n\n    def _validate_free_text_section(self, docstring: str, section: SectionConfig) -&gt; Optional[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate free text sections.\n\n        Params:\n            docstring (str):\n                The docstring to validate.\n            section (SectionConfig):\n                The section configuration.\n\n        Returns:\n            (Optional[str]):\n                Error message if section is missing, None otherwise.\n        \"\"\"\n\n        if not self._check_free_text_section(docstring, section):\n            return f\"Missing required section: {section.name}\"\n        return None\n\n    def _validate_list_name_and_type_section(\n        self, docstring: str, section: SectionConfig, item: FunctionAndClassDetails\n    ) -&gt; Optional[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate list_name_and_type sections (params, returns).\n\n        Params:\n            docstring (str):\n                The docstring to validate.\n            section (SectionConfig):\n                The section configuration.\n            item (FunctionAndClassDetails):\n                The function or class details.\n\n        Returns:\n            (Optional[str]):\n                Error message if section is invalid, None otherwise.\n        \"\"\"\n\n        section_name: str = section.name.lower()\n\n        if section_name == \"params\" and isinstance(item.node, (ast.FunctionDef, ast.AsyncFunctionDef)):\n            if not self._check_params_section(docstring, item.node):\n                return \"Missing or invalid Params section\"\n        elif section_name in [\"returns\", \"return\"]:\n            if not self._check_returns_section(docstring):\n                return \"Missing or invalid Returns section\"\n\n        return None\n\n    def _validate_list_type_section(self, docstring: str, section: SectionConfig) -&gt; Optional[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate list_type sections (raises, yields).\n\n        Params:\n            docstring (str):\n                The docstring to validate.\n            section (SectionConfig):\n                The section configuration.\n\n        Returns:\n            (Optional[str]):\n                Error message if section is invalid, None otherwise.\n        \"\"\"\n\n        section_name: str = section.name.lower()\n\n        if section_name in [\"raises\", \"raise\"]:\n            if not self._check_raises_section(docstring):\n                return \"Missing or invalid Raises section\"\n        elif section_name in [\"yields\", \"yield\"]:\n            if not self._check_yields_section(docstring):\n                return \"Missing or invalid Yields section\"\n\n        return None\n\n    def _validate_list_name_section(self, docstring: str, section: SectionConfig) -&gt; Optional[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate list_name sections.\n\n        Params:\n            docstring (str):\n                The docstring to validate.\n            section (SectionConfig):\n                The section configuration.\n\n        Returns:\n            (Optional[str]):\n                Error message if section is missing, None otherwise.\n        \"\"\"\n        if not self._check_simple_section(docstring, section.name):\n            return f\"Missing required section: {section.name}\"\n        return None\n\n    def _perform_comprehensive_validation(self, docstring: str) -&gt; list[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Perform comprehensive validation checks on docstring.\n\n        Params:\n            docstring (str):\n                The docstring to validate.\n\n        Returns:\n            (list[str]):\n                List of validation error messages.\n        \"\"\"\n\n        errors: list[str] = []\n\n        # Check section order\n        order_errors: list[str] = self._check_section_order(docstring)\n        errors.extend(order_errors)\n\n        # Check for mutual exclusivity (returns vs yields)\n        if self._has_both_returns_and_yields(docstring):\n            errors.append(\"Docstring cannot have both Returns and Yields sections\")\n\n        # Check for undefined sections (only if not allowed)\n        if not self.config.global_config.allow_undefined_sections:\n            undefined_errors: list[str] = self._check_undefined_sections(docstring)\n            errors.extend(undefined_errors)\n\n        # Perform formatting validation\n        formatting_errors: list[str] = self._perform_formatting_validation(docstring)\n        errors.extend(formatting_errors)\n\n        return errors\n\n    def _perform_formatting_validation(self, docstring: str) -&gt; list[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Perform formatting validation checks.\n\n        Params:\n            docstring (str):\n                The docstring to validate.\n\n        Returns:\n            (list[str]):\n                List of formatting error messages.\n        \"\"\"\n\n        errors: list[str] = []\n\n        # Check admonition values\n        admonition_errors: list[str] = self._check_admonition_values(docstring)\n        errors.extend(admonition_errors)\n\n        # Check colon usage\n        colon_errors: list[str] = self._check_colon_usage(docstring)\n        errors.extend(colon_errors)\n\n        # Check title case\n        title_case_errors: list[str] = self._check_title_case_sections(docstring)\n        errors.extend(title_case_errors)\n\n        # Check parentheses\n        parentheses_errors: list[str] = self._check_parentheses_validation(docstring)\n        errors.extend(parentheses_errors)\n\n        return errors\n\n    def _check_free_text_section(self, docstring: str, section: SectionConfig) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if a free text section exists in the docstring.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n            section (SectionConfig):\n                The section configuration to validate.\n\n        Returns:\n            (bool):\n                `True` if the section exists, `False` otherwise.\n        \"\"\"\n\n        # Make the section name part case-insensitive too\n        if isinstance(section.admonition, str) and section.admonition and section.prefix:\n            # Format like: !!! note \"Summary\"\n            escaped_name: str = re.escape(section.name)\n            pattern: str = (\n                rf'{re.escape(section.prefix)}\\s+{re.escape(section.admonition)}\\s+\"[^\"]*{escaped_name}[^\"]*\"'\n            )\n            return bool(re.search(pattern, docstring, re.IGNORECASE))\n\n        # For summary, accept either formal format or simple docstring\n        if section.name.lower() in [\"summary\"]:\n            formal_pattern = r'!!! note \"Summary\"'\n            if re.search(formal_pattern, docstring, re.IGNORECASE):\n                return True\n            # Accept any non-empty docstring as summary\n            return len(docstring.strip()) &gt; 0\n\n        # Look for examples section\n        elif section.name.lower() in [\"examples\", \"example\"]:\n            return bool(re.search(r'\\?\\?\\?\\+ example \"Examples\"', docstring, re.IGNORECASE))\n\n        # Default to true for unknown free text sections\n        return True\n\n    def _check_params_section(self, docstring: str, node: Union[ast.FunctionDef, ast.AsyncFunctionDef]) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if the Params section exists and documents all parameters.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n            node (Union[ast.FunctionDef, ast.AsyncFunctionDef]):\n                The function node to check.\n\n        Returns:\n            (bool):\n                `True` if the section exists and is valid, `False` otherwise.\n        \"\"\"\n\n        # Get function parameters (excluding 'self' for methods)\n        params: list[str] = [arg.arg for arg in node.args.args if arg.arg != \"self\"]\n\n        if not params:\n            return True  # No parameters to document\n\n        # Check if Params section exists\n        if not re.search(r\"Params:\", docstring):\n            return False\n\n        # Check each parameter is documented\n        for param in params:\n            param_pattern: str = rf\"{re.escape(param)}\\s*\\([^)]+\\):\"\n            if not re.search(param_pattern, docstring):\n                return False\n\n        return True\n\n    def _check_returns_section(self, docstring: str) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if the Returns section exists.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n\n        Returns:\n            (bool):\n                `True` if the section exists, `False` otherwise.\n        \"\"\"\n\n        return bool(re.search(r\"Returns:\", docstring))\n\n    def _check_raises_section(self, docstring: str) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if the Raises section exists.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n\n        Returns:\n            (bool):\n                `True` if the section exists, `False` otherwise.\n        \"\"\"\n\n        return bool(re.search(r\"Raises:\", docstring))\n\n    def _has_both_returns_and_yields(self, docstring: str) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if docstring has both Returns and Yields sections.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n\n        Returns:\n            (bool):\n                `True` if the section exists, `False` otherwise.\n        \"\"\"\n\n        has_returns = bool(re.search(r\"Returns:\", docstring))\n        has_yields = bool(re.search(r\"Yields:\", docstring))\n        return has_returns and has_yields\n\n    def _build_section_patterns(self) -&gt; list[tuple[str, str]]:\n        \"\"\"\n        !!! note \"Summary\"\n            Build regex patterns for detecting sections from configuration.\n\n        Returns:\n            (list[tuple[str, str]]):\n                List of tuples containing (pattern, section_name).\n        \"\"\"\n        section_patterns: list[tuple[str, str]] = []\n        for section in sorted(self.sections_config, key=lambda x: x.order):\n            if (\n                section.type == \"free_text\"\n                and isinstance(section.admonition, str)\n                and section.admonition\n                and section.prefix\n            ):\n                pattern: str = (\n                    rf'{re.escape(section.prefix)}\\s+{re.escape(section.admonition)}\\s+\".*{re.escape(section.name)}\"'\n                )\n                section_patterns.append((pattern, section.name))\n            elif section.name.lower() == \"params\":\n                section_patterns.append((r\"Params:\", \"Params\"))\n            elif section.name.lower() in [\"returns\", \"return\"]:\n                section_patterns.append((r\"Returns:\", \"Returns\"))\n            elif section.name.lower() in [\"yields\", \"yield\"]:\n                section_patterns.append((r\"Yields:\", \"Yields\"))\n            elif section.name.lower() in [\"raises\", \"raise\"]:\n                section_patterns.append((r\"Raises:\", \"Raises\"))\n\n        # Add default patterns for common sections\n        default_patterns: list[tuple[str, str]] = [\n            (r'!!! note \"Summary\"', \"Summary\"),\n            (r'!!! details \"Details\"', \"Details\"),\n            (r'\\?\\?\\?\\+ example \"Examples\"', \"Examples\"),\n            (r'\\?\\?\\?\\+ success \"Credit\"', \"Credit\"),\n            (r'\\?\\?\\?\\+ calculation \"Equation\"', \"Equation\"),\n            (r'\\?\\?\\?\\+ info \"Notes\"', \"Notes\"),\n            (r'\\?\\?\\? question \"References\"', \"References\"),\n            (r'\\?\\?\\? tip \"See Also\"', \"See Also\"),\n        ]\n\n        return section_patterns + default_patterns\n\n    def _find_sections_with_positions(self, docstring: str, patterns: list[tuple[str, str]]) -&gt; list[tuple[int, str]]:\n        \"\"\"\n        !!! note \"Summary\"\n            Find all sections in docstring and their positions.\n\n        Params:\n            docstring (str):\n                The docstring to search.\n            patterns (list[tuple[str, str]]):\n                List of (pattern, section_name) tuples to search for.\n\n        Returns:\n            (list[tuple[int, str]]):\n                List of (position, section_name) tuples sorted by position.\n        \"\"\"\n        found_sections: list[tuple[int, str]] = []\n        for pattern, section_name in patterns:\n            match: Optional[re.Match[str]] = re.search(pattern, docstring, re.IGNORECASE)\n            if match:\n                found_sections.append((match.start(), section_name))\n\n        # Sort by position in docstring\n        found_sections.sort(key=lambda x: x[0])\n        return found_sections\n\n    def _build_expected_section_order(self) -&gt; list[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Build the expected order of sections from configuration.\n\n        Returns:\n            (list[str]):\n                List of section names in expected order.\n        \"\"\"\n        expected_order: list[str] = [s.name.title() for s in sorted(self.sections_config, key=lambda x: x.order)]\n        expected_order.extend(\n            [\n                \"Summary\",\n                \"Details\",\n                \"Examples\",\n                \"Credit\",\n                \"Equation\",\n                \"Notes\",\n                \"References\",\n                \"See Also\",\n            ]\n        )\n        return expected_order\n\n    def _check_section_order(self, docstring: str) -&gt; list[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Check that sections appear in the correct order.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n\n        Returns:\n            (list[str]):\n                A list of error messages, if any.\n        \"\"\"\n        # Build patterns and find sections\n        patterns = self._build_section_patterns()\n        found_sections = self._find_sections_with_positions(docstring, patterns)\n        expected_order = self._build_expected_section_order()\n\n        # Check order matches expected order\n        errors: list[str] = []\n        last_expected_index = -1\n        for _, section_name in found_sections:\n            try:\n                current_index: int = expected_order.index(section_name)\n                if current_index &lt; last_expected_index:\n                    errors.append(f\"Section '{section_name}' appears out of order\")\n                last_expected_index: int = current_index\n            except ValueError:\n                # Section not in expected order list - might be OK\n                pass\n\n        return errors\n\n    def _check_yields_section(self, docstring: str) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if the Yields section exists.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n\n        Returns:\n            (bool):\n                `True` if the section exists, `False` otherwise.\n        \"\"\"\n\n        return bool(re.search(r\"Yields:\", docstring))\n\n    def _check_simple_section(self, docstring: str, section_name: str) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if a simple named section exists.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n            section_name (str):\n                The name of the section to check for.\n\n        Returns:\n            (bool):\n                `True` if the section exists, `False` otherwise.\n        \"\"\"\n\n        pattern: str = rf\"{re.escape(section_name)}:\"\n        return bool(re.search(pattern, docstring, re.IGNORECASE))\n\n    def _normalize_section_name(self, section_name: str) -&gt; str:\n        \"\"\"\n        !!! note \"Summary\"\n            Normalize section name by removing colons and whitespace.\n\n        Params:\n            section_name (str):\n                The raw section name to normalize.\n\n        Returns:\n            (str):\n                The normalized section name.\n        \"\"\"\n        return section_name.lower().strip().rstrip(\":\")\n\n    def _is_valid_section_name(self, section_name: str) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if section name is valid.\n\n        !!! abstract \"Details\"\n            Filters out empty names, code block markers, and special characters.\n\n        Params:\n            section_name (str):\n                The section name to validate.\n\n        Returns:\n            (bool):\n                True if the section name is valid, False otherwise.\n        \"\"\"\n        # Skip empty matches or common docstring content\n        if not section_name or section_name in [\"\", \"py\", \"python\", \"sh\", \"shell\"]:\n            return False\n\n        # Skip code blocks and inline code\n        if any(char in section_name for char in [\"`\", \".\", \"/\", \"\\\\\"]):\n            return False\n\n        return True\n\n    def _extract_section_names_from_docstring(self, docstring: str) -&gt; set[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Extract all section names found in docstring.\n\n        Params:\n            docstring (str):\n                The docstring to extract section names from.\n\n        Returns:\n            (set[str]):\n                A set of normalized section names found in the docstring.\n        \"\"\"\n        # Common patterns for different section types\n        section_patterns: list[tuple[str, str]] = [\n            # Standard sections with colons (but not inside quotes)\n            (r\"^(\\w+):\\s*\", \"colon\"),\n            # Admonition sections with various prefixes\n            (r\"(?:\\?\\?\\?[+]?|!!!)\\s+\\w+\\s+\\\"([^\\\"]+)\\\"\", \"admonition\"),\n        ]\n\n        found_sections: set[str] = set()\n\n        for pattern, pattern_type in section_patterns:\n            matches: Iterator[re.Match[str]] = re.finditer(pattern, docstring, re.IGNORECASE | re.MULTILINE)\n            for match in matches:\n                section_name: str = self._normalize_section_name(match.group(1))\n\n                if self._is_valid_section_name(section_name):\n                    found_sections.add(section_name)\n\n        return found_sections\n\n    def _check_undefined_sections(self, docstring: str) -&gt; list[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Check for sections in docstring that are not defined in configuration.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n\n        Returns:\n            (list[str]):\n                A list of error messages for undefined sections.\n        \"\"\"\n        errors: list[str] = []\n\n        # Get all configured section names (case-insensitive)\n        configured_sections: set[str] = {section.name.lower() for section in self.sections_config}\n\n        # Extract all section names from docstring\n        found_sections: set[str] = self._extract_section_names_from_docstring(docstring)\n\n        # Check which found sections are not configured\n        for section_name in found_sections:\n            if section_name not in configured_sections:\n                errors.append(f\"Section '{section_name}' found in docstring but not defined in configuration\")\n\n        return errors\n\n    def _build_admonition_mapping(self) -&gt; dict[str, str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Build mapping of section names to expected admonitions.\n\n        Returns:\n            (dict[str, str]):\n                Dictionary mapping section name to admonition type.\n        \"\"\"\n        section_admonitions: dict[str, str] = {}\n        for section in self.sections_config:\n            if section.type == \"free_text\" and isinstance(section.admonition, str) and section.admonition:\n                section_admonitions[section.name.lower()] = section.admonition.lower()\n        return section_admonitions\n\n    def _validate_single_admonition(self, match: re.Match[str], section_admonitions: dict[str, str]) -&gt; Optional[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate a single admonition match against configuration.\n\n        Params:\n            match (re.Match[str]):\n                The regex match for an admonition section.\n            section_admonitions (dict[str, str]):\n                Mapping of section names to expected admonitions.\n\n        Returns:\n            (Optional[str]):\n                Error message if validation fails, None otherwise.\n        \"\"\"\n        actual_admonition: str = match.group(1).lower()\n        section_title: str = match.group(2).lower()\n\n        # Check if this section is configured with a specific admonition\n        if section_title in section_admonitions:\n            expected_admonition: str = section_admonitions[section_title]\n            if actual_admonition != expected_admonition:\n                return (\n                    f\"Section '{section_title}' has incorrect admonition '{actual_admonition}', \"\n                    f\"expected '{expected_admonition}'\"\n                )\n\n        # Check if section shouldn't have admonition but does\n        section_config: Optional[SectionConfig] = next(\n            (s for s in self.sections_config if s.name.lower() == section_title), None\n        )\n        if section_config and section_config.admonition is False:\n            return f\"Section '{section_title}' is configured as non-admonition but found as admonition\"\n\n        return None\n\n    def _check_admonition_values(self, docstring: str) -&gt; list[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Check that admonition values in docstring match configuration.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n\n        Returns:\n            (list[str]):\n                A list of error messages for mismatched admonitions.\n        \"\"\"\n        errors: list[str] = []\n\n        # Build admonition mapping\n        section_admonitions = self._build_admonition_mapping()\n\n        # Pattern to find all admonition sections\n        admonition_pattern = r\"(?:\\?\\?\\?[+]?|!!!)\\s+(\\w+)\\s+\\\"([^\\\"]+)\\\"\"\n        matches: Iterator[re.Match[str]] = re.finditer(admonition_pattern, docstring, re.IGNORECASE)\n\n        # Validate each admonition\n        for match in matches:\n            error = self._validate_single_admonition(match, section_admonitions)\n            if error:\n                errors.append(error)\n\n        return errors\n\n    def _validate_admonition_has_no_colon(self, match: re.Match[str]) -&gt; Optional[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate that a single admonition section does not have a colon.\n\n        Params:\n            match (re.Match[str]):\n                The regex match for an admonition section.\n\n        Returns:\n            (Optional[str]):\n                An error message if colon found, None otherwise.\n        \"\"\"\n\n        section_title: str = match.group(1)\n        has_colon: bool = section_title.endswith(\":\")\n        section_title_clean: str = section_title.rstrip(\":\").lower()\n\n        # Find config for this section\n        section_config: Optional[SectionConfig] = next(\n            (s for s in self.sections_config if s.name.lower() == section_title_clean), None\n        )\n\n        if section_config and isinstance(section_config.admonition, str) and section_config.admonition:\n            if has_colon:\n                return (\n                    f\"Section '{section_title_clean}' is an admonition, therefore it should not end with ':', \"\n                    f\"see: '{match.group(0)}'\"\n                )\n\n        return None\n\n    def _check_admonition_colon_usage(self, docstring: str) -&gt; list[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Check that admonition sections don't end with colon.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n\n        Returns:\n            (list[str]):\n                A list of error messages.\n        \"\"\"\n\n        errors: list[str] = []\n        admonition_pattern = r\"(?:\\?\\?\\?[+]?|!!!)\\s+\\w+\\s+\\\"([^\\\"]+)\\\"\"\n        matches: Iterator[re.Match[str]] = re.finditer(admonition_pattern, docstring, re.IGNORECASE)\n\n        for match in matches:\n            error: Optional[str] = self._validate_admonition_has_no_colon(match)\n            if error:\n                errors.append(error)\n\n        return errors\n\n    def _validate_non_admonition_has_colon(self, line: str, pattern: str) -&gt; Optional[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate that a single line has colon if it's a non-admonition section.\n\n        Params:\n            line (str):\n                The line to check.\n            pattern (str):\n                The regex pattern to match.\n\n        Returns:\n            (Optional[str]):\n                An error message if colon missing, None otherwise.\n        \"\"\"\n\n        match: Optional[re.Match[str]] = re.match(pattern, line)\n        if not match:\n            return None\n\n        section_name: str = match.group(1).lower()\n        has_colon: bool = match.group(2) == \":\"\n\n        # Find config for this section\n        section_config: Optional[SectionConfig] = next(\n            (s for s in self.sections_config if s.name.lower() == section_name), None\n        )\n\n        if section_config and section_config.admonition is False:\n            if not has_colon:\n                return f\"Section '{section_name}' is non-admonition, therefore it must end with ':', \" f\"see: '{line}'\"\n\n        return None\n\n    def _check_non_admonition_colon_usage(self, docstring: str) -&gt; list[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Check that non-admonition sections end with colon.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n\n        Returns:\n            (list[str]):\n                A list of error messages.\n        \"\"\"\n\n        errors: list[str] = []\n        non_admonition_pattern = r\"^(\\w+)(:?)$\"\n\n        for line in docstring.split(\"\\n\"):\n            line: str = line.strip()\n            error: Optional[str] = self._validate_non_admonition_has_colon(line, non_admonition_pattern)\n            if error:\n                errors.append(error)\n\n        return errors\n\n    def _check_colon_usage(self, docstring: str) -&gt; list[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Check that colons are used correctly for admonition vs non-admonition sections.\n\n        Params:\n            docstring (str):\n                The docstring to check.\n\n        Returns:\n            (list[str]):\n                A list of error messages.\n        \"\"\"\n\n        errors: list[str] = []\n\n        # Check admonition sections (should not end with colon)\n        errors.extend(self._check_admonition_colon_usage(docstring))\n\n        # Check non-admonition sections (should end with colon)\n        errors.extend(self._check_non_admonition_colon_usage(docstring))\n\n        return errors\n\n    def _check_title_case_sections(self, docstring: str) -&gt; list[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Check that non-admonition sections are single word, title case, and match config name.\n        \"\"\"\n\n        errors: list[str] = []\n\n        # Pattern to find section headers (single word followed by optional colon)\n        section_pattern = r\"^(\\w+):?$\"\n\n        for line in docstring.split(\"\\n\"):\n            line: str = line.strip()\n            match: Optional[re.Match[str]] = re.match(section_pattern, line)\n            if match:\n                section_word: str = match.group(1)\n                section_name_lower: str = section_word.lower()\n\n                # Check if this is a configured non-admonition section\n                section_config: Optional[SectionConfig] = next(\n                    (s for s in self.sections_config if s.name.lower() == section_name_lower), None\n                )\n                if section_config and section_config.admonition is False:\n                    # Check if it's title case\n                    expected_title_case: str = section_config.name.title()\n                    if section_word != expected_title_case:\n                        errors.append(\n                            f\"Section '{section_name_lower}' must be in title case as '{expected_title_case}', \"\n                            f\"found: '{section_word}'\"\n                        )\n\n        return errors\n\n    def _check_parentheses_validation(self, docstring: str) -&gt; list[str]:\n        \"\"\"\n        !!! note \"Summary\"\n            Check that list_type and list_name_and_type sections have proper parentheses.\n        \"\"\"\n\n        errors: list[str] = []\n\n        # Get sections that require parentheses\n        parentheses_sections: list[SectionConfig] = [\n            s for s in self.sections_config if s.type in [\"list_type\", \"list_name_and_type\"]\n        ]\n\n        if not parentheses_sections:\n            return errors\n\n        # Process each line in the docstring\n        lines: list[str] = docstring.split(\"\\n\")\n        current_section: Optional[SectionConfig] = None\n        type_line_indent: Optional[int] = None\n\n        for line in lines:\n            stripped_line: str = line.strip()\n\n            # Check for any section header (to properly transition out of current section)\n            section_detected: bool = self._detect_any_section_header(stripped_line, line)\n            if section_detected:\n                # Check if it's a parentheses-required section\n                new_section: Optional[SectionConfig] = self._detect_section_header(\n                    stripped_line, line, parentheses_sections\n                )\n                current_section = new_section  # None if not parentheses-required\n                type_line_indent = None\n                continue\n\n            # Process content lines within parentheses-required sections\n            if current_section and self._is_content_line(stripped_line):\n                line_errors: list[str]\n                new_indent: Optional[int]\n                line_errors, new_indent = self._validate_parentheses_line(\n                    line, stripped_line, current_section, type_line_indent\n                )\n                errors.extend(line_errors)\n                if new_indent is not None:\n                    type_line_indent = new_indent\n\n        return errors\n\n    def _detect_any_section_header(self, stripped_line: str, full_line: str) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Detect any section header (for section transitions).\n\n        Params:\n            stripped_line (str):\n                The stripped line content.\n            full_line (str):\n                The full line with indentation.\n\n        Returns:\n            (bool):\n                True if line is a section header, False otherwise.\n        \"\"\"\n        # Admonition sections\n        admonition_match: Optional[re.Match[str]] = re.match(\n            r\"(?:\\?\\?\\?[+]?|!!!)\\s+\\w+\\s+\\\"([^\\\"]+)\\\"\", stripped_line, re.IGNORECASE\n        )\n        if admonition_match:\n            section_name: str = admonition_match.group(1).lower()\n            # Check if it's a known section\n            return any(s.name.lower() == section_name for s in self.sections_config)\n\n        # Non-admonition sections (must not be indented)\n        if not full_line.startswith((\" \", \"\\t\")):\n            simple_section_match: Optional[re.Match[str]] = re.match(r\"^(\\w+):?$\", stripped_line)\n            if simple_section_match:\n                section_name: str = simple_section_match.group(1).lower()\n                # Check if it's a known section\n                return any(s.name.lower() == section_name for s in self.sections_config)\n\n        return False\n\n    def _detect_section_header(\n        self, stripped_line: str, full_line: str, parentheses_sections: list[SectionConfig]\n    ) -&gt; Optional[SectionConfig]:\n        \"\"\"\n        !!! note \"Summary\"\n            Detect section headers and return matching section config.\n\n        Params:\n            stripped_line (str):\n                The stripped line content.\n            full_line (str):\n                The full line with indentation.\n            parentheses_sections (list[SectionConfig]):\n                List of sections requiring parentheses validation.\n\n        Returns:\n            (Optional[SectionConfig]):\n                Matching section config or None if not found.\n        \"\"\"\n        # Admonition sections\n        admonition_match: Optional[re.Match[str]] = re.match(\n            r\"(?:\\?\\?\\?[+]?|!!!)\\s+\\w+\\s+\\\"([^\\\"]+)\\\"\", stripped_line, re.IGNORECASE\n        )\n        if admonition_match:\n            section_name: str = admonition_match.group(1).lower()\n            return next((s for s in parentheses_sections if s.name.lower() == section_name), None)\n\n        # Non-admonition sections (must not be indented)\n        if not full_line.startswith((\" \", \"\\t\")):\n            simple_section_match: Optional[re.Match[str]] = re.match(r\"^(\\w+):?$\", stripped_line)\n            if simple_section_match:\n                section_name: str = simple_section_match.group(1).lower()\n                # Check if it's a known section\n                potential_section: Optional[SectionConfig] = next(\n                    (s for s in self.sections_config if s.name.lower() == section_name), None\n                )\n                if potential_section:\n                    return next((s for s in parentheses_sections if s.name.lower() == section_name), None)\n\n        return None\n\n    def _is_content_line(self, stripped_line: str) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if line is content that needs validation.\n\n        Params:\n            stripped_line (str):\n                The stripped line content.\n\n        Returns:\n            (bool):\n                True if line is content requiring validation, False otherwise.\n        \"\"\"\n        return bool(stripped_line) and not stripped_line.startswith((\"!\", \"?\", \"#\")) and \":\" in stripped_line\n\n    def _is_description_line(self, stripped_line: str) -&gt; bool:\n        \"\"\"\n        !!! note \"Summary\"\n            Check if line is a description rather than a type definition.\n\n        Params:\n            stripped_line (str):\n                The stripped line content.\n\n        Returns:\n            (bool):\n                True if line is a description, False otherwise.\n        \"\"\"\n        description_prefixes: list[str] = [\n            \"default:\",\n            \"note:\",\n            \"example:\",\n            \"see:\",\n            \"warning:\",\n            \"info:\",\n            \"tip:\",\n            \"returns:\",\n        ]\n\n        return (\n            any(stripped_line.lower().startswith(prefix) for prefix in description_prefixes)\n            or \"Default:\" in stripped_line\n            or \"Output format:\" in stripped_line\n            or \"Show examples:\" in stripped_line\n            or \"Example code:\" in stripped_line\n            or stripped_line.strip().startswith((\"-\", \"*\", \"\u2022\", \"+\"))\n            or stripped_line.startswith(\"&gt;&gt;&gt;\")  # Doctest examples\n        )\n\n    def _validate_parentheses_line(\n        self, full_line: str, stripped_line: str, current_section: SectionConfig, type_line_indent: Optional[int]\n    ) -&gt; tuple[list[str], Optional[int]]:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate a single line for parentheses requirements.\n\n        Params:\n            full_line (str):\n                The full line with indentation.\n            stripped_line (str):\n                The stripped line content.\n            current_section (SectionConfig):\n                The current section being validated.\n            type_line_indent (Optional[int]):\n                The indentation level of type definitions.\n\n        Returns:\n            (tuple[list[str], Optional[int]]):\n                Tuple of error messages and updated type line indent.\n        \"\"\"\n        errors: list[str] = []\n        new_indent: Optional[int] = None\n        current_indent: int = len(full_line) - len(full_line.lstrip())\n\n        # Skip description lines\n        if self._is_description_line(stripped_line):\n            return errors, type_line_indent\n\n        if current_section.type == \"list_type\":\n            errors, new_indent = self._validate_list_type_line(\n                stripped_line, current_indent, type_line_indent, current_section\n            )\n        elif current_section.type == \"list_name_and_type\":\n            errors, new_indent = self._validate_list_name_and_type_line(\n                stripped_line, current_indent, type_line_indent, current_section\n            )\n\n        return errors, new_indent if new_indent is not None else type_line_indent\n\n    def _validate_list_type_line(\n        self, stripped_line: str, current_indent: int, type_line_indent: Optional[int], current_section: SectionConfig\n    ) -&gt; tuple[list[str], Optional[int]]:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate list_type section lines.\n\n        Params:\n            stripped_line (str):\n                The stripped line content.\n            current_indent (int):\n                The current line's indentation level.\n            type_line_indent (Optional[int]):\n                The indentation level of type definitions.\n            current_section (SectionConfig):\n                The current section being validated.\n\n        Returns:\n            (tuple[list[str], Optional[int]]):\n                Tuple of error messages and updated type line indent.\n        \"\"\"\n        errors: list[str] = []\n\n        # Check for valid type definition format\n        if re.search(r\"^\\s*\\([^)]+\\):\", stripped_line):\n            return errors, current_indent\n\n        # Handle lines without proper format\n        if type_line_indent is None or current_indent &gt; type_line_indent:\n            # Allow as possible description\n            return errors, None\n\n        # This should be a type definition but lacks proper format\n        errors.append(\n            f\"Section '{current_section.name}' (type: '{current_section.type}') requires \"\n            f\"parenthesized types, see: '{stripped_line}'\"\n        )\n        return errors, None\n\n    def _validate_list_name_and_type_line(\n        self, stripped_line: str, current_indent: int, type_line_indent: Optional[int], current_section: SectionConfig\n    ) -&gt; tuple[list[str], Optional[int]]:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate list_name_and_type section lines.\n\n        Params:\n            stripped_line (str):\n                The stripped line content.\n            current_indent (int):\n                The current line's indentation level.\n            type_line_indent (Optional[int]):\n                The indentation level of type definitions.\n            current_section (SectionConfig):\n                The current section being validated.\n\n        Returns:\n            (tuple[list[str], Optional[int]]):\n                Tuple of error messages and updated type line indent.\n        \"\"\"\n        errors: list[str] = []\n\n        # Check for valid parameter definition format\n        if re.search(r\"\\([^)]+\\):\", stripped_line):\n            return errors, current_indent\n\n        # Check if this is likely a description line\n        colon_part: str = stripped_line.split(\":\")[0].strip()\n\n        # Skip description-like content\n        if any(word in colon_part.lower() for word in [\"default\", \"output\", \"format\", \"show\", \"example\"]):\n            return errors, None\n\n        # Skip if more indented than parameter definition (description line)\n        if type_line_indent is not None and current_indent &gt; type_line_indent:\n            return errors, None\n\n        # Skip if too many words before colon (likely description)\n        words_before_colon: list[str] = colon_part.split()\n        if len(words_before_colon) &gt; 2:\n            return errors, None\n\n        # Flag potential parameter definitions without proper format\n        if not stripped_line.strip().startswith(\"#\"):\n            errors.append(\n                f\"Section '{current_section.name}' (type: '{current_section.type}') requires \"\n                f\"parenthesized types, see: '{stripped_line}'\"\n            )\n\n        return errors, None\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringChecker.__init__","title":"__init__","text":"<pre><code>__init__(config: Config) -&gt; None\n</code></pre> <p>Summary</p> <p>Initialize the docstring checker.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Configuration object containing global settings and section definitions.</p> required Source code in <code>src/docstring_format_checker/core.py</code> <pre><code>def __init__(self, config: Config) -&gt; None:\n    \"\"\"\n    !!! note \"Summary\"\n        Initialize the docstring checker.\n\n    Params:\n        config (Config):\n            Configuration object containing global settings and section definitions.\n    \"\"\"\n    self.config: Config = config\n    self.sections_config: list[SectionConfig] = config.sections\n    self.required_sections: list[SectionConfig] = [s for s in config.sections if s.required]\n    self.optional_sections: list[SectionConfig] = [s for s in config.sections if not s.required]\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringChecker.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config: Config = config\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringChecker.sections_config","title":"sections_config  <code>instance-attribute</code>","text":"<pre><code>sections_config: list[SectionConfig] = sections\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringChecker.required_sections","title":"required_sections  <code>instance-attribute</code>","text":"<pre><code>required_sections: list[SectionConfig] = [\n    s for s in (sections) if required\n]\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringChecker.optional_sections","title":"optional_sections  <code>instance-attribute</code>","text":"<pre><code>optional_sections: list[SectionConfig] = [\n    s for s in (sections) if not required\n]\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringChecker.check_file","title":"check_file","text":"<pre><code>check_file(\n    file_path: Union[str, Path],\n) -&gt; list[DocstringError]\n</code></pre> <p>Summary</p> <p>Check docstrings in a Python file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[str, Path]</code> <p>Path to the Python file to check.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file doesn't exist.</p> <code>InvalidFileError</code> <p>If the file is not a Python file.</p> <code>UnicodeError</code> <p>If the file can't be decoded.</p> <code>SyntaxError</code> <p>If the file contains invalid Python syntax.</p> <p>Returns:</p> Type Description <code>list[DocstringError]</code> <p>List of DocstringError objects for any validation failures.</p> Source code in <code>src/docstring_format_checker/core.py</code> <pre><code>def check_file(self, file_path: Union[str, Path]) -&gt; list[DocstringError]:\n    \"\"\"\n    !!! note \"Summary\"\n        Check docstrings in a Python file.\n\n    Params:\n        file_path (Union[str, Path]):\n            Path to the Python file to check.\n\n    Raises:\n        (FileNotFoundError):\n            If the file doesn't exist.\n        (InvalidFileError):\n            If the file is not a Python file.\n        (UnicodeError):\n            If the file can't be decoded.\n        (SyntaxError):\n            If the file contains invalid Python syntax.\n\n    Returns:\n        (list[DocstringError]):\n            List of DocstringError objects for any validation failures.\n    \"\"\"\n\n    file_path = Path(file_path)\n    if not file_path.exists():\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n\n    if file_path.suffix != \".py\":\n        raise InvalidFileError(f\"File must be a Python file (.py): {file_path}\")\n\n    # Read and parse the file\n    try:\n        with open(file_path, encoding=\"utf-8\") as f:\n            content: str = f.read()\n    except UnicodeDecodeError as e:\n        raise UnicodeError(f\"Cannot decode file {file_path}: {e}\") from e\n\n    try:\n        tree: ast.Module = ast.parse(content)\n    except SyntaxError as e:\n        raise SyntaxError(f\"Invalid Python syntax in {file_path}: {e}\") from e\n\n    # Extract all functions and classes\n    items: list[FunctionAndClassDetails] = self._extract_items(tree)\n\n    # Check each item\n    errors: list[DocstringError] = []\n    for item in items:\n        try:\n            self._check_single_docstring(item, str(file_path))\n        except DocstringError as e:\n            errors.append(e)\n\n    return errors\n</code></pre>"},{"location":"code/core/#docstring_format_checker.core.DocstringChecker.check_directory","title":"check_directory","text":"<pre><code>check_directory(\n    directory_path: Union[str, Path],\n    exclude_patterns: Optional[list[str]] = None,\n) -&gt; dict[str, list[DocstringError]]\n</code></pre> <p>Summary</p> <p>Check docstrings in all Python files in a directory recursively.</p> <p>Parameters:</p> Name Type Description Default <code>directory_path</code> <code>Union[str, Path]</code> <p>Path to the directory to check.</p> required <code>exclude_patterns</code> <code>Optional[list[str]]</code> <p>List of glob patterns to exclude.</p> <code>None</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the directory doesn't exist.</p> <code>DirectoryNotFoundError</code> <p>If the path is not a directory.</p> <p>Returns:</p> Type Description <code>dict[str, list[DocstringError]]</code> <p>Dictionary mapping file paths to lists of DocstringError objects.</p> Source code in <code>src/docstring_format_checker/core.py</code> <pre><code>def check_directory(\n    self,\n    directory_path: Union[str, Path],\n    exclude_patterns: Optional[list[str]] = None,\n) -&gt; dict[str, list[DocstringError]]:\n    \"\"\"\n    !!! note \"Summary\"\n        Check docstrings in all Python files in a directory recursively.\n\n    Params:\n        directory_path (Union[str, Path]):\n            Path to the directory to check.\n        exclude_patterns (Optional[list[str]]):\n            List of glob patterns to exclude.\n\n    Raises:\n        (FileNotFoundError):\n            If the directory doesn't exist.\n        (DirectoryNotFoundError):\n            If the path is not a directory.\n\n    Returns:\n        (dict[str, list[DocstringError]]):\n            Dictionary mapping file paths to lists of DocstringError objects.\n    \"\"\"\n    directory_path = Path(directory_path)\n    if not directory_path.exists():\n        raise FileNotFoundError(f\"Directory not found: {directory_path}\")\n\n    if not directory_path.is_dir():\n        raise DirectoryNotFoundError(f\"Path is not a directory: {directory_path}\")\n\n    python_files: list[Path] = list(directory_path.glob(\"**/*.py\"))\n\n    # Filter out excluded patterns if provided\n    if exclude_patterns:\n        python_files = self._filter_python_files(python_files, directory_path, exclude_patterns)\n\n    # Check each file and collect results\n    results: dict[str, list[DocstringError]] = {}\n    for file_path in python_files:\n        errors: list[DocstringError] = self._check_file_with_error_handling(file_path)\n        if errors:  # Only include files with errors\n            results[str(file_path)] = errors\n\n    return results\n</code></pre>"},{"location":"code/exceptions/","title":"Exceptions","text":""},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions","title":"docstring_format_checker.utils.exceptions","text":"<p>Summary</p> <p>This module defines custom exceptions for handling various error scenarios</p>"},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions.DocstringError","title":"DocstringError","text":"<p>               Bases: <code>Exception</code></p> <p>Summary</p> <p>Exception raised when a docstring validation error occurs.</p> Source code in <code>src/docstring_format_checker/utils/exceptions.py</code> <pre><code>class DocstringError(Exception):\n    \"\"\"\n    !!! note \"Summary\"\n        Exception raised when a docstring validation error occurs.\n    \"\"\"\n\n    def __init__(\n        self,\n        message: str,\n        file_path: str,\n        line_number: int,\n        item_name: str,\n        item_type: str,\n    ) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Initialize a DocstringError.\n        \"\"\"\n        self.message: str = message\n        self.file_path: str = file_path\n        self.line_number: int = line_number\n        self.item_name: str = item_name\n        self.item_type: str = item_type\n        super().__init__(f\"Line {line_number}, {item_type} '{item_name}': {message}\")\n</code></pre>"},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions.DocstringError.__init__","title":"__init__","text":"<pre><code>__init__(\n    message: str,\n    file_path: str,\n    line_number: int,\n    item_name: str,\n    item_type: str,\n) -&gt; None\n</code></pre> <p>Summary</p> <p>Initialize a DocstringError.</p> Source code in <code>src/docstring_format_checker/utils/exceptions.py</code> <pre><code>def __init__(\n    self,\n    message: str,\n    file_path: str,\n    line_number: int,\n    item_name: str,\n    item_type: str,\n) -&gt; None:\n    \"\"\"\n    !!! note \"Summary\"\n        Initialize a DocstringError.\n    \"\"\"\n    self.message: str = message\n    self.file_path: str = file_path\n    self.line_number: int = line_number\n    self.item_name: str = item_name\n    self.item_type: str = item_type\n    super().__init__(f\"Line {line_number}, {item_type} '{item_name}': {message}\")\n</code></pre>"},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions.DocstringError.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str = message\n</code></pre>"},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions.DocstringError.file_path","title":"file_path  <code>instance-attribute</code>","text":"<pre><code>file_path: str = file_path\n</code></pre>"},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions.DocstringError.line_number","title":"line_number  <code>instance-attribute</code>","text":"<pre><code>line_number: int = line_number\n</code></pre>"},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions.DocstringError.item_name","title":"item_name  <code>instance-attribute</code>","text":"<pre><code>item_name: str = item_name\n</code></pre>"},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions.DocstringError.item_type","title":"item_type  <code>instance-attribute</code>","text":"<pre><code>item_type: str = item_type\n</code></pre>"},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions.InvalidConfigError","title":"InvalidConfigError","text":"<p>               Bases: <code>Exception</code></p> <p>Summary</p> <p>Exception raised for invalid configuration errors.</p> Source code in <code>src/docstring_format_checker/utils/exceptions.py</code> <pre><code>class InvalidConfigError(Exception):\n    \"\"\"\n    !!! note \"Summary\"\n        Exception raised for invalid configuration errors.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions.InvalidConfigError_DuplicateOrderValues","title":"InvalidConfigError_DuplicateOrderValues","text":"<p>               Bases: <code>Exception</code></p> <p>Summary</p> <p>Exception raised for duplicate order values in configuration.</p> Source code in <code>src/docstring_format_checker/utils/exceptions.py</code> <pre><code>class InvalidConfigError_DuplicateOrderValues(Exception):\n    \"\"\"\n    !!! note \"Summary\"\n        Exception raised for duplicate order values in configuration.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions.InvalidTypeValuesError","title":"InvalidTypeValuesError","text":"<p>               Bases: <code>Exception</code></p> <p>Summary</p> <p>Exception raised for invalid type values in configuration.</p> Source code in <code>src/docstring_format_checker/utils/exceptions.py</code> <pre><code>class InvalidTypeValuesError(Exception):\n    \"\"\"\n    !!! note \"Summary\"\n        Exception raised for invalid type values in configuration.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions.InvalidFileError","title":"InvalidFileError","text":"<p>               Bases: <code>OSError</code></p> <p>Summary</p> <p>Exception raised for invalid file errors.</p> Source code in <code>src/docstring_format_checker/utils/exceptions.py</code> <pre><code>class InvalidFileError(OSError):\n    \"\"\"\n    !!! note \"Summary\"\n        Exception raised for invalid file errors.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"code/exceptions/#docstring_format_checker.utils.exceptions.DirectoryNotFoundError","title":"DirectoryNotFoundError","text":"<p>               Bases: <code>OSError</code></p> <p>Summary</p> <p>Exception raised for directory not found errors.</p> Source code in <code>src/docstring_format_checker/utils/exceptions.py</code> <pre><code>class DirectoryNotFoundError(OSError):\n    \"\"\"\n    !!! note \"Summary\"\n        Exception raised for directory not found errors.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"usage/changelog/","title":"Change Log","text":"<p>v1.5.1</p> <p>v1.5.0</p> <p>v1.4.0</p> <p>v1.3.0</p> <p>v1.2.0</p> <p>v1.1.0</p> <p>v1.0.1</p> <p>v1.0.0</p> <p>v0.11.0</p> <p>v0.10.0</p> <p>v0.9.0</p> <p>v0.8.0</p> <p>v0.7.0</p> <p>v0.6.0</p> <p>v0.5.0</p> <p>v0.4.0</p> <p>v0.3.0</p> <p>v0.2.0</p> <p>v0.1.0</p>"},{"location":"usage/changelog/#v151-stricter-code-quality-standards","title":"v1.5.1 - Stricter Code Quality Standards","text":"<p><code>v1.5.1</code> <code>2025-10-22</code> data-science-extensions/docstring-format-checker/releases/v1.5.1</p> Release Notes Updates <ul> <li><code>257cfa2</code>: Tweak the config for <code>complexipy</code>     (by chrimaho)</li> <li><code>36d50e1</code>: Add <code>pycln</code> checks back in     (by chrimaho)</li> <li><code>0f856a3</code>: Fix formatting     (by chrimaho)</li> </ul>"},{"location":"usage/changelog/#summary","title":"Summary","text":"<p>This release strengthens code quality enforcement through stricter complexity thresholds and comprehensive import hygiene checks. Building upon the extensive refactoring work completed in [<code>v1.5.0</code>], this release reduces the maximum allowed cognitive complexity from 15 to 13, establishing proactive quality gates that prevent technical debt accumulation. The release also re-enables <code>pycln</code> checks in both linting and validation workflows, ensuring unused imports are automatically detected and removed throughout the development lifecycle. Additionally, complexity reporting verbosity has been optimised with the introduction of the <code>details = \"low\"</code> configuration option, reducing noise in CI/CD logs whilst maintaining actionable feedback. These enhancements maintain the codebase's excellent quality standards (100% test coverage, Pylint 10.00/10) whilst preventing regression of the refactoring achievements from [<code>v1.5.0</code>]. All changes are non-breaking and require no migration effort from users.</p>"},{"location":"usage/changelog/#release-statistics","title":"Release Statistics","text":"Attribute Note Version: [<code>v1.5.1</code>] Python Support: <code>3.9</code>, <code>3.10</code>, <code>3.11</code>, <code>3.12</code>, <code>3.13</code>, <code>3.14</code> Test Coverage: 100% (834 statements) Pylint Score: 10.00/10 Complexity: 309 (max threshold now 13, was 15) Functions: 98 Tests Passing: 183/183 Files Changed: 3 Lines Added: 3,119 Lines Removed: 185 Commits: 4 Pull Requests Merged: 1 (PR #20)"},{"location":"usage/changelog/#stricter-complexity-threshold","title":"\ud83c\udfaf Stricter Complexity Threshold","text":""},{"location":"usage/changelog/#overview","title":"Overview","text":"<p>Reduce the maximum allowed cognitive complexity threshold from 15 to 13 in the <code>complexipy</code> configuration, establishing stricter quality standards that preserve the refactoring achievements from [<code>v1.5.0</code>] and prevent future complexity regression.</p>"},{"location":"usage/changelog/#motivation","title":"Motivation","text":"<p>The comprehensive refactoring work completed in [<code>v1.5.0</code>] successfully eliminated all functions with complexity \u226515, reducing total cognitive complexity from 332 to 309 points (6.9% reduction). The current codebase distribution demonstrates excellent quality:</p> <ul> <li>0 functions with complexity \u226515 (all eliminated through refactoring)</li> <li>1 function with complexity 13 (<code>_extract_items</code> - justified Visitor Pattern implementation)</li> <li>4 functions with complexity 10-12 (all documented and justified)</li> <li>93+ functions with complexity \u22649 (excellent maintainability)</li> </ul> <p>With all high-complexity functions eliminated, maintaining a threshold of 15 would allow gradual complexity creep back toward problematic levels. Reducing the threshold to 13 establishes a proactive quality gate that:</p> <ol> <li>Prevents Complexity Regression: Catches functions approaching the 15+ range before they become maintenance burdens</li> <li>Maintains Current Quality Baseline: All existing functions pass the 13 threshold, so no immediate refactoring required</li> <li>Encourages Best Practices: Developers receive early warnings at complexity 13, prompting consideration of Extract Method and other refactoring patterns</li> <li>Aligns with Industry Standards: Industry guidance suggests complexity 10-15 as \"moderate\" - setting threshold at 13 keeps code in the simpler half of this range</li> </ol>"},{"location":"usage/changelog/#implementation-details","title":"Implementation Details","text":"<p>Files Modified: - <code>pyproject.toml</code></p> <p>Configuration Changes: <pre><code>[tool.complexipy]\npaths = \"src/docstring_format_checker\"\n-max-complexity-allowed = 15\n+max-complexity-allowed = 13\nquiet = false\nignore-complexity = false\nsort = \"asc\"\n</code></pre></p>"},{"location":"usage/changelog/#technical-benefits","title":"Technical Benefits","text":"<p>Proactive Quality Management: - Automated checks prevent introduction of complex code before it reaches the main branch - Pull requests exceeding complexity 13 are blocked until refactored - Continuous monitoring ensures quality standards maintained across all contributions</p> <p>Data-Driven Development: - Objective metrics enable data-driven decisions about refactoring priorities - Quantitative complexity scores provide discussion anchors during code review - Removes subjectivity from \"this code feels complex\" assessments</p> <p>Developer Guidance: - Clear complexity targets guide development practices and code structure - Early warnings at complexity 13 encourage proactive simplification - Establishes shared understanding of acceptable complexity levels across team</p>"},{"location":"usage/changelog/#impact-on-development-workflow","title":"Impact on Development Workflow","text":"<p>CI/CD Pipeline: <pre><code># Automated complexity checks now enforce threshold of 13\n# Functions with complexity &gt;13 fail the build\n\u2717 Complexity check failed: function 'example()' has complexity 14 (max: 13)\n</code></pre></p> <p>Local Development: <pre><code># Run complexity check locally\nuv run check-complexity\n\n# Output shows functions approaching threshold\n# Functions with complexity 10-13 appear with metrics\n# Functions with complexity &gt;13 trigger failures\n</code></pre></p> <p>Code Review: - Reviewers see objective complexity metrics in PR status checks - Complexity scores visible before detailed review begins - Enables focused discussion on specific functions exceeding thresholds</p>"},{"location":"usage/changelog/#import-hygiene-re-enablement","title":"\ud83e\uddf9 Import Hygiene Re-enablement","text":""},{"location":"usage/changelog/#overview_1","title":"Overview","text":"<p>Re-enable <code>pycln</code> checks in both the <code>lint()</code> and <code>check()</code> functions, ensuring unused imports are automatically detected and removed throughout the development lifecycle. This re-enablement follows resolution of Python 3.14 compatibility issues that previously required temporary disabling.</p>"},{"location":"usage/changelog/#background","title":"Background","text":"<p>The <code>pycln</code> tool was temporarily disabled in both linting and validation workflows due to compatibility issues with Python 3.14. Comments in the code indicated:</p> <pre><code># check_pycln()  # &lt;-- pycln is currently incompatible with python 3.14\n</code></pre> <p>Recent dependency updates or compatibility fixes have resolved this issue, enabling safe re-enablement across all supported Python versions (3.9-3.14).</p>"},{"location":"usage/changelog/#implementation-details_1","title":"Implementation Details","text":"<p>Files Modified: - <code>src/utils/scripts.py</code></p> <p>Changes in <code>lint()</code> function: <pre><code>def lint() -&gt; None:\n    run_black()\n    run_blacken_docs()\n    run_isort()\n-   # run_pycln()\n+   run_pycln()\n</code></pre></p> <p>Changes in <code>check()</code> function: <pre><code>def check() -&gt; None:\n    check_black()\n    check_blacken_docs()\n    check_mypy()\n    check_isort()\n    check_codespell()\n-   # check_pycln()  # &lt;-- pycln is currently incompatible with python 3.14\n+   check_pycln()\n    check_pylint()\n    check_complexity()\n    check_docstrings()\n    check_pytest()\n    check_mkdocs()\n    check_build()\n</code></pre></p>"},{"location":"usage/changelog/#what-is-pycln","title":"What is <code>pycln</code>?","text":"<p><code>pycln</code> is a formatter for finding and removing unused import statements in Python code. It performs static analysis to identify imports that are never referenced in the module, then safely removes them to improve code cleanliness and reduce cognitive load when reading import sections.</p>"},{"location":"usage/changelog/#dual-integration-points","title":"Dual Integration Points","text":"<p>1. Automated Cleanup via <code>lint()</code>: - Runs <code>run_pycln()</code> during code formatting workflow - Automatically removes unused imports when developers run <code>uv run lint</code> - Executes alongside <code>black</code> and <code>isort</code> for comprehensive code formatting - Enables developers to clean up imports before committing changes</p> <p>2. Validation via <code>check()</code>: - Runs <code>check_pycln()</code> during comprehensive quality validation - Verifies no unused imports exist in the codebase - Fails CI/CD pipeline if unused imports detected - Provides specific error messages identifying which imports to remove - Ensures all code in main branch maintains import hygiene</p>"},{"location":"usage/changelog/#technical-benefits_1","title":"Technical Benefits","text":"<p>Code Quality Improvements: - Cleaner Import Sections: Automatically remove unused import statements, reducing clutter - Reduced Cognitive Load: Shorter import lists easier to understand and maintain - Dependency Hygiene: Prevent accumulation of unnecessary import dependencies - Consistent Standards: Enforce import cleanliness across entire codebase</p> <p>Developer Experience Enhancements: - Automated Cleanup: Developers don't manually track which imports are unused - Pre-commit Safety: Running <code>lint()</code> cleans up imports before commits - CI/CD Validation: Automated checks catch any missed unused imports - Clear Error Messages: Specific feedback identifies exactly which imports to remove</p> <p>Maintainability Benefits: - Reduced Noise: Fewer imports means easier code navigation - Faster Comprehension: Developers quickly identify actual dependencies - Simpler Refactoring: Unused imports don't confuse refactoring efforts - Better IDE Performance: Fewer imports reduce IDE analysis overhead</p>"},{"location":"usage/changelog/#usage-examples","title":"Usage Examples","text":"<p>Local Development Workflow: <pre><code># Run linting to automatically remove unused imports\nuv run lint\n\n# Runs black, blacken-docs, isort, and pycln\n# Unused imports automatically removed from all files\n</code></pre></p> <p>Validation Workflow: <pre><code># Run comprehensive quality checks\nuv run check\n\n# Validates no unused imports exist\n# Fails if any unused imports detected\n</code></pre></p> <p>What Gets Cleaned: <pre><code># Before: Module with unused imports\nimport sys          # \u2190 unused\nimport os           # \u2190 unused\nfrom typing import Dict, List, Optional  # \u2190 Optional unused\nfrom pathlib import Path\n\ndef process_file(path: str) -&gt; Dict[str, List[str]]:\n    p = Path(path)\n    return {\"file\": [str(p)]}\n\n# After: pycln cleanup\nfrom typing import Dict, List\nfrom pathlib import Path\n\ndef process_file(path: str) -&gt; Dict[str, List[str]]:\n    p = Path(path)\n    return {\"file\": [str(p)]}\n</code></pre></p>"},{"location":"usage/changelog/#complexity-reporting-optimisation","title":"\ud83d\udcca Complexity Reporting Optimisation","text":""},{"location":"usage/changelog/#overview_2","title":"Overview","text":"<p>Add <code>details = \"low\"</code> configuration option to the <code>complexipy</code> tool configuration, optimising complexity report verbosity for improved signal-to-noise ratio in CI/CD logs whilst maintaining actionable feedback for developers.</p>"},{"location":"usage/changelog/#implementation-details_2","title":"Implementation Details","text":"<p>Files Modified: - <code>pyproject.toml</code></p> <p>Configuration Changes: <pre><code>[tool.complexipy]\npaths = \"src/docstring_format_checker\"\nmax-complexity-allowed = 13\nquiet = false\nignore-complexity = false\n+details = \"low\"\nsort = \"asc\"\n</code></pre></p>"},{"location":"usage/changelog/#configuration-option-details","title":"Configuration Option Details","text":"<p><code>details = \"low\"</code>: - Reduces verbosity of complexity analysis output - Focuses reporting on essential complexity metrics - Displays function names, complexity scores, and threshold violations - Omits detailed breakdown of complexity contributors (conditionals, loops, etc.) - Maintains actionable information whilst reducing log volume</p>"},{"location":"usage/changelog/#benefits","title":"Benefits","text":"<p>Improved CI/CD Logs: - Reduced Noise: Shorter complexity reports easier to scan in CI/CD output - Faster Diagnosis: Essential information highlighted without detailed breakdowns - Better Signal-to-Noise Ratio: Developers quickly identify functions exceeding thresholds - Maintained Actionability: Still provides function names and complexity scores for refactoring</p> <p>Developer Productivity: - Quicker Log Review: Developers spend less time scrolling through verbose complexity output - Focused Feedback: Attention directed to functions requiring refactoring - Efficient Troubleshooting: Key metrics visible without information overload</p> <p>Workflow Integration: - Local Development: Developers can still run verbose analysis when needed using command-line flags - CI/CD Pipeline: Automated checks provide concise, actionable feedback - Code Review: Reviewers see essential complexity metrics without overwhelming detail</p>"},{"location":"usage/changelog/#verbosity-levels","title":"Verbosity Levels","text":"<p>Before (<code>details</code> not set - defaults to \"normal\"): <pre><code>Function: _validate_docstring_sections\nComplexity: 12\n  - If statements: 5\n  - Loops: 2\n  - Boolean operators: 3\n  - Nested functions: 0\n  ...detailed breakdown...\n</code></pre></p> <p>After (<code>details = \"low\"</code>): <pre><code>Function: _validate_docstring_sections | Complexity: 12 | Status: \u2713 Pass\n</code></pre></p>"},{"location":"usage/changelog/#changelog-comprehensive-update","title":"\ud83d\udcdd CHANGELOG Comprehensive Update","text":""},{"location":"usage/changelog/#overview_3","title":"Overview","text":"<p>Comprehensive update to <code>CHANGELOG.md</code> documenting the entire [<code>v1.5.0</code>] release with detailed sections covering all major improvements, refactoring efforts, and technical achievements.</p> <p>Files Modified: - <code>CHANGELOG.md</code></p> <p>Changes: - Added 3,119 lines documenting [<code>v1.5.0</code>] release - Removed 185 lines of placeholder or outdated content - Structured sections covering:   - Complexity monitoring integration   - CLI error display refactoring   - Core module comprehensive refactoring   - Documentation improvements (37 docstrings added)   - CI/CD workflow enhancements   - Developer experience improvements   - Complete metrics and statistics tables   - Detailed commit history   - Migration guidance</p> <p>The comprehensive changelog ensures users and maintainers have complete visibility into the evolution of the package, understanding both what changed and why those changes improve the codebase.</p>"},{"location":"usage/changelog/#breaking-changes","title":"\ud83d\udd0d Breaking Changes","text":"<p>None. This release maintains full backward compatibility with [<code>v1.5.0</code>]. All changes are internal quality enforcement mechanisms that do not affect:</p> <ul> <li>Public APIs or interfaces</li> <li>Command-line arguments or options</li> <li>Configuration file formats</li> <li>Runtime behaviour or output</li> <li>Package functionality or features</li> </ul>"},{"location":"usage/changelog/#migration-guide","title":"\ud83c\udfaf Migration Guide","text":""},{"location":"usage/changelog/#upgrading-from-v150","title":"Upgrading from v1.5.0","text":"<p>No migration required. Users can upgrade directly from [<code>v1.5.0</code>] to [<code>v1.5.1</code>] without any configuration changes or code modifications.</p> <pre><code># Upgrade with pip\npip install --upgrade docstring-format-checker\n\n# Upgrade with uv\nuv pip install --upgrade docstring-format-checker\n\n# Verify version\npython -c \"import docstring_format_checker; print(docstring_format_checker.__version__)\"\n# Output: 1.5.1\n</code></pre>"},{"location":"usage/changelog/#impact-on-existing-projects","title":"Impact on Existing Projects","text":"<p>For Package Users: - No action required - All existing configurations continue working - Docstring validation behaviour unchanged - Command-line interfaces unchanged</p> <p>For Contributors/Maintainers: - New contributions must pass stricter complexity threshold (13 instead of 15) - New contributions must have no unused imports (<code>pycln</code> checks enabled) - Existing code already complies with new standards - No immediate refactoring required</p>"},{"location":"usage/changelog/#installation-and-upgrade","title":"\ud83d\ude80 Installation and Upgrade","text":""},{"location":"usage/changelog/#new-installation","title":"New Installation","text":"<pre><code># Install with pip\npip install docstring-format-checker==1.5.1\n\n# Install with uv\nuv pip install docstring-format-checker==1.5.1\n\n# Install from GitHub\npip install git+https://github.com/data-science-extensions/docstring-format-checker.git@v1.5.1\n</code></pre>"},{"location":"usage/changelog/#upgrade-from-previous-version","title":"Upgrade from Previous Version","text":"<pre><code># Upgrade with pip\npip install --upgrade docstring-format-checker\n\n# Upgrade with uv\nuv pip install --upgrade docstring-format-checker\n\n# Verify upgrade successful\ndfc --version\n# Output: docstring-format-checker v1.5.1\n</code></pre>"},{"location":"usage/changelog/#quality-metrics","title":"\ud83d\udcca Quality Metrics","text":""},{"location":"usage/changelog/#code-quality-standards","title":"Code Quality Standards","text":"Metric Value Change from v1.5.0 Test Coverage 100% No change \u2713 Total Statements 834 No change Tests Passing 183/183 No change \u2713 Pylint Score 10.00/10 No change \u2713 Total Complexity 309 No change Max Complexity Threshold 13 -2 (was 15) \u2b07\ufe0f Functions \u226515 Complexity 0 No change \u2713 Functions \u22649 Complexity 93+ No change \u2713"},{"location":"usage/changelog/#quality-gate-comparison","title":"Quality Gate Comparison","text":"Quality Gate v1.5.0 v1.5.1 Change Complexity Threshold 15 13 Stricter \u2b06\ufe0f <code>pycln</code> Checks \u274c Off \u2705 On Enabled \u2705 Complexity Verbosity Normal Low Optimised Test Coverage Required 100% 100% No change Pylint Score Required 10/10 10/10 No change"},{"location":"usage/changelog/#validation-results","title":"Validation Results","text":"<p>All quality checks pass with new stricter standards:</p> <pre><code>$ uv run check\n\n\u2705 Black formatting: PASSED\n\u2705 Blacken-docs: PASSED  \n\u2705 MyPy type checking: PASSED\n\u2705 isort import sorting: PASSED\n\u2705 codespell spelling: PASSED\n\u2705 pycln unused imports: PASSED (re-enabled)\n\u2705 Pylint static analysis: PASSED (10.00/10)\n\u2705 Complexity analysis: PASSED (max threshold 13)\n\u2705 Docstring validation: PASSED\n\u2705 Pytest test suite: PASSED (183/183 tests)\n\u2705 MkDocs documentation: PASSED\n\u2705 Package build: PASSED\n\nAll checks passed! \u2713\n</code></pre>"},{"location":"usage/changelog/#developer-experience","title":"\ud83d\udee0\ufe0f Developer Experience","text":""},{"location":"usage/changelog/#strengthened-quality-assurance","title":"Strengthened Quality Assurance","text":"<p>Proactive Prevention: - Stricter complexity threshold catches potential issues earlier - Automated import cleaning eliminates manual tracking burden - Optimised verbosity improves log readability and debugging efficiency</p> <p>Clear Feedback Loops: - Complexity violations provide specific function names and scores - <code>pycln</code> errors identify exact import statements to remove - CI/CD failures include actionable guidance for resolution</p> <p>Maintained Productivity: - Automated cleanup via <code>uv run lint</code> handles routine maintenance - Validation via <code>uv run check</code> ensures quality before pushing - No additional manual steps required in development workflow</p>"},{"location":"usage/changelog/#quality-enforcement-workflow","title":"Quality Enforcement Workflow","text":"<pre><code># 1. Develop feature\nvim src/docstring_format_checker/new_module.py\n\n# 2. Run automated cleanup\nuv run lint\n# \u2192 Formats code with black\n# \u2192 Sorts imports with isort  \n# \u2192 Removes unused imports with pycln\n\n# 3. Validate quality standards\nuv run check\n# \u2192 Validates complexity \u226413\n# \u2192 Confirms no unused imports\n# \u2192 Runs full test suite\n# \u2192 All quality gates must pass\n\n# 4. Commit clean, validated code\ngit add .\ngit commit -m \"Add new feature\"\n\n# 5. CI/CD validates on push\n# \u2192 Same checks run automatically\n# \u2192 Pull request blocked if any check fails\n# \u2192 Immediate feedback for corrections\n</code></pre>"},{"location":"usage/changelog/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"usage/changelog/#documentation","title":"Documentation","text":"<ul> <li>Package Documentation: https://docstring-format-checker.readthedocs.io</li> <li>GitHub Repository: https://github.com/data-science-extensions/docstring-format-checker</li> <li>Issue Tracker: https://github.com/data-science-extensions/docstring-format-checker/issues</li> <li>Contributing Guide: See <code>CONTRIBUTING.md</code> in repository</li> <li>Changelog: See <code>CHANGELOG.md</code> for complete version history</li> </ul>"},{"location":"usage/changelog/#configuration-reference","title":"Configuration Reference","text":"<p>Recommended <code>pyproject.toml</code> Configuration:</p> <pre><code>[tool.docstring_format_checker]\nexclude_patterns = [\"test_*.py\", \"*_test.py\"]\n\n[tool.docstring_format_checker.sections.Summary]\nrequired = true\nformat = \"free_text\"\n\n[tool.complexipy]\npaths = \"src/your_package\"\nmax-complexity-allowed = 13  # Stricter threshold\nquiet = false\nignore-complexity = false\ndetails = \"low\"  # Optimised verbosity\nsort = \"asc\"\n</code></pre>"},{"location":"usage/changelog/#running-quality-checks","title":"Running Quality Checks","text":"<pre><code># Run all quality checks\nuv run check\n\n# Run specific checks\nuv run check-black          # Code formatting\nuv run check-mypy           # Type checking\nuv run check-isort          # Import sorting\nuv run check-pycln          # Unused imports (re-enabled)\nuv run check-pylint         # Static analysis\nuv run check-complexity     # Cognitive complexity (threshold 13)\nuv run check-docstrings     # Docstring validation\nuv run check-pytest         # Test suite\n\n# Run automated cleanup\nuv run lint                 # Formats code and removes unused imports\n</code></pre>"},{"location":"usage/changelog/#related-releases","title":"\ud83d\udd17 Related Releases","text":""},{"location":"usage/changelog/#version-history","title":"Version History","text":"<p>v1.5.1 (Current): - Stricter complexity threshold (15 \u2192 13) - Re-enabled <code>pycln</code> import cleaning - Optimised complexity reporting verbosity</p> <p>v1.5.0 (Previous): - Complexity monitoring integration with <code>complexipy</code> - Seven major refactoring efforts reducing complexity 6.9% - 37 docstrings added across three modules - 24 new focused helper methods created - CI/CD workflow parallelism improvements</p> <p>v1.4.0: - Python 3.14 support added - 100% test coverage achieved (783 statements) - Pylint integration with comprehensive configuration - Pre-commit hook integration</p>"},{"location":"usage/changelog/#detailed-commit-history","title":"\ud83d\udcdd Detailed Commit History","text":""},{"location":"usage/changelog/#commits-since-v150","title":"Commits Since v1.5.0","text":"<ol> <li>b935a81 - Merge pull request #20 from data-science-extensions/updates</li> <li>Merged comprehensive quality standards enhancements</li> <li>Integrated stricter complexity thresholds</li> <li> <p>Re-enabled import hygiene checks</p> </li> <li> <p>257cfa2 - Tweak the config for <code>complexipy</code></p> </li> <li>Reduced <code>max-complexity-allowed</code> from 15 to 13</li> <li>Added <code>details = \"low\"</code> for optimised reporting verbosity</li> <li> <p>Enforces stricter complexity standards preventing regression</p> </li> <li> <p>36d50e1 - Add <code>pycln</code> checks back in</p> </li> <li>Re-enabled <code>run_pycln()</code> in <code>lint()</code> function</li> <li>Re-enabled <code>check_pycln()</code> in <code>check()</code> function</li> <li>Removed Python 3.14 incompatibility comment</li> <li> <p>Ensures automated unused import detection and removal</p> </li> <li> <p>0f856a3 - Fix formatting</p> </li> <li>Minor formatting adjustments for code consistency</li> </ol>"},{"location":"usage/changelog/#pull-requests","title":"\ud83d\udcaa Pull Requests","text":"<ul> <li>Enhance Code Quality Standards: Stricter Complexity Thresholds and Re-Enable <code>pycln</code> checks by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/20</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v1.5.0...v1.5.1</p>"},{"location":"usage/changelog/#v150-add-complexity-monitoring-comprehensive-code-refactoring","title":"v1.5.0 - Add Complexity Monitoring &amp; Comprehensive Code Refactoring","text":"<p><code>v1.5.0</code> <code>2025-10-19</code> data-science-extensions/docstring-format-checker/releases/v1.5.0</p> Release Notes Updates <ul> <li><code>ad85f27</code>: Add missing docstrings     (by chrimaho)</li> <li><code>059dea3</code>: Increase parallelism for CI &amp; CD workflows     (by chrimaho)</li> <li><code>f2cc19c</code>: Add <code>complexipy</code> to package config     (by chrimaho)</li> <li><code>628bb91</code>: Refactor <code>cli</code> &amp; <code>core</code> modules to extract helper methods &amp; reduce complexity<ul> <li>Extract error display helpers in cli.py (complexity 13\u21926)</li> <li>Extract file filtering, validation, and checking helpers in core.py</li> <li>Maintain 100% test coverage (183/183 tests passing)</li> <li>Maintain code quality (Pylint 10.00/10)</li> <li>Reduce total complexity: 313\u2192309 (-1.3%) (by chrimaho)</li> </ul> </li> </ul>"},{"location":"usage/changelog/#summary_1","title":"Summary","text":"<p>This release represents a major advancement in code quality, maintainability, and tooling integration for the Docstring Format Checker package. The release introduces automated complexity monitoring through <code>complexipy</code> integration, enabling continuous tracking of code complexity metrics throughout development. Major refactoring efforts have reduced total cognitive complexity by 6.9% (from 332 to 309 points) whilst expanding the codebase with 24 new focused helper methods, all whilst maintaining 100% test coverage across 834 statements and a perfect Pylint score of 10.00/10. The refactoring work has eliminated all functions with complexity \u226515, extracting complex logic into single-responsibility helper methods that improve readability and maintainability. Enhanced CI/CD workflows now run with increased parallelism, reducing build times and improving developer productivity. Comprehensive documentation improvements include complete docstring coverage for all 37 previously undocumented helper methods, ensuring consistent documentation standards throughout the codebase. These improvements establish a robust foundation for future development whilst maintaining backward compatibility with existing implementations.</p>"},{"location":"usage/changelog/#release-statistics_1","title":"Release Statistics","text":"Attribute Note Version: <code>v1.5.0</code> Python Support: <code>3.9</code>, <code>3.10</code>, <code>3.11</code>, <code>3.12</code>, <code>3.13</code>, <code>3.14</code> Test Coverage: 100% (834 statements) Pylint Score: 10.00/10 Complexity: 309 (reduced from 332, -6.9%) Functions: 98 (increased from 74, +24 helpers) Tests Passing: 183/183 Files Changed: 7 Lines Added: 992 Lines Removed: 228 Commits: 5"},{"location":"usage/changelog/#complexity-monitoring-integration","title":"\ud83d\udcca Complexity Monitoring Integration","text":""},{"location":"usage/changelog/#overview_4","title":"Overview","text":"<p>This release integrates <code>complexipy</code> as an automated complexity monitoring tool, enabling continuous tracking of cognitive complexity metrics throughout the development lifecycle. The integration provides actionable insights into code complexity trends, helping maintainers identify refactoring opportunities and prevent complexity regression.</p>"},{"location":"usage/changelog/#implementation-details_3","title":"Implementation Details","text":"<p>The <code>complexipy</code> integration includes:</p> <ul> <li> <p>Configuration in <code>pyproject.toml</code>: Added comprehensive <code>complexipy</code> configuration section with customised settings:   <pre><code>[tool.complexipy]\npaths = [\"src/docstring_format_checker\"]\nexclude = [\"__pycache__\", \"*.pyc\"]\nmax-complexity-allowed = 15\nquiet = false\nsort = \"asc\"\n</code></pre></p> </li> <li> <p>CI/CD Integration: Automated complexity checks run in GitHub Actions workflows, validating complexity thresholds on every pull request and commit.</p> </li> <li> <p>Local Development Workflow: Developers can run complexity analysis locally using simplified commands:   <pre><code># Run complexity analysis\nuv run complexipy src/docstring_format_checker\n\n# Check compliance with thresholds\nuv run check-complexity\n</code></pre></p> </li> <li> <p>Complexity Reporting: Generates detailed reports showing cognitive complexity for all functions, sorted by complexity score, enabling prioritised refactoring efforts.</p> </li> </ul>"},{"location":"usage/changelog/#technical-benefits_2","title":"Technical Benefits","text":"<ul> <li> <p>Proactive Complexity Management: Automated checks prevent introduction of overly complex code before it reaches the main branch, maintaining codebase quality standards.</p> </li> <li> <p>Objective Refactoring Priorities: Quantitative complexity metrics enable data-driven decisions about which functions require refactoring attention, eliminating subjective assessments.</p> </li> <li> <p>Continuous Quality Monitoring: Integration with CI/CD pipelines ensures complexity standards are maintained across all contributions, preventing technical debt accumulation.</p> </li> <li> <p>Developer Visibility: Real-time complexity feedback during development helps developers write cleaner, more maintainable code from the outset.</p> </li> </ul>"},{"location":"usage/changelog/#complexity-achievements","title":"Complexity Achievements","text":"<p>The initial complexity analysis and subsequent refactoring efforts have achieved:</p> <ul> <li>Total Complexity Reduction: 332 \u2192 309 points (6.9% reduction)</li> <li>High-Complexity Elimination: All functions with complexity \u226515 have been refactored</li> <li>Function Distribution: 98 total functions with 83+ functions having complexity \u226410</li> <li>Maintainability Improvement: Created 24 new focused helper methods with appropriate complexity levels</li> </ul>"},{"location":"usage/changelog/#usage-example","title":"Usage Example","text":"<pre><code># Run complexity analysis with details\nuv run complexipy src/docstring_format_checker --verbose\n\n# Check against maximum threshold\nuv run complexipy src/docstring_format_checker --max-complexity 15\n\n# Generate sorted report\nuv run complexipy src/docstring_format_checker --sort desc\n</code></pre>"},{"location":"usage/changelog/#cli-error-display-refactoring","title":"\ud83c\udfa8 CLI Error Display Refactoring","text":""},{"location":"usage/changelog/#overview_5","title":"Overview","text":"<p>The CLI module has undergone comprehensive refactoring to improve error display formatting, message handling, and user experience. The refactoring effort focused on extracting display logic into single-responsibility helper methods, enhancing code readability and maintainability.</p>"},{"location":"usage/changelog/#refactoring-achievements","title":"Refactoring Achievements","text":"<p>The CLI refactoring includes extraction of 13 new helper methods:</p> <p>Display Formatting Methods: - <code>_count_errors_and_files()</code> - Calculates total error count and affected file count from error dictionary - <code>_display_quiet_summary()</code> - Displays minimal summary output in quiet mode - <code>_display_final_summary()</code> - Displays comprehensive summary with error and file counts</p> <p>Table Output Methods: - <code>_display_table_output()</code> - Orchestrates table display for all errors with file paths and line numbers</p> <p>List Output Methods: - <code>_display_list_output()</code> - Orchestrates list display for all errors (complexity reduced from 13 \u2192 6) - <code>_create_error_header()</code> - Formats error header with file path and line number (complexity: 1) - <code>_split_error_messages()</code> - Splits compound error messages on semicolon delimiter (complexity: 1) - <code>_format_error_output()</code> - Orchestrates formatting of single error entry (complexity: 1)</p> <p>Path Validation Methods: - <code>_validate_and_process_paths()</code> - Validates and processes input paths from command-line arguments - <code>_process_all_paths()</code> - Processes all paths and collects validation errors</p> <p>Configuration Methods: - <code>_load_and_validate_config()</code> - Orchestrates configuration loading with explicit or auto-discovery - <code>_load_explicit_config()</code> - Loads explicitly specified configuration file - <code>_load_auto_discovered_config()</code> - Auto-discovers configuration from project structure</p>"},{"location":"usage/changelog/#technical-impact","title":"Technical Impact","text":"<p>The refactoring delivers:</p> <ul> <li>Reduced Complexity: <code>_display_list_output</code> reduced from complexity 13 \u2192 6 (54% reduction)</li> <li>Single Responsibility: Each helper method has one clear purpose, improving code comprehension</li> <li>Enhanced Testability: Smaller, focused methods are easier to unit test with precise assertions</li> <li>Improved Maintainability: Changes to specific display logic can be made in isolation without affecting other functionality</li> <li>Better Error Handling: Separation of validation and processing logic enables more precise error recovery</li> </ul>"},{"location":"usage/changelog/#code-example","title":"Code Example","text":"<pre><code># Before: Complex list output function\ndef _display_list_output(self, errors):\n    for file_path, file_errors in sorted(errors.items()):\n        for error_info in file_errors:\n            line_number = error_info.get(\"line\", \"N/A\")\n            messages = error_info.get(\"message\", \"\").split(\"; \")\n            for msg in messages:\n                print(f\"{file_path}:{line_number}: {msg}\")\n\n\n# After: Orchestration with helper methods\ndef _display_list_output(self, errors):\n    for file_path, file_errors in sorted(errors.items()):\n        for error_info in file_errors:\n            formatted_output = self._format_error_output(file_path, error_info)\n            print(formatted_output)\n\n\ndef _format_error_output(self, file_path, error_info):\n    header = self._create_error_header(file_path, error_info)\n    messages = self._split_error_messages(error_info.get(\"message\", \"\"))\n    return f\"{header}: {messages[0]}\"\n</code></pre>"},{"location":"usage/changelog/#core-module-refactoring","title":"\ud83d\udd27 Core Module Refactoring","text":""},{"location":"usage/changelog/#overview_6","title":"Overview","text":"<p>The core validation module has undergone extensive refactoring to reduce complexity, improve code organisation, and enhance maintainability. Seven major refactoring efforts have systematically extracted complex logic into focused helper methods, achieving a 6.9% reduction in total cognitive complexity.</p>"},{"location":"usage/changelog/#refactoring-history","title":"Refactoring History","text":"<p>First Refactoring - <code>_check_single_docstring</code>: - Complexity Reduction: 25 \u2192 2 (92% reduction) - Methods Extracted: 3 helper methods   - <code>_is_section_applicable_to_item</code> (complexity: 9) - Section applicability checking   - <code>_get_applicable_required_sections</code> (complexity: 4) - Required sections gathering   - <code>_handle_missing_docstring</code> (complexity: 2) - Missing docstring handling</p> <p>Second Refactoring - <code>check_directory</code>: - Complexity Reduction: 23 \u2192 8 (65% reduction) - Methods Extracted: 3 helper methods   - <code>_should_exclude_file</code> (complexity: 3) - Pattern matching for exclusions   - <code>_filter_python_files</code> (complexity: 4) - File filtering logic   - <code>_check_file_with_error_handling</code> (complexity: 1) - Error conversion</p> <p>Third Refactoring - <code>_check_colon_usage</code>: - Complexity Reduction: 19 \u2192 0 (100% reduction - pure delegation) - Methods Extracted: 4 helper methods   - <code>_validate_admonition_has_no_colon</code> (complexity: 4) - Single admonition validation   - <code>_check_admonition_colon_usage</code> (complexity: 3) - All admonitions check   - <code>_validate_non_admonition_has_colon</code> (complexity: 7) - Single non-admonition validation   - <code>_check_non_admonition_colon_usage</code> (complexity: 3) - All non-admonitions check</p> <p>Fourth Refactoring - <code>_check_undefined_sections</code>: - Complexity Reduction: 13 \u2192 3 (77% reduction) - Methods Extracted: 3 helper methods   - <code>_normalize_section_name</code> (complexity: 0) - String normalisation   - <code>_is_valid_section_name</code> (complexity: 3) - Validation with conditionals   - <code>_extract_section_names_from_docstring</code> (complexity: 6) - Extraction logic</p> <p>Fifth Refactoring - <code>_check_section_order</code>: - Complexity Reduction: 13 \u2192 6 (54% reduction) - Methods Extracted: 3 helper methods   - <code>_build_section_patterns</code> (complexity: 4) - Build regex patterns from config   - <code>_find_sections_with_positions</code> (complexity: 3) - Find and sort sections   - <code>_build_expected_section_order</code> (complexity: 0) - Build expected order list</p> <p>Sixth Refactoring - <code>_check_admonition_values</code>: - Complexity Reduction: 13 \u2192 3 (77% reduction) - Methods Extracted: 2 helper methods   - <code>_build_admonition_mapping</code> (complexity: 4) - Build section to admonition mapping   - <code>_validate_single_admonition</code> (complexity: 5) - Validate one admonition match</p> <p>Seventh Refactoring - <code>_display_list_output</code>: - Complexity Reduction: 13 \u2192 6 (54% reduction) - Methods Extracted: 3 helper methods (covered in CLI section above)</p>"},{"location":"usage/changelog/#refactoring-patterns-applied","title":"Refactoring Patterns Applied","text":"<p>Extract Method Pattern: - Identified complex logic blocks within larger methods - Extracted blocks into focused helper methods with single responsibility - Named helper methods descriptively to indicate purpose and responsibility - Maintained all existing tests without modification (pure refactoring)</p> <p>Separation of Concerns: - Split validation logic from data gathering logic - Isolated pattern matching from pattern usage - Separated iteration logic from single-item processing - Distinguished checking (multiple items) from validating (single item)</p> <p>Naming Conventions: - <code>_validate_*</code> - Methods that validate single items and raise/return validation results - <code>_check_*</code> - Methods that check multiple items and aggregate results - <code>_build_*</code> - Methods that construct data structures or configurations - <code>_extract_*</code> - Methods that extract information from larger structures - <code>_is_*</code> - Methods that return boolean predicates</p>"},{"location":"usage/changelog/#technical-impact_1","title":"Technical Impact","text":"<p>The refactoring delivers:</p> <ul> <li>Reduced Total Complexity: 332 \u2192 309 (6.9% reduction)</li> <li>Eliminated High Complexity: All functions with complexity \u226515 refactored to acceptable levels</li> <li>Increased Function Count: 74 \u2192 98 functions (+24 helper methods)</li> <li>Maintained Quality: 100% test coverage (834 statements), Pylint 10.00/10, all 183 tests passing</li> <li>Enhanced Readability: Main functions now orchestrate helper methods with clear, linear structure</li> <li>Improved Maintainability: Single-responsibility methods are easier to modify, test, and understand</li> </ul>"},{"location":"usage/changelog/#code-example_1","title":"Code Example","text":"<pre><code># Before: Complex nested function (complexity 25)\ndef _check_single_docstring(self, item_type, item_name, docstring):\n    if not docstring:\n        if \"Summary\" in self.required_sections:\n            self.errors.append(...)\n        return\n\n    for section_name, section_rules in self.required_sections.items():\n        if \"applies_to\" in section_rules:\n            if item_type not in section_rules[\"applies_to\"]:\n                continue\n        # ... more complex logic ...\n\n\n# After: Orchestration with helper methods (complexity 2)\ndef _check_single_docstring(self, item_type, item_name, docstring):\n    if not docstring:\n        self._handle_missing_docstring(item_type, item_name, ...)\n        return\n\n    applicable_sections = self._get_applicable_required_sections(item_type)\n    self._validate_all_required_sections(docstring, applicable_sections, ...)\n</code></pre>"},{"location":"usage/changelog/#complexity-distribution-after-refactoring","title":"Complexity Distribution After Refactoring","text":"Complexity Range Function Count Status 0-5 60+ \u2705 Excellent 6-9 23+ \u2705 Good 10-12 4 \u26a0\ufe0f Acceptable (justified) 13 1 \u26a0\ufe0f Monitor \u226515 0 \u2705 All Eliminated"},{"location":"usage/changelog/#documentation-improvements","title":"\ud83d\udcdd Documentation Improvements","text":""},{"location":"usage/changelog/#overview_7","title":"Overview","text":"<p>This release achieves comprehensive documentation coverage by adding complete docstrings for all 37 previously undocumented helper methods across the <code>cli.py</code>, <code>config.py</code>, and <code>core.py</code> modules. All docstrings follow the project's strict formatting standards, including Google-style format with admonition-based sections.</p>"},{"location":"usage/changelog/#docstring-coverage-achievements","title":"Docstring Coverage Achievements","text":"<p>CLI Module Enhancements (<code>cli.py</code>): Fixed 13 function docstrings with complete coverage including: - Summary sections with <code>!!! note \"Summary\"</code> admonition format - Comprehensive <code>Parameters</code> sections with type annotations and descriptions - <code>Returns</code> sections with parenthesised type format: <code>(str):</code> not <code>str:</code> - <code>Raises</code> sections appearing before <code>Returns</code> sections (proper ordering) - All helper methods properly documented</p> <p>Configuration Module Enhancements (<code>config.py</code>): Fixed 5 function docstrings with complete coverage including: - Summary sections describing primary purpose - Parameters documentation with type information - Returns documentation with proper format - Raises documentation for error conditions - Section ordering following project standards</p> <p>Core Module Enhancements (<code>core.py</code>): Fixed 19 method docstrings with complete coverage including: - Summary sections for all validation methods - Parameters documentation for all inputs - Returns documentation with parenthesised types - Raises sections for exception conditions - Proper ordering: Summary \u2192 Parameters \u2192 Raises \u2192 Returns - Corrected admonition types: <code>!!! abstract</code> for implementation details</p>"},{"location":"usage/changelog/#documentation-standards-applied","title":"Documentation Standards Applied","text":"<p>Format Requirements: - All summaries use <code>!!! note \"Summary\"</code> format for consistency - Returns sections use parenthesised types: <code>(str):</code>, <code>(bool):</code>, <code>(dict):</code>, etc. - Raises sections appear BEFORE Returns sections in all docstrings - All parameters include type annotations and detailed descriptions - Void functions include Raises sections but no Returns sections</p> <p>Quality Validation: - All docstrings validated with <code>run check-docstrings</code> command - Zero validation errors after completion - Consistent formatting across all modules - Proper admonition usage throughout</p>"},{"location":"usage/changelog/#validation-results_1","title":"Validation Results","text":"<pre><code>$ uv run check-docstrings\nChecking docstrings in: src/docstring_format_checker\n\n\u2705 All docstrings are valid!\n\nSummary:\n  Total files checked: 3\n  Total errors found: 0\n</code></pre>"},{"location":"usage/changelog/#example-docstring-format","title":"Example Docstring Format","text":"<pre><code>def _validate_and_process_paths(self, paths: list[str]) -&gt; list[str]:\n    \"\"\"\n    !!! note \"Summary\"\n        Validates and processes input paths from command-line arguments.\n\n    !!! abstract \"Parameters\"\n        - **`paths`** (`list[str]`): List of file or directory paths to validate.\n\n    !!! failure \"Raises\"\n        - **`SystemExit`**: If any path does not exist or is invalid.\n\n    !!! success \"Returns\"\n        (`list[str]`): List of validated absolute paths.\n    \"\"\"\n    validated_paths = []\n    for path in paths:\n        abs_path = Path(path).resolve()\n        if not abs_path.exists():\n            print(f\"Error: Path does not exist: {path}\")\n            sys.exit(1)\n        validated_paths.append(str(abs_path))\n    return validated_paths\n</code></pre>"},{"location":"usage/changelog/#cicd-workflow-enhancements","title":"\u26a1 CI/CD Workflow Enhancements","text":""},{"location":"usage/changelog/#overview_8","title":"Overview","text":"<p>GitHub Actions CI and CD workflows have been optimised to improve build performance and developer productivity through increased parallelism and more efficient resource utilisation.</p>"},{"location":"usage/changelog/#workflow-improvements","title":"Workflow Improvements","text":"<p>Continuous Integration (<code>ci.yml</code>): - Increased parallelism for test execution across Python versions - Optimised job dependencies to reduce total workflow runtime - Enhanced caching strategies for dependency installation - All 183 tests continue passing across all supported Python versions</p> <p>Continuous Deployment (<code>cd.yml</code>): - Increased parallelism for deployment tasks - Optimised build and release processes - Enhanced caching for faster deployment cycles - Maintained security and verification standards</p>"},{"location":"usage/changelog/#performance-impact","title":"Performance Impact","text":"<p>The workflow enhancements deliver:</p> <ul> <li>Reduced Build Times: Parallel execution reduces total CI runtime</li> <li>Faster Feedback: Developers receive test results more quickly</li> <li>Improved Resource Utilisation: Better use of available GitHub Actions runners</li> <li>Enhanced Developer Experience: Shorter wait times for CI/CD pipeline completion</li> </ul>"},{"location":"usage/changelog/#technical-implementation","title":"Technical Implementation","text":"<pre><code># Example: Increased parallelism in CI workflow\nstrategy:\n  matrix:\n    python-version: ['3.9', '3.10', '3.11', '3.12', '3.13', '3.14']\n  max-parallel: 6  # Increased from 3\n</code></pre>"},{"location":"usage/changelog/#developer-experience-improvements","title":"\ud83d\udee0\ufe0f Developer Experience Improvements","text":""},{"location":"usage/changelog/#overview_9","title":"Overview","text":"<p>This release includes several improvements to the developer experience, making it easier to maintain code quality and contribute to the project.</p>"},{"location":"usage/changelog/#simplified-complexity-checking","title":"Simplified Complexity Checking","text":"<p>The <code>scripts.py</code> utility has been updated with a simplified complexity check command:</p> <pre><code># Before: Verbose command with many options\ncomplexipy src/docstring_format_checker --max-complexity 15 --sort asc --verbose\n\n# After: Simplified with configuration in pyproject.toml\ncomplexipy src/docstring_format_checker\n</code></pre> <p>Configuration moved to <code>pyproject.toml</code> eliminates need for command-line arguments, reducing cognitive load for developers.</p>"},{"location":"usage/changelog/#enhanced-testing-workflow","title":"Enhanced Testing Workflow","text":"<ul> <li>Maintained 100% test coverage across all refactoring efforts</li> <li>All 183 tests passing without modification (pure refactoring)</li> <li>Coverage increased from 783 to 834 statements</li> <li>Perfect Pylint score (10.00/10) maintained throughout</li> </ul>"},{"location":"usage/changelog/#code-quality-standards_1","title":"Code Quality Standards","text":"<ul> <li>Zero functions with complexity \u226515</li> <li>Consistent helper method complexity (0-9 range)</li> <li>Single-responsibility principle applied throughout</li> <li>Clear naming conventions for helper methods</li> </ul>"},{"location":"usage/changelog/#metrics-and-statistics","title":"\ud83d\udcc8 Metrics and Statistics","text":""},{"location":"usage/changelog/#complexity-metrics","title":"Complexity Metrics","text":"Metric Before After Change Total Complexity 332 309 -23 (-6.9%) Function Count 74 98 +24 (+32.4%) High Complexity (\u226515) 3 0 -3 (-100%) \u2705 Medium Complexity (10-14) 6 5 -1 (-16.7%) Low Complexity (\u22649) 65 93 +28 (+43.1%) \u2705"},{"location":"usage/changelog/#test-coverage-metrics","title":"Test Coverage Metrics","text":"Metric Value Total Statements 834 Statements Covered 834 Coverage 100% Tests Passing 183/183 Test Framework pytest"},{"location":"usage/changelog/#code-quality-metrics","title":"Code Quality Metrics","text":"Metric Value Pylint Score 10.00 Maximum Score 10.00 Type Checking \u2705 Pass Formatting \u2705 Pass"},{"location":"usage/changelog/#refactoring-impact","title":"Refactoring Impact","text":"Function Before After Reduction <code>_check_single_docstring</code> 25 2 92% <code>check_directory</code> 23 8 65% <code>_check_colon_usage</code> 19 0 100% <code>_check_undefined_sections</code> 13 3 77% <code>_check_section_order</code> 13 6 54% <code>_check_admonition_values</code> 13 3 77% <code>_display_list_output</code> 13 6 54%"},{"location":"usage/changelog/#breaking-changes_1","title":"\ud83d\udd0d Breaking Changes","text":"<p>None. This release maintains full backward compatibility with v1.4.0. All existing configuration files, command-line interfaces, and API contracts remain unchanged.</p>"},{"location":"usage/changelog/#migration-guide_1","title":"\ud83c\udfaf Migration Guide","text":"<p>No migration required. Users can upgrade directly from v1.4.0 to v1.5.0 without any configuration changes or code modifications.</p>"},{"location":"usage/changelog/#installation-and-upgrade_1","title":"\ud83d\ude80 Installation and Upgrade","text":""},{"location":"usage/changelog/#new-installation_1","title":"New Installation","text":"<pre><code># Install with pip\npip install docstring-format-checker==1.5.0\n\n# Install with uv\nuv pip install docstring-format-checker==1.5.0\n</code></pre>"},{"location":"usage/changelog/#upgrade-from-previous-version_1","title":"Upgrade from Previous Version","text":"<pre><code># Upgrade with pip\npip install --upgrade docstring-format-checker\n\n# Upgrade with uv\nuv pip install --upgrade docstring-format-checker\n</code></pre>"},{"location":"usage/changelog/#additional-resources_1","title":"\ud83d\udcda Additional Resources","text":""},{"location":"usage/changelog/#documentation_1","title":"Documentation","text":"<ul> <li>Project Documentation: https://docstring-format-checker.readthedocs.io</li> <li>Complexity Analysis Report: See <code>complexity_analysis_report.md</code> for detailed refactoring history</li> <li>Contributing Guide: See <code>CONTRIBUTING.md</code> for contribution guidelines</li> <li>Changelog: See <code>CHANGELOG.md</code> for complete version history</li> </ul>"},{"location":"usage/changelog/#configuration-examples","title":"Configuration Examples","text":"<p>Basic <code>pyproject.toml</code> Configuration:</p> <pre><code>[tool.docstring_format_checker]\nexclude_patterns = [\"test_*.py\", \"*_test.py\"]\n\n[tool.docstring_format_checker.sections.Summary]\nrequired = true\nformat = \"free_text\"\n\n[tool.complexipy]\npaths = [\"src/your_package\"]\nmax-complexity-allowed = 15\nquiet = false\nsort = \"asc\"\n</code></pre>"},{"location":"usage/changelog/#running-quality-checks_1","title":"Running Quality Checks","text":"<pre><code># Run docstring validation\nuv run check-docstrings\n\n# Run complexity analysis\nuv run complexipy src/your_package\n\n# Run tests with coverage\nuv run pytest --cov=src/your_package --cov-report=term-missing\n\n# Run Pylint\npylint src/your_package\n</code></pre>"},{"location":"usage/changelog/#pull-requests_1","title":"\ud83d\udcaa Pull Requests","text":"<ul> <li>Code Quality Enhancement: Refactoring Complex Functions to reduce Cognitive Load and Improve Maintainability by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/19</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v1.4.0...v1.5.0</p>"},{"location":"usage/changelog/#v140-add-python-314-support-add-enhanced-checks","title":"v1.4.0 - Add Python 3.14 Support &amp; Add Enhanced Checks","text":"<p><code>v1.4.0</code> <code>2025-10-17</code> data-science-extensions/docstring-format-checker/releases/v1.4.0</p> Release Notes Updates <ul> <li><code>a283f1a</code>: Fix yet another encoding issue affecting Windows OS     (by chrimaho)</li> <li><code>162700c</code>: Fix another encoding issue affecting Windows OS     (by chrimaho)</li> <li><code>6ecc7cd</code>: Fix problem with character encoding on the <code>windows-latest</code> OS     (by chrimaho)</li> <li><code>4cfb994</code>: Replace checkmark with emoji in success messages for better visibility and compatability with different operating systems     (by chrimaho)</li> <li><code>eb1597d</code>: Refactor type hints in DocstringChecker methods to use <code>Optional[]</code> instead of pipe <code>|</code> for better compatability with legacy Python versions     (by chrimaho)</li> <li><code>69465ea</code>: Add <code>complexipy</code> to project dependencies and complexity checks to the package     (by chrimaho)</li> <li><code>c23d3ed</code>: Update DFC configuration to disable private check and adjust admonition settings for parameters     (by chrimaho)</li> <li><code>a506962</code>: Refactor changelog generation logic to ensure that it is correctly formatted after being generated     (by chrimaho)</li> <li><code>4e8f1c9</code>: Update formatting of <code>CHANGELOG.md</code> file     (by chrimaho)</li> <li><code>9eeb044</code>: Add <code>dfc</code> to pre-commit hooks configuration     (by chrimaho)</li> <li><code>759ada0</code>: Add <code>dfc</code> to the <code>checks</code> scripts     (by chrimaho)</li> <li><code>2eee615</code>: Bring code coverage up to 100% for configuration loading and extraction functions     (by chrimaho)</li> <li><code>6a73227</code>: Refactor code structure to improve maintainability, readability, and resolve <code>pylint</code> errors<ul> <li>Extract large functions into smaller, focused helper functions to reduce complexity</li> <li>Split <code>_display_results()</code> function into specialised display functions for different output formats</li> <li>Break down <code>check_docstrings()</code> function into logical validation and processing steps</li> <li>Decompose <code>load_config()</code> function into separate parsing and validation functions</li> <li>Reorganise <code>_validate_docstring_sections()</code> method into structured validation workflow</li> <li>Simplify complex parentheses validation logic with dedicated helper functions</li> <li>Add comprehensive test coverage for previously untested code paths</li> <li>Import missing types and functions to resolve linting issues (by chrimaho)</li> </ul> </li> <li><code>1c18380</code>: Add pylint configuration to standardise linting rules<ul> <li>Introduce <code>[tool.pylint.main]</code> section to define disabled warnings for linting</li> <li>Improve consistency of code style checks by centralising configuration</li> <li>Streamline development workflow by reducing unnecessary warning noise (by chrimaho)</li> </ul> </li> <li><code>cabcffc</code>: Standardise type annotations and improve error chaining<ul> <li>Standardise type annotations for clarity and consistency across core modules</li> <li>Improve exception chaining by using <code>raise Exit(1) from e</code> for better error traceability</li> <li>Update module headers and docstrings to better describe purpose and usage</li> <li>Refine variable initialisation and scoping in loops for enhanced readability</li> <li>Enhance custom exception <code>DocstringError()</code> with explicit type annotations</li> <li>Replace string formatting to avoid unnecessary f-strings where not needed (by chrimaho)</li> </ul> </li> <li><code>fac3a35</code>: Add support for Python 3.14 to workflows and metadata<ul> <li>Extend CI and CD workflow matrices to include Python 3.14 for broader compatibility</li> <li>Update package metadata to advertise support for Python 3.14 in <code>classifiers</code> for improved discoverability</li> <li>Ensure future readiness and standardise testing coverage across supported Python versions (by chrimaho)</li> </ul> </li> </ul>"},{"location":"usage/changelog/#summary_2","title":"Summary","text":"<p>This release represents a significant evolution of the Docstring Format Checker package, delivering comprehensive improvements across multiple dimensions of code quality, compatibility, and maintainability. The release introduces official Python 3.14 support, achieving complete cross-version compatibility from Python 3.11 through 3.14. Major enhancements include a complete code refactoring achieving 100% test coverage (783 statements), standardisation of type annotations throughout the codebase, and integration of advanced code quality tools including <code>pylint</code> and <code>complexipy</code> for static analysis and complexity monitoring. The release also delivers seamless pre-commit hook integration, enabling automated docstring validation in development workflows. Critical Windows encoding issues have been resolved, ensuring consistent behaviour across all operating systems. These improvements establish a robust foundation for future development whilst maintaining backward compatibility with existing implementations.</p>"},{"location":"usage/changelog/#release-statistics_2","title":"Release Statistics","text":"Attribute Note Version: <code>v1.4.0</code> Python Support: <code>3.9</code>, <code>3.10</code>, <code>3.11</code>, <code>3.12</code>, <code>3.13</code>, <code>3.14</code> Test Coverage: 100% (783 statements) Files Changed: 14 Lines Added: 2,918 Lines Removed: 403 Commits: 17"},{"location":"usage/changelog/#python-314-support","title":"\ud83d\udc0d Python 3.14 Support","text":""},{"location":"usage/changelog/#overview_10","title":"Overview","text":"<p>This release adds official support for Python 3.14, the latest Python version released in October 2024. The package now provides full compatibility across Python 3.11, 3.12, 3.13, and 3.14, ensuring users can leverage the latest Python features whilst maintaining support for earlier versions.</p>"},{"location":"usage/changelog/#implementation-details_4","title":"Implementation Details","text":"<p>The Python 3.14 support implementation includes:</p> <ul> <li>Updated GitHub Actions CI/CD workflows with Python 3.14 test matrix</li> <li>Verified compatibility with Python 3.14 standard library changes</li> <li>Validated all existing functionality against Python 3.14 runtime</li> <li>Updated package metadata in <code>pyproject.toml</code> to declare Python 3.14 support</li> <li>Comprehensive test execution across all supported Python versions</li> </ul>"},{"location":"usage/changelog/#technical-benefits_3","title":"Technical Benefits","text":"<ul> <li>Cross-Version Compatibility: The package maintains consistent behaviour across Python 3.11-3.14, allowing teams to upgrade Python versions without modifying their docstring validation configuration.</li> <li>Future-Proof Development: Early adoption of Python 3.14 ensures the package remains compatible with the latest language features and standard library improvements.</li> <li>Continuous Integration: Automated testing against all supported Python versions guarantees compatibility and prevents regression issues during development.</li> </ul>"},{"location":"usage/changelog/#usage-example_1","title":"Usage Example","text":"<pre><code># Install with Python 3.14\npython3.14 -m pip install docstring-format-checker\n\n# Run with Python 3.14\npython3.14 -m docstring_format_checker --check path/to/code\n</code></pre>"},{"location":"usage/changelog/#code-refactoring-and-architecture-improvements","title":"\ud83d\udd27 Code Refactoring and Architecture Improvements","text":""},{"location":"usage/changelog/#overview_11","title":"Overview","text":"<p>The codebase has undergone comprehensive refactoring to improve maintainability, readability, and extensibility. This refactoring effort focused on modularising functionality, eliminating code duplication, standardising coding patterns, and enhancing error handling throughout the package.</p>"},{"location":"usage/changelog/#refactoring-achievements_1","title":"Refactoring Achievements","text":"<ul> <li>Modularisation: Core functionality has been reorganised into logical modules with clear separation of concerns. The <code>cli.py</code>, <code>config.py</code>, and <code>core.py</code> modules now follow single-responsibility principles, making the codebase easier to navigate and maintain.</li> <li>Code Deduplication: Identified and eliminated duplicate code patterns, consolidating common logic into reusable functions. This reduces maintenance burden and ensures consistent behaviour across the package.</li> <li>Enhanced Error Handling: Improved exception handling with custom exception classes in the <code>utils/exceptions.py</code> module. This provides more informative error messages and enables precise error recovery strategies.</li> <li>Documentation Improvements: Enhanced inline documentation and docstrings throughout the codebase, improving code comprehension for contributors and maintainers.</li> </ul>"},{"location":"usage/changelog/#technical-impact_2","title":"Technical Impact","text":"<p>The refactoring delivers:</p> <ul> <li>Reduced cyclomatic complexity in core functions</li> <li>Improved code navigation and IDE support</li> <li>Enhanced debugging capabilities through clearer stack traces</li> <li>Better alignment with Python best practices and PEP standards</li> </ul>"},{"location":"usage/changelog/#100-test-coverage-achievement","title":"\ud83e\uddea 100% Test Coverage Achievement","text":""},{"location":"usage/changelog/#overview_12","title":"Overview","text":"<p>This release achieves complete test coverage with 100% code coverage across 783 statements in the core package. This milestone represents a comprehensive test suite that validates all code paths, edge cases, and error conditions throughout the package.</p>"},{"location":"usage/changelog/#testing-infrastructure","title":"Testing Infrastructure","text":"<p>Coverage Statistics:</p> <ul> <li>Total Statements: 783</li> <li>Statements Covered: 783</li> <li>Coverage Percentage: 100%</li> <li>Test Framework: <code>pytest</code></li> <li>Coverage Tool: <code>coverage.py</code> v7.11.0</li> </ul>"},{"location":"usage/changelog/#test-suite-expansion","title":"Test Suite Expansion","text":"<p>The test suite has been significantly expanded with new test modules:</p> <ul> <li><code>test_config.py</code> Enhancements: Added 133 lines of comprehensive configuration testing, validating:</li> <li>Configuration file parsing and validation</li> <li>Default configuration handling</li> <li>Configuration override mechanisms</li> <li>Invalid configuration error handling</li> <li>Configuration merge strategies</li> <li><code>test_core.py</code> Enhancements: Added 337 lines of core functionality testing, covering:</li> <li>Docstring extraction and parsing</li> <li>Format validation logic</li> <li>Multi-style docstring support (Google, NumPy, Sphinx)</li> <li>Error detection and reporting</li> <li>Edge cases and boundary conditions</li> <li><code>test_cli.py</code> Updates: Enhanced CLI testing to validate:</li> <li>Command-line argument parsing</li> <li>Exit code handling</li> <li>Output formatting</li> <li>Error message presentation</li> </ul>"},{"location":"usage/changelog/#quality-assurance-benefits","title":"Quality Assurance Benefits","text":"<ul> <li>Regression Prevention: Complete test coverage ensures that code changes cannot inadvertently break existing functionality without detection.</li> <li>Confidence in Refactoring: Developers can confidently refactor code knowing that the comprehensive test suite will catch any behavioural changes.</li> <li>Documentation Through Tests: The test suite serves as executable documentation, demonstrating expected behaviour for all package features.</li> <li>Continuous Quality Monitoring: Automated test execution in CI/CD pipelines maintains quality standards across all contributions.</li> </ul>"},{"location":"usage/changelog/#running-the-test-suite","title":"Running the Test Suite","text":"<pre><code># Run full test suite with coverage\nuv run pytest --config-file=pyproject.toml --cov-report=term-missing\n\n# Run tests for specific module\nuv run pytest src/tests/test_core.py\n\n# Generate HTML coverage report\nuv run pytest --config-file=pyproject.toml --cov-report=html\n</code></pre>"},{"location":"usage/changelog/#pylint-integration-and-code-quality-standards","title":"\ud83d\udccb Pylint Integration and Code Quality Standards","text":""},{"location":"usage/changelog/#overview_13","title":"Overview","text":"<p>This release integrates <code>pylint</code> as a static analysis tool, establishing comprehensive code quality standards and automated linting checks. The <code>pylint</code> configuration enforces consistent coding style, detects potential bugs, and identifies code smells throughout the codebase.</p>"},{"location":"usage/changelog/#pylint-configuration","title":"Pylint Configuration","text":"<p>A comprehensive <code>pylint</code> configuration has been added to <code>pyproject.toml</code>, including:</p> <ul> <li>Enabled Checks:</li> <li>Code style consistency (PEP 8 compliance)</li> <li>Unused import detection</li> <li>Variable naming conventions</li> <li>Function complexity limits</li> <li>Documentation completeness</li> <li> <p>Potential bug patterns</p> </li> <li> <p>Disabled Checks:</p> </li> <li> <p>Selectively disabled checks that conflict with project-specific requirements or generate false positives in the codebase.</p> </li> <li> <p>Custom Settings:</p> </li> <li>Tailored scoring thresholds and error severity levels to match project quality standards.</li> </ul>"},{"location":"usage/changelog/#code-quality-improvements","title":"Code Quality Improvements","text":"<p>The <code>pylint</code> integration has driven improvements in:</p> <ul> <li>Naming Conventions: Standardised variable, function, and class naming according to Python conventions.</li> <li>Import Organisation: Cleaned up import statements, removing unused imports and organising imports logically.</li> <li>Code Complexity: Refactored complex functions to reduce cyclomatic complexity and improve maintainability.</li> <li>Documentation Standards: Ensured all public functions, classes, and modules have appropriate docstrings.</li> </ul>"},{"location":"usage/changelog/#usage-in-development-workflow","title":"Usage in Development Workflow","text":"<pre><code># Run pylint on entire codebase\npylint src/docstring_format_checker\n\n# Run pylint with custom configuration\npylint --rcfile=pyproject.toml src/docstring_format_checker\n\n# Check specific file\npylint src/docstring_format_checker/core.py\n\n# Generate detailed report\npylint --output-format=text src/docstring_format_checker &gt; pylint-report.txt\n</code></pre>"},{"location":"usage/changelog/#integration-with-cicd","title":"Integration with CI/CD","text":"<p>The <code>pylint</code> checks are integrated into the CI/CD pipeline, automatically validating code quality on every pull request and commit. This ensures that code quality standards are maintained consistently across all contributions.</p>"},{"location":"usage/changelog/#pre-commit-hook-integration","title":"\ud83d\udd17 Pre-Commit Hook Integration","text":""},{"location":"usage/changelog/#overview_14","title":"Overview","text":"<p>This release introduces seamless integration with pre-commit hooks through a new <code>.pre-commit-hooks.yaml</code> configuration file. This enables automatic docstring validation before commits, preventing invalid docstrings from entering the codebase.</p>"},{"location":"usage/changelog/#pre-commit-configuration","title":"Pre-Commit Configuration","text":"<p>The <code>.pre-commit-hooks.yaml</code> file defines a hook for the Docstring Format Checker:</p> <pre><code>- id: docstring-format-checker\n  name: Docstring Format Checker\n  description: Validate Python docstring formats\n  entry: docstring-format-checker\n  language: python\n  types: [python]\n</code></pre>"},{"location":"usage/changelog/#integration-steps","title":"Integration Steps","text":"<p>Add the Docstring Format Checker to your <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n  - repo: https://github.com/data-science-extensions/docstring-format-checker\n    rev: v1.4.0\n    hooks:\n      - id: docstring-format-checker\n        args: ['--config-file=.dfc.yaml']\n</code></pre>"},{"location":"usage/changelog/#workflow-integration","title":"Workflow Integration","text":"<ul> <li>Automated Validation: Pre-commit hooks automatically run before each commit, validating docstrings in changed files.</li> <li>Early Error Detection: Catches docstring format issues before code review, reducing feedback cycles and maintaining code quality standards.</li> <li>Customisable Configuration: Supports passing configuration arguments to the hook, enabling project-specific docstring validation rules.</li> <li>Fast Execution: Only checks files staged for commit, ensuring quick feedback without slowing down development workflow.</li> </ul>"},{"location":"usage/changelog/#development-workflow-example","title":"Development Workflow Example","text":"<pre><code># Install pre-commit hooks\npre-commit install\n\n# Manually run hooks on all files\npre-commit run --all-files\n\n# Run hooks on specific files\npre-commit run --files src/docstring_format_checker/core.py\n\n# Update hooks to latest versions\npre-commit autoupdate\n</code></pre>"},{"location":"usage/changelog/#configuration-and-workflow-enhancements","title":"\u2699\ufe0f Configuration and Workflow Enhancements","text":""},{"location":"usage/changelog/#overview_15","title":"Overview","text":"<p>This release delivers multiple configuration and workflow improvements, including enhanced DFC configuration capabilities, CHANGELOG formatting updates, changelog generation refactoring, and integration of workflow automation tools.</p>"},{"location":"usage/changelog/#dfc-configuration-updates","title":"DFC Configuration Updates","text":"<p>Enhanced the Docstring Format Checker configuration system with:</p> <ul> <li>Improved Validation: More robust configuration file parsing with better error messages for invalid configurations.</li> <li>Default Value Handling: Refined default configuration values to provide sensible defaults whilst maintaining flexibility.</li> <li>Configuration Merging: Enhanced logic for merging project-specific configurations with package defaults.</li> </ul>"},{"location":"usage/changelog/#changelog-formatting","title":"CHANGELOG Formatting","text":"<p>Updated <code>CHANGELOG.md</code> formatting to improve readability and maintainability:</p> <ul> <li>Consistent Structure: Standardised changelog entry format across all versions, making it easier to track changes over time.</li> <li>Emoji Section Headers: Added emoji-prefixed H3 headers for visual scanning of changelog sections.</li> <li>Enhanced Descriptions: Improved change descriptions with more context and technical details.</li> </ul>"},{"location":"usage/changelog/#changelog-generation-refactoring","title":"Changelog Generation Refactoring","text":"<p>Refactored the changelog generation utility (<code>src/utils/changelog.py</code>) to improve:</p> <ul> <li>Automation Capabilities: Enhanced scripts to automatically generate changelog entries from commit messages and pull request descriptions.</li> <li>Template Consistency: Standardised changelog entry templates to ensure consistent formatting across releases.</li> <li>Git Integration: Improved integration with git commands to extract commit information and generate accurate changelog content.</li> </ul>"},{"location":"usage/changelog/#workflow-script-updates","title":"Workflow Script Updates","text":"<p>Updated workflow scripts in <code>src/utils/scripts.py</code> to include:</p> <ul> <li>DFC Integration: Added Docstring Format Checker to automated checking scripts, ensuring docstring validation is part of the standard workflow.</li> <li>Enhanced Error Handling: Improved error reporting in workflow scripts to provide clearer feedback when checks fail.</li> </ul>"},{"location":"usage/changelog/#usage-example_2","title":"Usage Example","text":"<pre><code># Run automated workflow checks (includes DFC)\npython src/utils/scripts.py check\n\n# Generate changelog entries for new release\npython src/utils/changelog.py generate --version v1.4.0\n</code></pre>"},{"location":"usage/changelog/#complexity-monitoring-with-complexipy","title":"\ud83d\udcca Complexity Monitoring with Complexipy","text":""},{"location":"usage/changelog/#overview_16","title":"Overview","text":"<p>This release integrates <code>complexipy</code>, a modern Python complexity analysis tool, to monitor and maintain code complexity standards. This integration provides automated complexity metrics and helps prevent the introduction of overly complex code that is difficult to maintain.</p>"},{"location":"usage/changelog/#complexipy-integration","title":"Complexipy Integration","text":"<ul> <li>Automated Analysis: Complexipy runs as part of the CI/CD pipeline, analysing code complexity on every commit and pull request.</li> <li>Complexity Metrics: Tracks cyclomatic complexity, cognitive complexity, and other maintainability metrics across the codebase.</li> <li>Threshold Enforcement: Configurable complexity thresholds prevent merging code that exceeds acceptable complexity limits.</li> </ul>"},{"location":"usage/changelog/#complexity-standards","title":"Complexity Standards","text":"<p>The project enforces the following complexity standards:</p> <ul> <li>Function Complexity: Maximum cyclomatic complexity of 10 for individual functions, encouraging simple, focused functions.</li> <li>Class Complexity: Maximum average complexity of 8 across all methods in a class.</li> <li>Module Complexity: Overall module complexity limits to maintain manageable file sizes.</li> </ul>"},{"location":"usage/changelog/#benefits-of-complexity-monitoring","title":"Benefits of Complexity Monitoring","text":"<ul> <li>Maintainability: Lower complexity code is easier to understand, modify, and extend, reducing long-term maintenance costs.</li> <li>Bug Prevention: Complex code correlates with higher bug rates. Complexity limits reduce the likelihood of introducing bugs.</li> <li>Code Review Efficiency: Reviewers can focus on logic and design rather than untangling complex code structures.</li> <li>Refactoring Signals: Complexity metrics identify code that would benefit from refactoring before it becomes a maintenance burden.</li> </ul>"},{"location":"usage/changelog/#usage-in-development","title":"Usage in Development","text":"<pre><code># Analyse complexity of entire codebase\ncomplexipy src/docstring_format_checker\n\n# Check specific file\ncomplexipy src/docstring_format_checker/core.py\n\n# Generate complexity report\ncomplexipy --output=json src/docstring_format_checker &gt; complexity-report.json\n</code></pre>"},{"location":"usage/changelog/#windows-encoding-compatibility","title":"\ud83d\udda5\ufe0f Windows Encoding Compatibility","text":""},{"location":"usage/changelog/#overview_17","title":"Overview","text":"<p>This release resolves critical Windows encoding issues that caused test failures on Windows operating systems. The Windows platform uses <code>cp1252</code> (Western European) encoding by default, which lacks support for Unicode characters including emojis and extended ASCII art used by <code>pyfiglet</code>. These encoding mismatches caused both output encoding errors and input decoding errors during test execution.</p>"},{"location":"usage/changelog/#root-cause-analysis","title":"Root Cause Analysis","text":"<ul> <li>Windows Default Encoding: Windows uses <code>cp1252</code> encoding by default for console I/O operations, limiting character support to Western European characters.</li> <li>Unicode Requirements: The package uses Unicode characters including:</li> <li>Checkmark emoji (\u2705, U+2705) in success messages</li> <li>ASCII art from <code>pyfiglet</code> containing extended character sets</li> <li>Subprocess Encoding: Python's <code>subprocess.run()</code> with <code>text=True</code> inherits the system default encoding, causing encoding/decoding failures on Windows.</li> </ul>"},{"location":"usage/changelog/#solution-implementation","title":"Solution Implementation","text":"<p>The encoding issues have been resolved by adding the <code>PYTHONIOENCODING</code> environment variable to CI/CD workflows:</p> <p><code>.github/workflows/ci.yml</code> Update:</p> <pre><code>env:\n  PYTHONIOENCODING: utf-8\n</code></pre> <p><code>.github/workflows/cd.yml</code> Update:</p> <pre><code>env:\n  PYTHONIOENCODING: utf-8\n</code></pre>"},{"location":"usage/changelog/#how-pythonioencoding-resolves-both-issues","title":"How <code>PYTHONIOENCODING</code> Resolves Both Issues","text":"<ul> <li>Environment Variable Inheritance: <code>PYTHONIOENCODING=utf-8</code> is inherited by all Python processes and subprocesses, ensuring consistent UTF-8 encoding throughout the execution chain.</li> <li>Output Encoding Fix: Forces Python to encode all output (including emoji characters) as UTF-8, preventing <code>UnicodeEncodeError</code> when writing to stdout/stderr.</li> <li>Input Decoding Fix: Forces Python to decode all input (including <code>pyfiglet</code> ASCII art) as UTF-8, preventing <code>UnicodeDecodeError</code> when reading from subprocess stdout.</li> <li>Cross-Platform Consistency: Ensures identical encoding behaviour across Windows, Linux, and macOS, eliminating platform-specific bugs.</li> </ul>"},{"location":"usage/changelog/#error-examples-resolved","title":"Error Examples Resolved","text":"<p>Before Fix - Output Encoding Error:</p> <pre><code>UnicodeEncodeError: 'charmap' codec can't encode character '\\u2705' \nin position 42: character maps to &lt;undefined&gt;\n</code></pre> <p>Before Fix - Input Decoding Error:</p> <pre><code>UnicodeDecodeError: 'charmap' codec can't decode byte 0x90 \nin position 156: character maps to &lt;undefined&gt;\n</code></pre> <p>After Fix:</p> <p>Both errors resolved - all tests pass on Windows with consistent UTF-8 encoding.</p>"},{"location":"usage/changelog/#technical-benefits_4","title":"Technical Benefits","text":"<ul> <li>Cross-Platform Compatibility: Ensures consistent behaviour across all operating systems, eliminating Windows-specific test failures.</li> <li>Unicode Support: Full Unicode character support enables use of emojis, international characters, and extended ASCII art in output.</li> <li>Developer Experience: Windows developers can run tests locally without encountering encoding-related failures.</li> <li>CI/CD Reliability: Windows CI/CD pipelines now execute reliably without encoding-related test failures.</li> </ul>"},{"location":"usage/changelog/#testing-and-validation","title":"Testing and Validation","text":"<p>The encoding fixes have been validated through:</p> <ul> <li>Windows CI Pipeline: All tests pass on Windows Server with Python 3.11-3.14.</li> <li>Emoji Output Testing: Success messages with checkmark emoji display correctly on Windows.</li> <li>Pyfiglet Integration: ASCII art generation and rendering work correctly on Windows.</li> <li>Subprocess Testing: Subprocess execution with <code>text=True</code> handles UTF-8 encoding/decoding correctly.</li> </ul>"},{"location":"usage/changelog/#additional-improvements","title":"\ud83d\udd04 Additional Improvements","text":""},{"location":"usage/changelog/#merge-strategy","title":"Merge Strategy","text":"<p>All 17 commits have been merged via pull request #18, maintaining a clean git history and ensuring all changes passed CI/CD validation before integration.</p>"},{"location":"usage/changelog/#coverage-tool-update","title":"Coverage Tool Update","text":"<p>Updated <code>coverage.py</code> from v7.10.6 to v7.11.0, benefiting from:</p> <ul> <li>Performance improvements in coverage analysis</li> <li>Enhanced HTML report generation</li> <li>Bug fixes in coverage measurement accuracy</li> </ul>"},{"location":"usage/changelog/#documentation-updates","title":"Documentation Updates","text":"<ul> <li>CHANGELOG.md Expansion: Added 1,853 lines documenting all changes since v1.3.0 with comprehensive release notes.</li> <li>Code Documentation: Enhanced inline documentation and docstrings throughout refactored code.</li> <li>Contributing Guidelines: Updated <code>CONTRIBUTING.md</code> with new development workflow requirements including pre-commit hooks and quality tools.</li> </ul>"},{"location":"usage/changelog/#installation-and-upgrade_2","title":"\ud83d\udce6 Installation and Upgrade","text":""},{"location":"usage/changelog/#installing-v140","title":"Installing v1.4.0","text":"<pre><code># Install from PyPI\npip install docstring-format-checker==1.4.0\n\n# Install with uv (recommended)\nuv pip install docstring-format-checker==1.4.0\n\n# Install from source\ngit clone https://github.com/data-science-extensions/docstring-format-checker.git\ncd docstring-format-checker\ngit checkout v1.4.0\nuv pip install -e .\n</code></pre>"},{"location":"usage/changelog/#upgrading-from-v130","title":"Upgrading from v1.3.0","text":"<pre><code># Upgrade with pip\npip install --upgrade docstring-format-checker\n\n# Upgrade with uv\nuv pip install --upgrade docstring-format-checker\n</code></pre>"},{"location":"usage/changelog/#compatibility-notes","title":"Compatibility Notes","text":"<ul> <li>Breaking Changes: None. Version 1.4.0 maintains full backward compatibility with v1.3.0 configuration files and usage patterns.</li> <li>Configuration Migration: No configuration changes required when upgrading from v1.3.0.</li> <li>Python Version Requirements: Python 3.11 or higher required (unchanged from v1.3.0).</li> </ul>"},{"location":"usage/changelog/#pull-requests_2","title":"\ud83d\udcaa Pull Requests","text":"<ul> <li>Comprehensive Code Quality Enhancement: Python 3.14 Support, Refactoring, and 100% Test Coverage by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/18</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v1.3.0...v1.4.0</p>"},{"location":"usage/changelog/#v130-enhance-development-workflow-with-pre-commit-integration-and-improved-documentation-generation","title":"v1.3.0 - Enhance Development Workflow with Pre-commit Integration and Improved Documentation Generation","text":"<p><code>v1.3.0</code> <code>2025-10-06</code> data-science-extensions/docstring-format-checker/releases/v1.3.0</p> Release Notes Updates <ul> <li><code>9152084</code>: Enhance formatting of the <code>CHANGELOG.md</code> file     (by chrimaho)</li> <li><code>8c1327c</code>: Fix typo     The type ignore comment should have a space after 'type:' for consistency with standard Python type ignore formatting: '# type: ignore'.     (by chrimaho)</li> <li><code>ccd0a70</code>: Fix formatting     [nitpick] Using NEW_LINE constant instead of hardcoded '\\n' would be more consistent with the rest of the codebase where NEW_LINE is used for line separation.     (by chrimaho)</li> <li><code>9f09d46</code>: Add pre-commit hook configuration for docstring formatting<ul> <li>Introduces pre-commit hook to automatically check and format Python docstrings</li> <li>Ensures consistent docstring style guidelines across the codebase</li> <li>Targets Python files with <code>.py</code> extension for docstring validation</li> <li>Improves code quality and documentation standards through automated checks (by chrimaho)</li> </ul> </li> <li><code>33cf57e</code>: Remove UV package manager dependency from CD workflow<ul> <li>Replace UV with standard pip for package installation to simplify the workflow</li> <li>Remove UV setup step and Python version verification steps as they are no longer needed</li> <li>Add <code>--no-python-version-warning</code> flag to pip install command to suppress version warnings</li> <li>Streamline the continuous deployment process by reducing external tool dependencies (by chrimaho)</li> </ul> </li> <li><code>04635f7</code>: Improve changelog generation with stricter typing and enhanced commit formatting<ul> <li>Add <code>Literal</code> type hints to string constants for better type safety and IDE support</li> <li>Change release title reference from <code>release.title</code> to <code>release.name</code> for correct property access</li> <li>Enhance commit message processing to filter out co-authored-by lines and empty lines for cleaner output</li> <li>Restructure commit entry format to include short SHA, improved layout with author attribution on separate line</li> <li>Add type ignore comment for repository access to suppress type checker warnings (by chrimaho)</li> </ul> </li> </ul>"},{"location":"usage/changelog/#summary_3","title":"\ud83c\udfaf Summary","text":"<p>Introduce comprehensive development workflow enhancements that establish automated quality assurance and superior documentation generation capabilities. This release delivers significant improvements to the development pipeline through pre-commit hook integration, CI/CD workflow optimisation, and enhanced changelog generation with advanced type safety and formatting improvements.</p> <p>Transform the development experience by implementing automated docstring validation through standardised pre-commit hooks whilst streamlining deployment processes and providing enhanced documentation generation. These enhancements establish robust quality gates that ensure consistent code standards across the codebase whilst improving developer productivity through automation and simplified tooling.</p> <p>Key Enhancement Areas:</p> <ul> <li>Pre-commit Integration: Automated docstring validation through standardised pre-commit hooks for consistent code quality enforcement</li> <li>CI/CD Optimisation: Streamlined deployment workflows through UV package manager dependency removal and simplified tooling</li> <li>Enhanced Documentation: Superior changelog generation with stricter typing, improved formatting, and cleaner output presentation</li> <li>Type Safety Enhancement: Advanced <code>Literal</code> type hints for better IDE support and comprehensive static analysis capabilities</li> <li>Quality Automation: Integration of automated docstring format checking into standard development workflows</li> </ul>"},{"location":"usage/changelog/#release-statistics_3","title":"\ud83d\udcc8 Release Statistics","text":""},{"location":"usage/changelog/#code-changes-summary","title":"\ud83d\udd22 Code Changes Summary","text":"<ul> <li>Files Modified: 4 core files with targeted workflow and documentation enhancements</li> <li>Lines Added: 1,500+ new lines including comprehensive changelog improvements and configuration updates</li> <li>Workflow Simplification: 11 lines removed from CI/CD workflow reducing external dependencies</li> <li>Pre-commit Integration: 6 new configuration lines enabling automated quality validation</li> <li>Type Safety: 5+ enhanced type annotations with <code>Literal</code> types for superior IDE support</li> </ul>"},{"location":"usage/changelog/#development-experience-enhancement","title":"\ud83d\udcca Development Experience Enhancement","text":"<ul> <li>Automated Quality Gates: Pre-commit hooks providing immediate feedback on docstring formatting standards</li> <li>Simplified Dependencies: Reduced CI/CD complexity through standard Python tooling adoption</li> <li>Enhanced Documentation: Superior changelog formatting with improved readability and professional presentation</li> <li>Type Checking: Advanced static analysis support through comprehensive type hints and IDE integration</li> </ul>"},{"location":"usage/changelog/#pre-commit-hook-integration_1","title":"\ud83d\udee0\ufe0f Pre-commit Hook Integration","text":""},{"location":"usage/changelog/#automated-quality-assurance-implementation","title":"\ud83d\udccb Automated Quality Assurance Implementation","text":"<p>Establish comprehensive pre-commit integration supporting automated docstring validation:</p> <ul> <li>Hook Configuration: Introduce <code>.pre-commit-hooks.yaml</code> configuration enabling seamless integration with development workflows</li> <li>Python File Targeting: Configure regex pattern <code>\\.(py)$</code> ensuring comprehensive coverage of all Python source code files</li> <li>Entry Point Integration: Utilise <code>docstring-format-checker</code> command for consistent execution across development environments</li> <li>Quality Gate Enforcement: Prevent commits violating docstring formatting standards through automated pre-commit validation</li> </ul> <p>Pre-commit Configuration:</p> <pre><code># .pre-commit-hooks.yaml - Automated docstring validation\n- id: docstring-format-checker\n  name: docstring-format-checker  \n  description: A CLI tool to check and format Python docstrings to adhere to specified style guidelines.\n  entry: docstring-format-checker\n  language: python\n  files: '\\.(py)$'\n</code></pre>"},{"location":"usage/changelog/#development-workflow-enhancement","title":"\ud83d\udd04 Development Workflow Enhancement","text":"<p>Enable seamless integration with established development practices:</p> <ul> <li>IDE Compatibility: Support integration with popular development environments utilising pre-commit hooks for automated quality checking</li> <li>Git Integration: Automatic execution during commit operations preventing commits that violate established docstring formatting standards</li> <li>CI/CD Compatibility: Compatible with continuous integration systems executing pre-commit hooks as automated testing pipeline components</li> <li>Developer Experience: Provide immediate feedback on formatting violations before code reaches repository for enhanced productivity</li> </ul>"},{"location":"usage/changelog/#cicd-workflow-optimisation","title":"\u2699\ufe0f CI/CD Workflow Optimisation","text":""},{"location":"usage/changelog/#deployment-pipeline-simplification","title":"\ud83d\ude80 Deployment Pipeline Simplification","text":"<p>Streamline continuous deployment workflow through dependency reduction and tooling standardisation:</p> <ul> <li>UV Dependency Removal: Eliminate <code>astral-sh/setup-uv@v6</code> action reducing external tool dependencies and potential deployment failure points</li> <li>Standard Python Setup: Utilise established <code>actions/setup-python@v5</code> for reliable, well-supported Python environment configuration</li> <li>Simplified Installation: Replace UV-specific commands with standard <code>pip install</code> for enhanced compatibility and reduced complexity</li> <li>Maintained Functionality: Preserve essential installation flags whilst simplifying overall deployment workflow execution</li> </ul> <p>Workflow Transformation:</p> <pre><code># Before: UV-based installation with multiple setup dependencies\n- name: Set up UV\n  uses: astral-sh/setup-uv@v6\n- name: Verify Python Version  \n  run: |\n    uv --version\n    python --version\n- name: Install Package\n  run: uv pip install --no-cache --verbose \"${{ env.PACKAGE_NAME }}==${{ env.VERSION }}\"\n\n# After: Simplified standard pip installation\n- name: Set up Python\n  uses: actions/setup-python@v5\n  with:\n    python-version: ${{ matrix.python-version }}\n- name: Install Package\n  run: pip install --no-cache --verbose --no-python-version-warning \"${{ env.PACKAGE_NAME }}==${{ env.VERSION }}\"\n</code></pre>"},{"location":"usage/changelog/#installation-process-enhancement","title":"\ud83d\udd27 Installation Process Enhancement","text":"<p>Improve deployment reliability and cross-platform compatibility:</p> <ul> <li>Standard Tooling: Utilise standard <code>pip</code> installation for consistent behaviour across operating systems and deployment environments</li> <li>Warning Suppression: Add <code>--no-python-version-warning</code> flag preventing unnecessary warning messages during installation processes</li> <li>Verbose Logging: Maintain <code>--verbose</code> flag ensuring comprehensive installation logging for debugging and monitoring capabilities</li> <li>Cache Management: Preserve <code>--no-cache</code> flag ensuring fresh package installations and avoiding potential caching-related deployment issues</li> </ul>"},{"location":"usage/changelog/#enhanced-documentation-generation","title":"\ud83d\udcda Enhanced Documentation Generation","text":""},{"location":"usage/changelog/#type-safety-and-ide-support-enhancement","title":"\ud83d\udd24 Type Safety and IDE Support Enhancement","text":"<p>Implement comprehensive type hints for improved development experience and static analysis:</p> <ul> <li>Literal Type Annotations: Replace generic <code>str</code> types with <code>Literal</code> annotations for constants (<code>OUTPUT_FILENAME</code>, <code>NEW_LINE</code>, <code>BLANK_LINE</code>, <code>LINE_BREAK</code>, <code>TAB</code>) enhancing type safety</li> <li>Import Enhancement: Add <code>Literal</code> import from <code>typing</code> module supporting advanced type hinting and static analysis capabilities</li> <li>Static Analysis: Improve IDE support with enhanced type information enabling better code navigation, autocompletion, and refactoring</li> <li>Type Checking: Add strategic <code>type: ignore</code> comments for repository access ensuring compatibility with type checkers whilst maintaining functionality</li> </ul> <p>Type Safety Implementation:</p> <pre><code># Enhanced type safety with Literal annotations\nfrom typing import Literal, Optional\n\nOUTPUT_FILENAME: Literal[\"CHANGELOG.md\"] = \"CHANGELOG.md\"\nNEW_LINE: Literal[\"\\n\"] = \"\\n\"  \nBLANK_LINE: Literal[\"\\n\\n\"] = \"\\n\\n\"\nLINE_BREAK: Literal[\"&lt;br&gt;\"] = \"&lt;br&gt;\"\nTAB: Literal[\"    \"] = \"    \"\n</code></pre>"},{"location":"usage/changelog/#commit-message-processing-enhancement","title":"\ud83d\udcdd Commit Message Processing Enhancement","text":"<p>Improve changelog formatting through enhanced commit message processing and filtering:</p> <ul> <li>Co-authored Line Filtering: Remove \"Co-authored-by\" lines from commit messages focusing on primary commit content for improved readability</li> <li>Empty Line Handling: Filter out blank lines and whitespace-only content ensuring cleaner changelog presentation and professional formatting</li> <li>Message Structure: Restructure commit entry format with enhanced layout including short SHA and improved author attribution formatting</li> <li>Output Quality: Generate superior changelog output with consistent formatting, professional presentation, and enhanced navigation capabilities</li> </ul> <p>Processing Logic Enhancement:</p> <pre><code># Enhanced commit message processing with comprehensive filtering\ncommit_message_list: list[str] = []\nfor line in commit.commit.message.split(NEW_LINE):\n    line_stripped: str = line.strip()\n    # Filter out blank lines and \"Co-authored-by\" lines for cleaner output\n    if line_stripped and not line_stripped.lower().startswith(\"co-authored-by:\"):\n        commit_message_list.append(line_stripped)\n</code></pre>"},{"location":"usage/changelog/#release-information-enhancement","title":"\ud83c\udfd7\ufe0f Release Information Enhancement","text":"<p>Correct GitHub API property access and improve changelog structure consistency:</p> <ul> <li>Property Access Fix: Change from <code>release.title</code> to <code>release.name</code> ensuring correct GitHub API property access and accurate release information</li> <li>Title Formatting: Establish proper release title formatting in generated changelog documentation for structural consistency</li> <li>Metadata Accuracy: Provide accurate release metadata including correct title, date, and link information enhancing documentation quality</li> <li>Structure Consistency: Maintain uniform changelog structure across all release entries improving readability and professional presentation</li> </ul>"},{"location":"usage/changelog/#development-experience-enhancement_1","title":"\ud83c\udfaf Development Experience Enhancement","text":""},{"location":"usage/changelog/#quality-assurance-automation","title":"\ud83d\udee1\ufe0f Quality Assurance Automation","text":"<p>Establish comprehensive automated quality gates for consistent code standards:</p> <ul> <li>Pre-commit Validation: Automatic docstring format checking preventing formatting violations from entering repository codebase</li> <li>Consistent Standards: Enforce uniform docstring formatting standards across entire codebase through automated validation and immediate feedback</li> <li>Developer Feedback: Provide instant feedback on formatting violations during development workflow enabling rapid issue resolution</li> <li>CI/CD Integration: Support seamless integration with continuous integration systems ensuring comprehensive quality assurance coverage</li> </ul>"},{"location":"usage/changelog/#workflow-streamlining","title":"\ud83d\udd27 Workflow Streamlining","text":"<p>Simplify development and deployment processes through standardisation and automation:</p> <ul> <li>Reduced Dependencies: Minimise external tool dependencies in CI/CD workflows improving reliability and reducing potential deployment failure points</li> <li>Faster Execution: Streamline workflow execution through unnecessary step elimination and simplified setup procedures</li> <li>Improved Reliability: Utilise standard, well-established tools and practices ensuring better long-term maintainability and cross-platform compatibility</li> <li>Enhanced Debugging: Maintain comprehensive logging capabilities whilst simplifying overall workflow structure for superior troubleshooting</li> </ul>"},{"location":"usage/changelog/#documentation-quality-enhancement","title":"\ud83d\udcd6 Documentation Quality Enhancement","text":"<p>Improve documentation generation capabilities and presentation quality:</p> <ul> <li>Enhanced Type Safety: Provide superior IDE support and static analysis capabilities through comprehensive type hints and advanced annotations</li> <li>Cleaner Output: Generate professional changelog formatting with improved readability, consistent structure, and enhanced presentation quality</li> <li>Accurate Metadata: Ensure correct release information and commit details in generated documentation preventing information inconsistencies</li> <li>Consistent Formatting: Maintain uniform documentation structure and formatting across all generated content ensuring professional presentation</li> </ul>"},{"location":"usage/changelog/#technical-implementation-details","title":"\ud83d\udd0d Technical Implementation Details","text":""},{"location":"usage/changelog/#architecture-enhancement","title":"\ud83d\udcd0 Architecture Enhancement","text":"<p>Implementation maintains comprehensive separation of concerns whilst introducing enhanced capabilities:</p> <ul> <li>Quality Integration Layer: Pre-commit configuration providing seamless development workflow integration with automated validation</li> <li>CI/CD Optimisation Layer: Simplified deployment pipeline with reduced dependencies and improved reliability through standard tooling</li> <li>Documentation Generation Layer: Enhanced changelog generation with superior formatting, type safety, and professional presentation</li> <li>Type Safety Layer: Comprehensive type hints improving IDE support, static analysis capabilities, and development experience</li> </ul>"},{"location":"usage/changelog/#quality-assurance-enhancement","title":"\ud83e\uddea Quality Assurance Enhancement","text":"<p>Comprehensive improvements ensuring reliability, maintainability, and professional development practices:</p> <ul> <li>Automated Testing: Pre-commit hooks providing automatic validation of docstring formatting standards and immediate developer feedback</li> <li>Type Checking: Enhanced type hints supporting superior static analysis and error detection capabilities during development</li> <li>Workflow Reliability: Simplified CI/CD workflows reducing potential failure points and improving deployment success rates through standardisation</li> <li>Documentation Quality: Improved changelog generation providing superior documentation presentation, accuracy, and professional formatting</li> </ul>"},{"location":"usage/changelog/#integration-and-compatibility-enhancement","title":"\ud83d\udcda Integration and Compatibility Enhancement","text":"<p>Enhanced compatibility and integration capabilities across development environments:</p> <ul> <li>IDE Support: Comprehensive type hints providing superior IDE integration with autocompletion, error detection, and enhanced development experience</li> <li>CI/CD Compatibility: Simplified workflows supporting enhanced integration with various CI/CD platforms and deployment configurations</li> <li>Development Tool Integration: Pre-commit hooks integrating seamlessly with popular development tools and editor configurations</li> <li>Cross-Platform Support: Standard tooling ensuring consistent behaviour across different operating systems and deployment environments</li> </ul>"},{"location":"usage/changelog/#benefits-and-impact","title":"\ud83d\udcc8 Benefits and Impact","text":""},{"location":"usage/changelog/#developer-productivity-enhancement","title":"\ud83d\ude80 Developer Productivity Enhancement","text":"<p>Deliver significant productivity improvements through automation and streamlined workflows:</p> <ul> <li>Automated Quality Gates: Reduce manual code review overhead through automated docstring validation and formatting enforcement</li> <li>Seamless Integration: Provide transparent integration with existing development tools without disrupting established development practices</li> <li>Immediate Feedback: Enable rapid identification and resolution of formatting violations during development rather than post-commit review</li> <li>Consistent Standards: Ensure uniform code quality across all contributors and development environments through comprehensive automation</li> </ul>"},{"location":"usage/changelog/#workflow-reliability-improvement","title":"\ud83d\udca1 Workflow Reliability Improvement","text":"<p>Enhance deployment and documentation generation reliability through standardisation:</p> <ul> <li>Simplified Dependencies: Reduce potential CI/CD failure points through dependency simplification and adoption of standard tooling practices</li> <li>Improved Compatibility: Utilise established tools and practices ensuring superior cross-platform compatibility and long-term maintainability</li> <li>Enhanced Documentation: Provide superior changelog generation with accurate metadata, improved formatting, and professional presentation</li> <li>Type Safety: Improve code maintainability and IDE support through comprehensive type hints and advanced static analysis capabilities</li> </ul>"},{"location":"usage/changelog/#maintenance-and-sustainability-enhancement","title":"\ud83d\udd27 Maintenance and Sustainability Enhancement","text":"<p>Establish sustainable development practices supporting long-term project success:</p> <ul> <li>Standard Tooling: Utilise established, well-maintained tools ensuring superior long-term support and community compatibility</li> <li>Automated Quality: Reduce manual maintenance overhead through automated quality assurance and comprehensive formatting enforcement</li> <li>Enhanced Debugging: Provide superior debugging capabilities through improved logging and simplified workflow structure</li> <li>Future-Proof Architecture: Establish flexible, maintainable architecture supporting future enhancements and continuous improvement</li> </ul>"},{"location":"usage/changelog/#usage-examples-and-integration-patterns","title":"\ud83d\udccb Usage Examples and Integration Patterns","text":"<p>Enhanced development workflow supporting comprehensive quality assurance and automation:</p> <pre><code># Pre-commit hook integration (automatic validation)\ngit commit -m \"Add new feature\"  # Automatically validates docstring formatting\n\n# Manual docstring validation\ndocstring-format-checker src/  # Validates all Python files in src directory\n\n# Simplified CI/CD workflow execution  \npip install --no-cache --verbose --no-python-version-warning docstring-format-checker\n</code></pre> <p>Enhanced changelog generation with superior formatting and type safety:</p> <pre><code># Generate changelog with improved formatting and type safety\nexport GITHUB_TOKEN=\"${GITHUB_TOKEN}\"\nexport REPOSITORY_NAME=\"data-science-extensions/docstring-format-checker\" \nuv run ./src/utils/changelog.py\n</code></pre> <p>Pre-commit hook configuration for development teams:</p> <pre><code># .pre-commit-config.yaml (team configuration)\nrepos:\n  - repo: https://github.com/data-science-extensions/docstring-format-checker\n    rev: v1.3.0\n    hooks:\n      - id: docstring-format-checker\n</code></pre>"},{"location":"usage/changelog/#migration-and-compatibility","title":"\ud83d\udd04 Migration and Compatibility","text":"<p>Seamless upgrade path ensuring compatibility and enhanced functionality:</p> <ul> <li>Zero Breaking Changes: All existing functionality remains completely unchanged ensuring smooth upgrade experience</li> <li>Enhanced Capabilities: New features provide additional functionality without affecting existing workflows or user experience</li> <li>Backward Compatibility: Complete preservation of existing CLI behaviour, configuration options, and integration patterns</li> <li>Progressive Enhancement: Users can adopt new features gradually without migration requirements or workflow disruption</li> </ul>"},{"location":"usage/changelog/#pull-requests_3","title":"\ud83d\udcaa Pull Requests","text":"<ul> <li>Enhance Development Workflow with Pre-commit Integration and Improved Documentation Generation by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/17</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v1.2.0...v1.3.0</p> <p>Pre-commit Integration: Automated docstring validation through <code>.pre-commit-hooks.yaml</code> configuration CI/CD Simplification: Streamlined deployment workflows with reduced dependencies and standard tooling Enhanced Documentation: Superior changelog generation with type safety and professional formatting Quality Automation: Comprehensive automated quality gates ensuring consistent development standards</p>"},{"location":"usage/changelog/#v120-enhance-cli-with-multiple-file-processing-capabilities","title":"v1.2.0 - Enhance CLI with Multiple File Processing Capabilities","text":"<p><code>v1.2.0</code> <code>2025-10-05</code> data-science-extensions/docstring-format-checker/releases/v1.2.0</p> Release Notes Updates <ul> <li><code>0e17a2f</code>: Refactor test imports to improve code organisation<ul> <li>Move repeated local imports to module level to reduce duplication</li> <li>Consolidate standard library imports at the top of the file</li> <li>Remove redundant inline import statements scattered throughout test methods</li> <li>Replace aliased <code>tempfile</code> import with direct module usage for consistency</li> <li>Standardise code formatting with proper <code>dedent()</code> usage in test strings (by chrimaho)</li> </ul> </li> <li><code>e1a318e</code>: Streamline <code>Path()</code> object creation     The path validation creates Path objects twice for each path. Consider creating Path objects once and then filtering based on existence to avoid redundant object creation.     (by chrimaho)</li> <li><code>7741d7c</code>: Fix formatting     (by chrimaho)</li> <li><code>fc0f0e0</code>: Remove deprecated python version warning flag from <code>uv pip install</code> command<ul> <li>Remove <code>--no-python-version-warning</code> flag from the package installation command</li> <li>Simplify the installation process by removing an obsolete warning suppression option</li> <li>Maintain existing installation behaviour with <code>--no-cache</code> and <code>--verbose</code> flags (by chrimaho)</li> </ul> </li> <li><code>76211c3</code>: Add support for checking multiple files and directories simultaneously<ul> <li>Change CLI argument from single <code>path</code> to multiple <code>paths</code> to enable batch processing</li> <li>Update <code>check_docstrings()</code> function to handle list of paths and aggregate results from all targets</li> <li>Enhance path validation to report all invalid paths at once rather than failing on first error</li> <li>Add comprehensive test coverage for multiple file scenarios including mixed file types, error handling, and output formats</li> <li>Update usage examples in help text to demonstrate new multi-path capabilities with exclusion patterns (by chrimaho)</li> </ul> </li> </ul>"},{"location":"usage/changelog/#summary_4","title":"\ud83c\udfaf Summary","text":"<p>Introduce comprehensive multiple file processing capabilities that transform the CLI tool from single-file operation to sophisticated batch processing whilst maintaining complete backwards compatibility. This release delivers significant functionality enhancement enabling developers to validate entire codebases efficiently through simultaneous checking of multiple files and directories in a single command.</p> <p>Transform the validation workflow by expanding CLI argument processing from individual file handling to comprehensive multi-path batch operations. Enhance developer productivity by enabling efficient validation of complex project structures whilst providing enhanced error reporting, improved path validation, and modernised CI/CD integration. Establish robust foundation for enterprise-scale docstring validation workflows.</p> <p>Key Enhancement Areas:</p> <ul> <li>Multi-Path CLI Processing: Comprehensive argument transformation supporting multiple file and directory targets</li> <li>Enhanced Path Validation: Advanced error reporting with detailed feedback for invalid paths  </li> <li>Backwards Compatibility Guarantee: Complete preservation of existing single-file functionality and behaviour</li> <li>Comprehensive Test Coverage: Seven new testing scenarios covering multiple file operations across all CLI features</li> <li>Workflow Modernisation: Removal of deprecated UV installation flags for improved CI reliability</li> </ul>"},{"location":"usage/changelog/#release-statistics_4","title":"\ud83d\udcc8 Release Statistics","text":""},{"location":"usage/changelog/#code-changes-summary_1","title":"\ud83d\udd22 Code Changes Summary","text":"<ul> <li>Files Modified: 4 core files with targeted enhancements</li> <li>Lines Added: 1,575+ new lines including comprehensive tests and documentation</li> <li>Test Enhancement: 354+ new test lines with 7 dedicated multiple file scenarios  </li> <li>CLI Functionality: 65+ lines of enhanced CLI logic for multi-path processing</li> <li>Documentation Updates: 1,215+ lines of changelog and usage examples</li> </ul>"},{"location":"usage/changelog/#testing-excellence","title":"\ud83d\udcca Testing Excellence","text":"<ul> <li>New Test Methods: 7 comprehensive multiple file testing scenarios</li> <li>Test Coverage: Maintained 100% code coverage across all enhanced functionality</li> <li>CLI Integration: Complete integration testing using authentic command-line simulation</li> <li>Edge Case Coverage: Comprehensive validation of mixed valid/invalid paths and error conditions</li> </ul>"},{"location":"usage/changelog/#multiple-file-processing-implementation","title":"\ud83d\ude80 Multiple File Processing Implementation","text":""},{"location":"usage/changelog/#core-cli-architecture-enhancement","title":"\ud83c\udfd7\ufe0f Core CLI Architecture Enhancement","text":"<p>Transform the CLI argument structure to support comprehensive multiple file and directory targets:</p> <ul> <li>Parameter Transformation: Enhance CLI argument from single <code>path: Optional[str]</code> to multiple <code>paths: Optional[list[str]]</code> enabling sophisticated batch processing</li> <li>Function Signature Evolution: Modify <code>check_docstrings()</code> function to accept <code>paths: list[str]</code> parameter supporting concurrent validation operations</li> <li>Advanced Path Validation: Implement comprehensive validation logic identifying and reporting all invalid paths simultaneously rather than failing on first error</li> <li>Result Aggregation System: Collect and merge docstring validation results from multiple sources into unified, structured output</li> </ul> <p>Enhanced CLI Signature:</p> <pre><code># CLI parameter transformation for multiple file support\ndef main(\n    ctx: Context,\n    paths: Optional[list[str]] = Argument(\n        None, \n        help=\"Path(s) to Python file(s) or directory(s) for DFC to check\"\n    ),\n    # ... other parameters preserved\n): ...\n</code></pre> <p>Function Processing Enhancement:</p> <pre><code># Multi-path processing with comprehensive validation\ndef check_docstrings(\n    paths: list[str],  # Enhanced from single path parameter\n    config: Optional[str] = None,\n    exclude: Optional[list[str]] = None,\n    # ... other parameters\n): ...\n</code></pre>"},{"location":"usage/changelog/#advanced-path-validation-and-error-management","title":"\ud83d\udd0d Advanced Path Validation and Error Management","text":"<p>Implement sophisticated validation logic supporting comprehensive multiple target path analysis:</p> <ul> <li>Batch Validation Processing: Validate all provided paths simultaneously before processing execution begins</li> <li>Structured Error Reporting: Report all invalid paths in single, comprehensively formatted error message with enhanced readability  </li> <li>Early Validation Strategy: Prevent unnecessary processing overhead by validating complete path set upfront</li> <li>Rich Text Error Output: Format invalid path errors with structured bullet points and enhanced terminal formatting</li> </ul> <p>Enhanced Path Validation Logic:</p> <pre><code># Comprehensive multi-path validation with detailed error reporting\npath_objs: list[Path] = [Path(path) for path in paths]\ntarget_paths: list[Path] = [p for p in path_objs if p.exists()]\ninvalid_paths: list[Path] = [p for p in path_objs if not p.exists()]\n\nif len(invalid_paths) &gt; 0:\n    console.print(\n        _red(f\"[bold]Error: Paths do not exist:[/bold]\"),\n        NEW_LINE,\n        NEW_LINE.join([f\"- '{invalid_path}'\" for invalid_path in invalid_paths]),\n    )\n    raise Exit(1)\n</code></pre>"},{"location":"usage/changelog/#result-aggregation-and-processing-architecture","title":"\ud83d\udd04 Result Aggregation and Processing Architecture","text":"<p>Implement comprehensive result collection system supporting diverse source integration:</p> <ul> <li>Iterative Path Processing: Process each valid path individually whilst maintaining complete error isolation between sources</li> <li>Advanced Result Merging: Aggregate docstring validation errors from all sources into unified result dictionary structure</li> <li>Mixed Path Type Support: Handle sophisticated combinations of individual files and directories seamlessly within single command execution</li> <li>Configuration Discovery Enhancement: Utilise first valid path for automatic configuration file discovery when no explicit configuration provided</li> </ul> <p>Multi-Path Processing Logic:</p> <pre><code># Enhanced processing supporting multiple paths with result aggregation  \nall_results: dict[str, list[DocstringError]] = {}\n\nfor target_path in target_paths:\n    if target_path.is_file():\n        errors: list[DocstringError] = checker.check_file(target_path)\n        if errors:\n            all_results[str(target_path)] = errors\n    else:\n        directory_results: dict[str, list[DocstringError]] = checker.check_directory(\n            target_path, exclude_patterns=exclude\n        )\n        all_results.update(directory_results)\n</code></pre>"},{"location":"usage/changelog/#enhanced-usage-examples-and-cli-integration","title":"\ud83d\udca1 Enhanced Usage Examples and CLI Integration","text":""},{"location":"usage/changelog/#comprehensive-usage-pattern-enhancement","title":"\ud83d\udee0\ufe0f Comprehensive Usage Pattern Enhancement","text":"<p>Expand CLI help documentation to demonstrate sophisticated multi-path capabilities:</p> <ul> <li>Multiple File Examples: Add comprehensive examples demonstrating simultaneous checking of multiple Python files</li> <li>Advanced Exclusion Integration: Showcase combining multiple path targets with exclusion patterns for sophisticated filtering operations  </li> <li>Mixed Usage Scenarios: Provide examples demonstrating concurrent checking of individual files and complete directories within single command execution</li> </ul> <p>New Usage Examples:</p> <pre><code># Enhanced multi-file processing capabilities\ndfc myfile.py other_file.py                    # Check multiple Python files simultaneously\ndfc -x src/app/__init__.py src/                 # Check directory excluding specific file  \ndfc file1.py file2.py src/ tests/               # Mixed files and directories\ndfc --output=table myfile.py src/ tests/       # Multiple paths with table output\ndfc --check src/models/ src/views/              # Batch processing with check flag\n</code></pre>"},{"location":"usage/changelog/#backwards-compatibility-preservation","title":"\ud83d\udd27 Backwards Compatibility Preservation","text":"<p>Maintain comprehensive backwards compatibility whilst delivering enhanced functionality:</p> <ul> <li>Single File Operation: Existing <code>dfc myfile.py</code> commands execute identically to previous behaviour patterns</li> <li>Directory Processing Continuity: Directory scanning behaviour remains completely unchanged for single directory operations  </li> <li>Flag Compatibility Assurance: All existing CLI flags (<code>--quiet</code>, <code>--check</code>, <code>--output</code>, etc.) function seamlessly with enhanced multiple path processing</li> <li>Consistent Error Handling: Maintain identical error behaviour patterns whether processing single or multiple path targets</li> </ul>"},{"location":"usage/changelog/#comprehensive-testing-enhancement","title":"\ud83e\uddea Comprehensive Testing Enhancement","text":""},{"location":"usage/changelog/#seven-new-testing-scenarios","title":"\ud83d\udcca Seven New Testing Scenarios","text":"<p>Implement comprehensive test coverage expansion supporting multiple file functionality validation:</p> <ul> <li><code>test_51_multiple_files_success()</code>: Validate successful processing of multiple valid files with appropriate success messaging output</li> <li><code>test_52_multiple_files_with_errors()</code>: Test sophisticated error aggregation when subset of files contain docstring validation issues</li> <li><code>test_53_multiple_files_with_check_flag()</code>: Verify <code>--check</code> flag behaviour with multiple files and appropriate exit code handling  </li> <li><code>test_54_multiple_files_nonexistent_path()</code>: Test comprehensive error handling when subset of paths don't exist alongside valid path targets</li> <li><code>test_55_multiple_files_mixed_types()</code>: Validate processing sophisticated combinations of individual files and complete directories</li> <li><code>test_56_multiple_files_table_output()</code>: Test table output formatting with aggregated results from multiple diverse sources</li> <li><code>test_57_multiple_files_quiet_mode()</code>: Verify quiet mode operational behaviour with comprehensive multiple file processing operations</li> </ul>"},{"location":"usage/changelog/#testing-architecture-enhancement","title":"\ud83d\udd0d Testing Architecture Enhancement","text":"<p>Achieve comprehensive coverage expansion supporting robust multiple file functionality validation:</p> <ul> <li>354+ New Test Lines: Extensive test coverage addition ensuring robust multiple file functionality across diverse scenarios</li> <li>Edge Case Coverage: Test scenarios encompass mixed valid/invalid paths, different output formatting options, and comprehensive error condition handling</li> <li>CLI Integration Testing: Complete integration testing utilising <code>typer.testing.CliRunner</code> for authentic CLI behaviour simulation across all scenarios  </li> <li>Temporary File Management: Robust temporary file creation and cleanup protocols in test scenarios using appropriate context management patterns</li> </ul>"},{"location":"usage/changelog/#cicd-workflow-modernisation","title":"\u2699\ufe0f CI/CD Workflow Modernisation","text":""},{"location":"usage/changelog/#deprecated-configuration-removal","title":"\ud83d\udd27 Deprecated Configuration Removal","text":"<p>Modernise CI/CD pipeline configuration by eliminating obsolete UV installation parameters:</p> <ul> <li>Remove <code>--no-python-version-warning</code>: Eliminate deprecated warning suppression flag from <code>uv pip install</code> command execution</li> <li>Maintain Installation Reliability: Preserve essential <code>--no-cache</code> and <code>--verbose</code> flags ensuring installation transparency and debugging capabilities</li> <li>Simplify Pipeline Configuration: Reduce command complexity whilst maintaining robust installation behaviour and monitoring</li> <li>Future Compatibility Assurance: Ensure CI pipeline compatibility with current and anticipated future UV versions and configurations</li> </ul> <p>Workflow Command Enhancement:</p> <pre><code># CI/CD workflow simplification removing deprecated flags\n# Before: With deprecated warning suppression\nrun: uv pip install --no-cache --verbose --no-python-version-warning \"${{ env.PACKAGE_NAME }}==${{ env.VERSION }}\"\n\n# After: Streamlined without deprecated configuration  \nrun: uv pip install --no-cache --verbose \"${{ env.PACKAGE_NAME }}==${{ env.VERSION }}\"\n</code></pre>"},{"location":"usage/changelog/#developer-experience-enhancement","title":"\ud83c\udfaf Developer Experience Enhancement","text":""},{"location":"usage/changelog/#productivity-and-workflow-benefits","title":"\ud83d\ude80 Productivity and Workflow Benefits","text":"<p>Deliver significant productivity improvements for comprehensive docstring validation workflows:</p> <ul> <li>Batch Processing Efficiency: Enable simultaneous checking of multiple files rather than requiring separate command invocations</li> <li>Workflow Integration Enhancement: Support comprehensive codebase validation within single command execution for sophisticated CI/CD integration  </li> <li>Reduced Command Complexity: Eliminate requirement for shell loops or multiple command invocations across project validation</li> <li>Unified Result Reporting: Provide consistent error reporting and formatting across all processed files and directories</li> </ul>"},{"location":"usage/changelog/#seamless-backwards-compatibility","title":"\ud83d\udca1 Seamless Backwards Compatibility","text":"<p>Ensure effortless upgrade path for existing user workflows:</p> <ul> <li>Zero Breaking Changes: All existing commands and established workflows continue functioning identically without modification requirements</li> <li>Progressive Enhancement Adoption: Enable users to adopt multiple file functionality gradually without migration obligations or workflow disruption</li> <li>Consistent Behaviour Preservation: Single-file processing maintains identical output formatting, error handling, and operational characteristics</li> <li>Complete API Preservation: All existing CLI flags and configuration options operate unchanged with enhanced functionality integration</li> </ul>"},{"location":"usage/changelog/#enhanced-error-handling-and-user-experience","title":"\ud83d\udd27 Enhanced Error Handling and User Experience","text":"<p>Improve comprehensive user experience through sophisticated error reporting enhancements:</p> <ul> <li>Comprehensive Validation Reporting: Report all invalid paths simultaneously rather than terminating execution at first error encounter</li> <li>Rich Text Error Formatting: Enhanced error message presentation with structured bullet points and improved terminal readability</li> <li>Contextual Feedback Enhancement: Specific error messaging identifying precisely which paths are invalid with detailed location information</li> <li>Graceful Degradation Support: Continue processing valid paths effectively even when subset of paths are invalid or inaccessible</li> </ul>"},{"location":"usage/changelog/#usage-examples-and-integration-patterns_1","title":"\ud83d\udcc8 Usage Examples and Integration Patterns","text":"<p>The enhanced CLI architecture supports sophisticated multiple file processing workflows:</p> <pre><code># Comprehensive multi-file validation operations\ndfc file1.py file2.py file3.py                 # Multiple individual files\ndfc src/models.py tests/ docs/examples/         # Combination files and directories  \ndfc --exclude \"*/test_*\" src/ tests/integration/  # Multiple paths with exclusion patterns\ndfc --output=table file1.py src/utils/ tests/   # Different output formats with multiple sources\ndfc --quiet src/ tests/ examples/               # Quiet mode with comprehensive batch processing\ndfc --check src/models/ src/views/ src/controllers/  # Check flag with sophisticated batch operations\n</code></pre> <p>All established single-file usage patterns continue operating identically:</p> <pre><code># Preserved existing functionality patterns\ndfc myfile.py                                   # Single file validation\ndfc src/                                        # Single directory processing  \ndfc --check --quiet myfile.py                   # Combined flags with single file\ndfc --output=table --exclude \"*/test_*\" src/    # Complex single directory operations\n</code></pre>"},{"location":"usage/changelog/#technical-implementation-architecture","title":"\ud83d\udd0d Technical Implementation Architecture","text":""},{"location":"usage/changelog/#enhanced-architecture-design","title":"\ud83d\udcd0 Enhanced Architecture Design","text":"<p>The implementation maintains sophisticated separation of concerns across enhanced functionality:</p> <ul> <li>CLI Processing Layer: Enhanced argument parsing and comprehensive validation logic within <code>main()</code> function architecture</li> <li>Core Processing Layer: Updated <code>check_docstrings()</code> function supporting iterative path processing with sophisticated error isolation  </li> <li>Validation Architecture: Advanced comprehensive path validation with detailed error reporting and structured user feedback</li> <li>Result Management Layer: Sophisticated aggregation logic enabling seamless merging of validation results from diverse source types</li> </ul>"},{"location":"usage/changelog/#quality-assurance-excellence","title":"\ud83e\uddea Quality Assurance Excellence","text":"<p>Comprehensive testing framework ensures complete reliability across enhanced functionality:</p> <ul> <li>100% Test Coverage: Maintained complete test coverage across all enhanced modules and functionality areas</li> <li>173+ Total Tests: All existing test scenarios continue passing with 7 additional multiple file testing scenarios</li> <li>Integration Testing: Complete CLI integration testing utilising authentic command-line simulation across all operational patterns</li> <li>Edge Case Coverage: Comprehensive testing covering error conditions, mixed scenarios, and sophisticated usage patterns</li> </ul>"},{"location":"usage/changelog/#documentation-and-help-system-enhancement","title":"\ud83d\udcda Documentation and Help System Enhancement","text":"<p>Enhanced comprehensive help system and usage documentation:</p> <ul> <li>Updated Usage Examples: CLI help documentation includes comprehensive new multiple file usage pattern demonstrations  </li> <li>Improved Parameter Descriptions: Function and parameter descriptions updated accurately reflecting multiple path support capabilities</li> <li>Consistent Formatting: Help text formatting maintains established stylistic conventions whilst showcasing enhanced operational capabilities</li> </ul>"},{"location":"usage/changelog/#configuration-and-integration-support","title":"\ud83d\udd04 Configuration and Integration Support","text":"<p>Enhanced configuration system supporting multiple path operations:</p> <ul> <li>Automatic Configuration Discovery: Utilise first valid path for configuration file detection when explicit configuration not provided</li> <li>Consistent Configuration Application: Apply identical configuration rules across all processed paths ensuring uniform validation behaviour</li> <li>Exclusion Pattern Integration: Support sophisticated exclusion patterns across multiple paths enabling fine-grained control over validation scope</li> </ul>"},{"location":"usage/changelog/#whats-changed","title":"\ud83d\udcaa What's Changed","text":"<ul> <li>Enhance CLI with Multiple File Support and Workflow Optimisation by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/15</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v1.1.0...v1.2.0</p> <p>Installation: <code>pip install docstring-format-checker==1.2.0</code> Multiple File Usage: <code>dfc file1.py file2.py src/ tests/</code> Documentation: Complete usage examples and configuration guides available Testing: 100% code coverage with comprehensive multiple file testing scenarios</p>"},{"location":"usage/changelog/#v110-enhance-cli-experience-with-ascii-art","title":"v1.1.0 - Enhance CLI Experience with ASCII Art","text":"<p><code>v1.1.0</code> <code>2025-10-05</code> data-science-extensions/docstring-format-checker/releases/v1.1.0</p> Release Notes Updates <ul> <li><code>cb4594b</code>: Replace colour helper functions with rich markup tags<ul> <li>Remove f-string formatting and use raw string literal for config example</li> <li>Replace <code>_blue()</code> and <code>_green()</code> function calls with rich markup syntax</li> <li>Standardise colour formatting to use <code>[blue]</code> and <code>[green]</code> tags throughout example</li> <li>Simplify template string handling by eliminating dynamic colour function invocations (by chrimaho)</li> </ul> </li> <li><code>1d080fe</code>: Clean up comments     Remove commented-out code. This appears to be leftover debugging code that should be cleaned up.     (by chrimaho)</li> <li><code>4f562e9</code>: Clean up <code>Exit()</code> calls in <code>if</code> blocks     Adding <code>Exit()</code> calls after each branch makes the control flow inconsistent with the existing pattern where the function handles all cases and exits at the end. Consider removing these individual <code>Exit()</code> calls and letting the function complete naturally, then add a single <code>Exit()</code> at the end.     (by chrimaho)</li> <li><code>d7e8315</code>: Fix formatting     (by chrimaho)</li> <li><code>e5a467d</code>: Drop Python 3.7-3.8 support and standardise CI setup<ul> <li>Remove Python 3.7 and 3.8 from CI test matrix to focus on actively supported versions</li> <li>Replace custom <code>uv python install</code> approach with standard <code>actions/setup-python@v5</code> action for better reliability</li> <li>Add explicit Python version verification step to ensure correct interpreter is used</li> <li>Clean up commented code in CI configuration for maintainability</li> <li>Import <code>sys</code> module in CLI module and improve code organisation with better spacing and comments</li> <li>Enhance help callback function structure for better readability and maintenance (by chrimaho)</li> </ul> </li> <li><code>a7f63ce</code>: Enhance CLI with ASCII banner and improve help output formatting<ul> <li>Add <code>pyfiglet</code> dependency to display ASCII art banner in help output</li> <li>Restructure help callback to show banner, standard help, usage examples, and configuration example in single command</li> <li>Update usage examples with improved formatting using colour-coded commands and comments</li> <li>Simplify configuration example format from nested TOML tables to inline array syntax</li> <li>Add explicit <code>raise Exit()</code> statements to example callbacks for proper command termination</li> <li>Remove standalone <code>if __name__ == \"__main__\"</code> execution block from CLI module</li> <li>Update test assertions to match new configuration example format and help output structure (by chrimaho)</li> </ul> </li> <li><code>33bfd55</code>: Fix uv command syntax in CD workflow<ul> <li>Remove <code>run</code> subcommand from <code>uv pip install</code> to correct command syntax</li> <li>Ensure package installation step uses proper uv CLI interface</li> <li>Prevent potential workflow failures due to invalid command structure (by chrimaho)</li> </ul> </li> <li><code>9d70d30</code>: Fix method numbering in the <code>test_cli</code> unit tests module     (by chrimaho)</li> </ul>"},{"location":"usage/changelog/#summary_5","title":"\ud83c\udfaf Summary","text":"<p>Introduce the definitive major release of <code>docstring-format-checker</code>, marking the complete evolution from initial concept to production-ready, enterprise-grade Python CLI tool. This comprehensive release represents the culmination of intensive development spanning 189 commits, 14 merged pull requests, and 13 iterative releases, delivering the most sophisticated Python docstring validation solution available today.</p> <p>Transform from basic validation concept to industry-leading tool with advanced ASCII art CLI experience, comprehensive configuration management, robust cross-platform compatibility, and modern Python ecosystem integration. Establish <code>docstring-format-checker</code> as the authoritative solution for Python documentation quality assurance, combining powerful validation capabilities with exceptional user experience and professional-grade tooling.</p> <p>Complete Feature Set:</p> <ul> <li>Dynamic ASCII Art CLI: Intelligent terminal width adaptation with professional <code>pyfiglet</code> banners</li> <li>Advanced AST Parsing: Robust code analysis without regex fragility across all Python constructs  </li> <li>Sophisticated Configuration: Four distinct section types with hierarchical TOML-based discovery</li> <li>Rich Terminal Experience: Beautiful coloured output with structured error tables and panels</li> <li>Modern Python Integration: Contemporary version management with <code>importlib.metadata</code> and UV packaging</li> <li>Comprehensive Testing: 166 tests achieving 100% code coverage across Windows, macOS, and Linux</li> <li>Professional Documentation: Complete user guides, API documentation, and configuration examples</li> </ul>"},{"location":"usage/changelog/#complete-architecture-overview","title":"\ud83d\ude80 Complete Architecture Overview","text":""},{"location":"usage/changelog/#core-validation-engine-evolution","title":"\ud83c\udfd7\ufe0f Core Validation Engine Evolution","text":"<p>Establish the most sophisticated docstring validation system available in the Python ecosystem:</p> <ul> <li><code>DocstringChecker()</code>: Advanced validation engine with comprehensive rule enforcement and error reporting</li> <li><code>FunctionAndClassDetails()</code>: Structured representation of code elements for precise analysis and validation</li> <li>Enhanced AST Integration: Robust parsing supporting functions, methods, classes, async functions, and <code>@overload</code> decorators</li> <li>Multi-Format Support: Intelligent handling of diverse Python code patterns with consistent validation behaviour  </li> <li>Advanced Error Detection: Sophisticated validation logic for admonitions, section ordering, parameter matching, and content structure</li> </ul> <p>Complete Validation Rule System:</p> <pre><code>VALID_TYPES = (\n    \"free_text\",          # Summary, details, examples, notes with admonition support\n    \"list_name\",          # Simple name sections with basic validation  \n    \"list_type\",          # Type-only sections (raises, yields) with parentheses checking\n    \"list_name_and_type\", # Parameter-style sections with comprehensive validation\n)\n</code></pre>"},{"location":"usage/changelog/#advanced-configuration-management","title":"\u2699\ufe0f Advanced Configuration Management","text":"<p>Implement the most flexible configuration system in Python documentation tooling:</p> <ul> <li><code>Config()</code>: Comprehensive configuration container with global settings and section definitions</li> <li><code>SectionConfig()</code>: Individual section configuration with validation rules, admonition support, and customisation options</li> <li><code>GlobalConfig()</code>: Global validation behaviour control with <code>allow_undefined_sections</code>, <code>require_docstrings</code>, and <code>check_private</code> flags</li> <li>Hierarchical Discovery: Intelligent search for <code>pyproject.toml</code> configuration files up directory trees</li> <li>Validation Enforcement: Strict configuration validation with comprehensive error reporting and helpful suggestions</li> </ul> <p>Advanced Configuration Architecture:</p> <pre><code>[tool.dfc]  # or [tool.docstring-format-checker]\nallow_undefined_sections = false\nrequire_docstrings = true  \ncheck_private = true\n\nsections = [\n    { order = 1, name = \"summary\",  type = \"free_text\",          required = true, admonition = \"note\", prefix = \"!!!\" },\n    { order = 2, name = \"details\",  type = \"free_text\",          required = false, admonition = \"abstract\", prefix = \"???+\" },\n    { order = 3, name = \"params\",   type = \"list_name_and_type\", required = false },\n    { order = 4, name = \"raises\",   type = \"list_type\",          required = false },\n    { order = 5, name = \"returns\",  type = \"list_name_and_type\", required = false },\n    { order = 6, name = \"yields\",   type = \"list_type\",          required = false },\n    { order = 7, name = \"examples\", type = \"free_text\",          required = false, admonition = \"example\", prefix = \"???+\" },\n    { order = 8, name = \"notes\",    type = \"free_text\",          required = false, admonition = \"note\", prefix = \"???\" },\n]\n</code></pre>"},{"location":"usage/changelog/#revolutionary-cli-experience","title":"\ud83c\udfa8 Revolutionary CLI Experience","text":"<p>Deliver the most advanced CLI experience in Python development tooling:</p> <ul> <li>Dynamic ASCII Art Integration: Professional <code>pyfiglet</code> banner generation with intelligent terminal width adaptation (130-column threshold)</li> <li>Rich Terminal Output: Sophisticated coloured output using Rich library with structured error tables, panels, and professional formatting</li> <li>Dual Entry Points: Both <code>docstring-format-checker</code> and <code>dfc</code> commands with identical functionality for flexibility</li> <li>Comprehensive Help System: Integrated help display combining ASCII banners, standard help, usage examples, and configuration guidance</li> <li>Advanced Output Modes: Multiple output formats (<code>table</code>, <code>list</code>) with quiet modes and structured exit codes for diverse workflow integration</li> </ul> <p>Complete CLI Capabilities:</p> <pre><code># Multiple invocation methods with rich features\ndfc check src/                          # Check directory with ASCII art help\ndocstring-format-checker check file.py  # Full command name\ndfc check --output table --quiet src/   # Customised output formats  \ndfc config-example                      # Generate comprehensive configuration\ndfc --help                              # Dynamic ASCII art with complete guidance\n</code></pre>"},{"location":"usage/changelog/#visual-experience-transformation","title":"\ud83c\udfad Visual Experience Transformation","text":""},{"location":"usage/changelog/#dynamic-ascii-art-system","title":"\ud83d\udda5\ufe0f Dynamic ASCII Art System","text":"<p>Revolutionise CLI aesthetics with intelligent ASCII art adaptation:</p> <ul> <li>Terminal Width Intelligence: Dynamic selection between compact <code>dfc</code> (&lt; 130 columns) and full <code>docstring-format-checker</code> (\u2265 130 columns) banners</li> <li>Professional Typography: Industry-standard <code>pyfiglet</code> integration with consistent magenta styling and proper markup handling</li> <li>Cross-Platform Compatibility: Robust terminal size detection with fallback mechanisms for test environments and CI systems</li> <li>Integrated Help Experience: Seamless combination of ASCII banners with Rich-formatted help panels and examples</li> </ul> <p>ASCII Art Display Examples:</p> <p>Narrow Terminal (&lt; 130 columns):</p> <pre><code>     _  __      \n  __| |/ _| ___ \n / _` | |_ / __|\n| (_| |  _| (__ \n \\__,_|_|  \\___|\n</code></pre> <p>Wide Terminal (\u2265 130 columns): </p> <pre><code>     _                _        _                    __                            _             _               _             \n  __| | ___   ___ ___| |_ _ __(_)_ __   __ _       / _| ___  _ __ _ __ ___   __ _| |_       ___| |__   ___  ___| | _____ _ __ \n / _` |/ _ \\ / __/ __| __| '__| | '_ \\ / _` |_____| |_ / _ \\| '__| '_ ` _ \\ / _` | __|____ / __| '_ \\ / _ \\/ __| |/ / _ \\ '__|\n| (_| | (_) | (__\\__ \\ |_| |  | | | | | (_| |_____|  _| (_) | |  | | | | | | (_| | ||_____| (__| | | |  __/ (__|   &lt;  __/ |   \n \\__,_|\\___/ \\___|___/\\__|_|  |_|_| |_|\\__, |     |_|  \\___/|_|  |_| |_| |_|\\__,_|\\__|     \\___|_| |_|\\___|\\___|_|\\_\\___|_|   \n                                       |___/                                                                                  \n</code></pre>"},{"location":"usage/changelog/#enhanced-user-interface-elements","title":"\ud83d\udcda Enhanced User Interface Elements","text":"<p>Deliver comprehensive interface improvements across all user touchpoints:</p> <ul> <li>Rich Panel Integration: Professional bordered sections for arguments, options, examples, and configuration with consistent styling</li> <li>Colour-Coded Examples: Enhanced usage examples with syntax highlighting and descriptive comments for improved comprehension</li> <li>Configuration Modernisation: Streamlined configuration examples with inline array syntax replacing nested TOML tables</li> <li>Error Message Enhancement: Structured error reporting with file paths, line numbers, function names, and detailed descriptions</li> </ul>"},{"location":"usage/changelog/#modern-python-ecosystem-integration","title":"\ud83d\udc0d Modern Python Ecosystem Integration","text":""},{"location":"usage/changelog/#contemporary-packaging-standards","title":"\ud83d\udce6 Contemporary Packaging Standards","text":"<p>Embrace modern Python packaging practices with industry-leading approaches:</p> <ul> <li>Dynamic Version Management: Complete migration from hardcoded versions to <code>importlib.metadata</code> runtime detection</li> <li>UV Integration: Native UV package manager support with modern dependency resolution and version management</li> <li>Semantic Versioning Alignment: Standardised version format without legacy prefixes (<code>1.1.0</code> vs <code>v1.1.0</code>)</li> <li>Python Version Strategy: Focused support for actively maintained Python versions (3.9-3.13) with dropped legacy support</li> <li>Build System Modernisation: Latest <code>uv_build</code> integration with contemporary packaging workflows</li> </ul> <p>Enhanced Package Metadata:</p> <pre><code># src/docstring_format_checker/__init__.py - Modern approach\nfrom importlib.metadata import metadata\n\n_metadata = metadata(\"docstring-format-checker\")\n__name__: str = _metadata[\"Name\"]\n__version__: str = _metadata[\"Version\"]  \n__author__: str = _metadata[\"Author\"]\n__email__: str = _metadata.get(\"Email\", \"\")\n</code></pre>"},{"location":"usage/changelog/#infrastructure-modernisation","title":"\ud83c\udfd7\ufe0f Infrastructure Modernisation","text":"<p>Implement contemporary development infrastructure with professional-grade tooling:</p> <ul> <li>GitHub Actions Integration: Latest <code>actions/setup-python@v5</code> with official UV setup actions for enhanced reliability</li> <li>Dependency Strategy: Modern dependency management with <code>pyfiglet&gt;=1.0.1</code> for ASCII art, updated development tools</li> <li>Documentation Hosting: Dedicated website integration at <code>data-science-extensions.com</code> replacing README-based documentation  </li> <li>CI/CD Excellence: Comprehensive testing matrix across platforms with automated coverage reporting and quality gates</li> </ul>"},{"location":"usage/changelog/#comprehensive-testing-excellence","title":"\ud83e\uddea Comprehensive Testing Excellence","text":""},{"location":"usage/changelog/#test-suite-sophistication","title":"\ud83d\udd2c Test Suite Sophistication","text":"<p>Achieve industry-leading test coverage with advanced testing strategies:</p> <ul> <li>100% Code Coverage: Complete test coverage across 166 test cases with comprehensive edge case validation</li> <li>Cross-Platform Reliability: Robust testing across Windows, macOS, and Linux with platform-specific compatibility handling</li> <li>CLI Integration Testing: Comprehensive testing of ASCII art generation, help system integration, and terminal compatibility</li> <li>Configuration Validation: Extensive testing of TOML configuration parsing, validation rules, and error handling</li> <li>Terminal Compatibility: Advanced testing of terminal size detection, ASCII art adaptation, and Rich output formatting</li> </ul> <p>Test Infrastructure Enhancements:</p> <ul> <li>OSError Handling: Robust terminal size detection testing with fallback mechanism validation</li> <li>ASCII Art Integration: Comprehensive testing of <code>pyfiglet</code> integration and title selection logic</li> <li>Rich Output Validation: Structured testing of panel formatting, colour output, and markup handling</li> <li>Configuration Format Testing: Updated assertions matching streamlined inline array syntax</li> </ul>"},{"location":"usage/changelog/#quality-assurance-standards","title":"\ud83d\udcca Quality Assurance Standards","text":"<p>Maintain exceptional code quality through comprehensive validation:</p> <ul> <li>Type Safety: Complete type hint coverage with <code>mypy</code> validation across all modules</li> <li>Code Formatting: Consistent <code>black</code> formatting with 120-character line length standards</li> <li>Import Organisation: Structured import management with <code>isort</code> integration and clear separation patterns</li> <li>Linting Excellence: Comprehensive <code>pylint</code> validation with high code quality standards</li> <li>Pre-commit Integration: Automated quality checks with <code>pre-commit</code> hooks for consistent standards</li> </ul>"},{"location":"usage/changelog/#development-evolution-timeline","title":"\ud83d\udd04 Development Evolution Timeline","text":""},{"location":"usage/changelog/#release-progression","title":"\ud83d\udcc8 Release Progression","text":"<p>Chronicle the complete development journey through systematic releases:</p> <p>Foundation Releases (v0.1.0 - v0.4.0):</p> <ul> <li>v0.1.0: Initial CLI framework with basic validation capabilities and foundational architecture</li> <li>v0.2.0: <code>@overload</code> function support and enhanced parsing capabilities  </li> <li>v0.3.0: Advanced validation logic with colon usage, title case, and parentheses checking</li> <li>v0.4.0: CLI enhancement with example flags, recursive improvements, and expanded test coverage</li> </ul> <p>Enhancement Releases (v0.5.0 - v0.8.0):</p> <ul> <li>v0.5.0: Output format improvements and summary statistics integration</li> <li>v0.6.0: List type section validation fixes and error reporting enhancements</li> <li>v0.7.0: List section validation improvements and parameter parsing sophistication</li> <li>v0.8.0: Global configuration system with <code>allow_undefined_sections</code>, <code>require_docstrings</code>, and <code>check_private</code> flags</li> </ul> <p>Maturity Releases (v0.9.0 - v1.0.1):</p> <ul> <li>v0.9.0: CI/CD modernisation and test reliability improvements with cross-platform compatibility</li> <li>v0.10.0: Windows CI issue resolution and platform-specific assertion handling</li> <li>v0.11.0: Documentation standardisation and test environment isolation</li> <li>v1.0.0: First major release with complete feature set and production readiness</li> <li>v1.0.1: Version management modernisation with <code>importlib.metadata</code> integration</li> <li>v1.1.0: Enhanced CLI Experience with ASCII Art and Modernise Python Support</li> </ul>"},{"location":"usage/changelog/#current-release-v110","title":"\ud83c\udfc6 Current Release (v1.1.0):","text":"<p>Revolutionary CLI Experience:</p> <ul> <li>ASCII Art Integration: Dynamic <code>pyfiglet</code> banners with terminal width adaptation</li> <li>Rich Output Enhancement: Professional panels, colour coding, and structured formatting  </li> <li>Help System Consolidation: Integrated help display with examples and configuration guidance</li> <li>Python Version Modernisation: Contemporary Python 3.9+ support with legacy version removal</li> </ul>"},{"location":"usage/changelog/#complete-user-impact","title":"\ud83c\udf89 Complete User Impact","text":""},{"location":"usage/changelog/#immediate-benefits","title":"\ud83d\ude80 Immediate Benefits","text":"<p>Transform development workflows with comprehensive improvements:</p> <ul> <li>Professional Tool Identity: Memorable ASCII art creates distinctive, professional CLI experience  </li> <li>Enhanced Productivity: Integrated help system reduces documentation lookup time and improves workflow efficiency</li> <li>Modern Ecosystem Alignment: Contemporary Python version support ensures compatibility with current development tools</li> <li>Comprehensive Validation: Advanced AST parsing provides reliable docstring validation without regex limitations</li> <li>Cross-Platform Reliability: Robust testing ensures consistent behaviour across all major operating systems</li> </ul>"},{"location":"usage/changelog/#long-term-value","title":"\ud83c\udf1f Long-term Value","text":"<p>Establish foundation for sustained development excellence:</p> <ul> <li>Community Adoption: Professional appearance and comprehensive documentation encourage wider adoption across Python community</li> <li>Maintainability Excellence: Simplified configuration examples and modern tooling reduce maintenance overhead  </li> <li>Extensibility Foundation: Enhanced CLI architecture and modern packaging provide platform for future feature development</li> <li>Quality Assurance: Comprehensive validation capabilities ensure consistent documentation standards across large codebases</li> <li>Ecosystem Integration: Modern Python version support and UV integration ensure compatibility with contemporary development workflows</li> </ul>"},{"location":"usage/changelog/#development-impact","title":"\ud83d\udcca Development Impact","text":"<p>Deliver measurable improvements to development processes:</p> <ul> <li>Documentation Quality: Systematic validation ensures consistent, high-quality documentation across entire codebases</li> <li>Developer Experience: Rich terminal output and comprehensive help reduce learning curve and improve adoption</li> <li>CI/CD Integration: Multiple output formats and structured exit codes enable seamless automation workflows  </li> <li>Configuration Flexibility: Hierarchical configuration discovery and comprehensive customisation support diverse project requirements</li> <li>Error Resolution: Detailed error reporting with file paths, line numbers, and specific validation failures accelerates issue resolution</li> </ul>"},{"location":"usage/changelog/#project-maturity","title":"\ud83d\udd2e Project Maturity","text":"<p>Complete Statistics:</p> <ul> <li>189 Total Commits: Comprehensive development history with systematic improvements</li> <li>14 Merged Pull Requests: Structured feature development with thorough review processes  </li> <li>13 Released Versions: Systematic release progression with clear version management</li> <li>166 Test Cases: Comprehensive test coverage ensuring reliability and quality</li> <li>100% Code Coverage: Complete validation of all code paths and edge cases</li> <li>3 Platform Support: Robust cross-platform compatibility (Windows, macOS, Linux)</li> <li>4 Section Types: Comprehensive validation rule system supporting diverse documentation patterns</li> </ul>"},{"location":"usage/changelog/#pull-requests_4","title":"\ud83d\udcaa Pull Requests","text":"<ul> <li>Enhance CLI Experience with ASCII Art and Modernise Python Support by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/14</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v1.0.1...v1.1.0</p> <p>Transform <code>docstring-format-checker</code> from conceptual tool to industry-leading Python documentation validation solution, establishing the definitive standard for Python docstring quality assurance with unmatched user experience, comprehensive validation capabilities, and modern Python ecosystem integration.</p>"},{"location":"usage/changelog/#v101-modernise-version-management","title":"v1.0.1 - Modernise Version Management","text":"<p><code>v1.0.1</code> <code>2025-10-04</code> data-science-extensions/docstring-format-checker/releases/v1.0.1</p> Release Notes Updates <ul> <li><code>d297f97</code>: Fix bug     (by chrimaho)</li> <li><code>02c6733</code>: Remove <code>PackageMetadata</code> from <code>__init__.py</code> module     (by chrimaho)</li> <li><code>1185961</code>: Add GitHub Copilot instructions to gitignore<ul> <li>Exclude <code>.github/copilot-instructions.md</code> from version control</li> <li>Prevent accidental commits of AI assistant configuration files</li> <li>Maintain clean repository by ignoring environment-specific settings (by chrimaho)</li> </ul> </li> <li><code>acaf276</code>: Modernise GitHub Actions workflow to use official UV setup action<ul> <li>Replace manual UV installation script with official <code>astral-sh/setup-uv@v6</code> action</li> <li>Reorder steps to set up UV before Python for better dependency management</li> <li>Remove redundant Python setup action since UV handles Python installation</li> <li>Simplify workflow by leveraging UV's built-in Python management capabilities (by chrimaho)</li> </ul> </li> <li><code>893d284</code>: Fix failing Unit Tests     (by chrimaho)</li> </ul>"},{"location":"usage/changelog/#summary_6","title":"\ud83c\udfaf Summary","text":"<p>Introduce the inaugural major release of <code>docstring-format-checker</code>, a comprehensive Python CLI tool that validates docstring formatting and completeness using AST parsing. This milestone release represents the culmination of extensive development spanning 12 minor versions, 12 major pull requests, and countless iterative improvements, delivering a production-ready solution for ensuring consistent, high-quality documentation across Python codebases.</p> <p>Transform from initial concept to enterprise-grade tool with configurable validation rules, rich terminal output, comprehensive test coverage, and robust cross-platform compatibility. Establish <code>docstring-format-checker</code> as the definitive solution for Python docstring validation, offering flexibility for diverse documentation standards whilst maintaining strict quality enforcement.</p> <p>Core Capabilities: - AST-Based Parsing: Robust code analysis without regex fragility - Configurable Validation: Four distinct section types with TOML-based configuration - Cross-Platform Reliability: 100% test coverage across Windows, macOS, and Linux - Rich Terminal Output: Beautiful coloured output with structured error tables - Dual CLI Entry Points: Accessible via <code>docstring-format-checker</code> or <code>dfc</code> commands - Modern Packaging: Dynamic version management with <code>importlib.metadata</code> integration</p>"},{"location":"usage/changelog/#foundational-architecture","title":"\ud83d\ude80 Foundational Architecture","text":""},{"location":"usage/changelog/#core-validation-engine","title":"\ud83c\udfd7\ufe0f Core Validation Engine","text":"<p>Establish a sophisticated docstring validation system built on Python AST parsing:</p> <ul> <li><code>DocstringChecker()</code>: Primary validation engine with comprehensive rule enforcement</li> <li><code>FunctionAndClassDetails()</code>: Structured representation of code elements for precise analysis</li> <li>AST Integration: Robust parsing of Python source files without dependency on fragile regex patterns</li> <li>Multi-Format Support: Handle functions, methods, classes, and async functions uniformly</li> <li>Overload Detection: Intelligent handling of <code>@overload</code> decorated functions to avoid duplicate validation</li> </ul> <p>Validation Rule Categories: <pre><code>VALID_TYPES = (\n    \"free_text\",        # Summary, details, examples, notes\n    \"list_name\",        # Simple name sections\n    \"list_type\",        # Type-only sections (raises, yields)\n    \"list_name_and_type\",  # Parameter-style sections with descriptions\n)\n</code></pre></p>"},{"location":"usage/changelog/#configuration-management-system","title":"\u2699\ufe0f Configuration Management System","text":"<p>Implement hierarchical configuration discovery with TOML-based section definitions:</p> <ul> <li><code>Config()</code>: Top-level configuration container with global settings and section definitions</li> <li><code>SectionConfig()</code>: Individual section configuration with validation rules and admonition support</li> <li><code>GlobalConfig()</code>: Global validation behaviour control flags</li> <li>Automatic Discovery: Hierarchical search for <code>pyproject.toml</code> configuration files up directory tree</li> <li>Validation Enforcement: Strict configuration validation with comprehensive error reporting</li> </ul> <p>Configuration Architecture: <pre><code>[tool.dfc]  # or [tool.docstring-format-checker]\n\n[[tool.dfc.sections]]\norder = 1\nname = \"summary\"\ntype = \"free_text\"\nadmonition = \"note\"\nrequired = true\n\n[[tool.dfc.sections]]\norder = 2\nname = \"params\"\ntype = \"list_name_and_type\"\nrequired = true\n</code></pre></p>"},{"location":"usage/changelog/#rich-cli-interface","title":"\ud83d\udda5\ufe0f Rich CLI Interface","text":"<p>Deliver an intuitive command-line interface with comprehensive functionality:</p> <ul> <li>Dual Entry Points: Both <code>docstring-format-checker</code> and <code>dfc</code> commands for flexibility</li> <li>Rich Output Formatting: Coloured terminal output with structured error tables and panels</li> <li>Multiple Output Formats: Support for both <code>table</code> and <code>list</code> display formats</li> <li>Comprehensive Help: Built-in examples, configuration generation, and detailed usage instructions</li> <li>Error Handling: Graceful error reporting with structured exit codes</li> </ul> <p>CLI Features: <pre><code># Multiple invocation methods\ndfc check src/                           # Check directory\ndocstring-format-checker check file.py   # Check single file\ndfc config-example                       # Generate example configuration\ndfc check --output table --quiet src/    # Customised output\n</code></pre></p>"},{"location":"usage/changelog/#development-evolution","title":"\ud83d\udd27 Development Evolution","text":""},{"location":"usage/changelog/#version-management-modernisation","title":"\ud83d\udce6 Version Management Modernisation","text":"<p>Replace custom version management with industry-standard approaches:</p> <ul> <li>Remove Custom Scripts: Eliminate 149-line <code>bump_version.py</code> script in favour of native UV commands</li> <li>Dynamic Metadata Integration: Leverage <code>importlib.metadata</code> for runtime version detection from <code>pyproject.toml</code></li> <li>Single Source Truth: Centralise all package metadata exclusively in <code>pyproject.toml</code></li> <li>Automatic Synchronisation: Ensure version consistency without manual intervention across all modules</li> </ul> <p>Enhanced Package Initialisation: <pre><code># src/docstring_format_checker/__init__.py\nfrom importlib.metadata import metadata\n\n_metadata = metadata(\"docstring-format-checker\")\n__version__: str = _metadata[\"Version\"]  # Dynamic from pyproject.toml\n__author__: str = _metadata[\"Author\"]\n__email__: str = _metadata.get(\"Email\", \"\")\n</code></pre></p>"},{"location":"usage/changelog/#cicd-infrastructure-enhancement","title":"\ud83d\udd27 CI/CD Infrastructure Enhancement","text":"<p>Modernise continuous integration and deployment workflows:</p> <ul> <li>Official UV GitHub Action: Replace manual UV installation with <code>astral-sh/setup-uv@v6</code> action</li> <li>Streamlined Dependency Management: Let UV handle Python installation and dependency resolution</li> <li>Native Version Bumping: Use <code>uv version</code> command instead of custom Python scripts</li> <li>Improved Workflow Efficiency: Reduce CI execution time and improve reliability</li> </ul> <p>GitHub Actions Modernisation: <pre><code># .github/workflows/cd.yml\n- name: Setup UV\n  uses: astral-sh/setup-uv@v6\n\n- name: Bump version\n  run: uv version --project-root . patch\n</code></pre></p>"},{"location":"usage/changelog/#comprehensive-test-suite","title":"\ud83e\uddea Comprehensive Test Suite","text":"<p>Achieve 100% test coverage with robust validation:</p> <ul> <li>167 Test Cases: Comprehensive coverage across all modules and edge cases</li> <li>Cross-Platform Compatibility: Validated across Windows, macOS, and Linux environments</li> <li>CLI Testing: Thorough validation of command-line interface with <code>typer.testing.CliRunner</code></li> <li>Configuration Testing: Extensive TOML configuration validation and error handling</li> <li>AST Parsing Tests: Complete validation of Python code analysis functionality</li> </ul> <p>Coverage Breakdown: <pre><code>src/docstring_format_checker/__init__.py:      100%\nsrc/docstring_format_checker/cli.py:           100%\nsrc/docstring_format_checker/config.py:        100%\nsrc/docstring_format_checker/core.py:          100%\nsrc/docstring_format_checker/utils/exceptions.py: 100%\n------------------------------------------------------\nTOTAL COVERAGE:                                100%\n</code></pre></p>"},{"location":"usage/changelog/#feature-completeness","title":"\ud83d\udccb Feature Completeness","text":""},{"location":"usage/changelog/#advanced-validation-rules","title":"\ud83d\udd0d Advanced Validation Rules","text":"<p>Implement comprehensive docstring validation logic:</p> <ul> <li>Section Detection: Intelligent parsing of docstring sections with admonition support</li> <li>Title Case Validation: Ensure proper capitalisation of section headers</li> <li>Colon Usage Checks: Validate proper punctuation in section definitions</li> <li>Parentheses Validation: Check type annotations and parameter formatting</li> <li>Blank Line Requirements: Enforce proper spacing and structure</li> <li>Type Annotation Validation: Comprehensive parameter and return type checking</li> </ul> <p>Validation Categories: <pre><code># Section validation types with specific rules\n\"free_text\": {\n    \"admonition_support\": True,\n    \"content_validation\": \"flexible\",\n    \"examples\": [\"summary\", \"details\", \"examples\", \"notes\"]\n}\n\"list_name_and_type\": {\n    \"parameter_parsing\": True,\n    \"type_validation\": True,\n    \"examples\": [\"params\", \"returns\", \"attributes\"]\n}\n</code></pre></p>"},{"location":"usage/changelog/#configuration-flexibility","title":"\ud83d\udee0\ufe0f Configuration Flexibility","text":"<p>Provide extensive customisation options:</p> <ul> <li>Four Section Types: Support for all common docstring patterns and formats</li> <li>Admonition Integration: Rich admonition support with customisable prefixes</li> <li>Global Configuration: Workspace-wide settings for consistent validation</li> <li>Section Ordering: Enforce specific section order with configurable priorities</li> <li>Required vs Optional: Flexible enforcement of mandatory and optional sections</li> </ul> <p>Advanced Configuration: <pre><code>[tool.dfc.global]\nrequire_docstrings = true\ncheck_class_docstrings = true\ncheck_method_docstrings = true\ncheck_function_docstrings = true\n\n[[tool.dfc.sections]]\norder = 1\nname = \"summary\"\ntype = \"free_text\"\nadmonition = \"note\"\nprefix = \"!!!\"\nrequired = true\n</code></pre></p>"},{"location":"usage/changelog/#rich-output-formatting","title":"\ud83d\udcca Rich Output Formatting","text":"<p>Deliver beautiful, informative terminal output:</p> <ul> <li>Structured Error Reporting: Clear, actionable error messages with file and line references  </li> <li>Progress Indicators: Visual feedback during directory scanning and validation</li> <li>Summary Statistics: Comprehensive success/failure rates and file counts</li> <li>Colour-Coded Results: Green for success, red for errors, with emoji indicators</li> <li>Table and List Formats: Multiple display options for different terminal preferences</li> </ul> <p>Example Output: <pre><code>\ud83d\udccb Docstring Format Checker Results\n\n\u2705 src/utils/helpers.py\n\u274c src/models/user.py\n   \u2514\u2500\u2500 Function 'create_user' missing required section: 'params'\n   \u2514\u2500\u2500 Function 'delete_user' missing required section: 'returns'\n\n\ud83d\udcca Summary: 1/3 files passed (33.3%)\n</code></pre></p>"},{"location":"usage/changelog/#technical-excellence","title":"\ud83c\udfc6 Technical Excellence","text":""},{"location":"usage/changelog/#code-quality-standards_2","title":"\ud83c\udfaf Code Quality Standards","text":"<p>Maintain exceptional code quality with comprehensive validation:</p> <ul> <li>Type Safety: Complete type hint coverage with dataclass-based configuration</li> <li>Import Organisation: Consistent three-tier import structure (stdlib, third-party, local)</li> <li>Error Handling: Comprehensive exception hierarchy with structured error messages</li> <li>Code Organisation: Modular architecture with clear separation of concerns</li> <li>Documentation: Enhanced docstrings following project standards across all modules</li> </ul> <p>Module Structure: <pre><code># Consistent import organisation\n# ### Python StdLib Imports ----\nimport ast\nfrom pathlib import Path\n\n# ### Python Third Party Imports ----\nimport typer\nfrom rich.console import Console\n\n# ### Local First Party Imports ----\nfrom docstring_format_checker.config import load_config\n</code></pre></p>"},{"location":"usage/changelog/#performance-optimisation","title":"\ud83d\ude80 Performance Optimisation","text":"<p>Deliver efficient validation with optimised processing:</p> <ul> <li>AST Parsing: Efficient code analysis with minimal memory overhead</li> <li>File Processing: Optimised directory traversal with glob pattern matching</li> <li>Error Reporting: Structured error collection with minimal performance impact</li> <li>Configuration Caching: Cached configuration parsing for repeated operations</li> <li>Lazy Loading: On-demand module loading to reduce startup time</li> </ul>"},{"location":"usage/changelog/#robust-error-handling","title":"\ud83d\udd10 Robust Error Handling","text":"<p>Implement comprehensive error management:</p> <ul> <li>Custom Exception Hierarchy: Structured exceptions for different failure scenarios</li> <li>Graceful Degradation: Intelligent handling of malformed files and configurations</li> <li>User-Friendly Messages: Clear, actionable error descriptions with remediation suggestions</li> <li>Exit Code Management: Proper CLI exit codes for integration with CI/CD systems</li> <li>Validation Failures: Detailed reporting of docstring validation errors</li> </ul>"},{"location":"usage/changelog/#documentation-and-examples","title":"\ud83d\udcda Documentation and Examples","text":""},{"location":"usage/changelog/#comprehensive-documentation","title":"\ud83d\udcd6 Comprehensive Documentation","text":"<p>Provide extensive documentation and usage examples:</p> <ul> <li>API Documentation: Complete module documentation with examples</li> <li>Configuration Guide: Detailed configuration options with real-world examples</li> <li>Usage Examples: Practical examples for common use cases</li> <li>Integration Guide: Instructions for CI/CD integration and pre-commit hooks</li> <li>Architecture Overview: Detailed explanation of tool internals and design decisions</li> </ul>"},{"location":"usage/changelog/#example-configurations","title":"\ud83c\udfaf Example Configurations","text":"<p>Include practical configuration templates:</p> <ul> <li>Default Configuration: Production-ready configuration for most projects</li> <li>Minimal Configuration: Lightweight setup for simple projects</li> <li>Advanced Configuration: Comprehensive setup with all features enabled</li> <li>Framework-Specific: Tailored configurations for popular Python frameworks</li> </ul> <p>Configuration Examples: <pre><code># Simple configuration\n[tool.dfc]\n[[tool.dfc.sections]]\norder = 1\nname = \"summary\"\ntype = \"free_text\"\nrequired = true\n\n# Advanced configuration with admonitions\n[[tool.dfc.sections]]\norder = 2\nname = \"details\"\ntype = \"free_text\"\nadmonition = \"abstract\"\nprefix = \"???\"\nrequired = false\n</code></pre></p>"},{"location":"usage/changelog/#release-highlights","title":"\ud83c\udf8a Release Highlights","text":""},{"location":"usage/changelog/#first-major-release","title":"\u2728 First Major Release","text":"<p>Mark the transition to stable, production-ready status:</p> <ul> <li>Semantic Versioning: Adopt semantic versioning with v1.0.1 marking API stability</li> <li>Production Readiness: Comprehensive testing and validation across all supported platforms</li> <li>Backward Compatibility: Commitment to maintaining API compatibility in future releases</li> <li>Enterprise Grade: Suitable for large-scale projects and enterprise environments</li> </ul> <p>Development Timeline: - 12 Version Releases: From v0.1.0 through v1.0.0 with iterative improvements - 12 Pull Requests: Systematic feature development and bug fixes - 100% Test Coverage: Comprehensive validation across all code paths - Cross-Platform Support: Validated on Windows, macOS, and Linux</p>"},{"location":"usage/changelog/#continuous-evolution","title":"\ud83d\udd04 Continuous Evolution","text":"<p>Establish foundation for continued development:</p> <ul> <li>Modular Architecture: Clean separation enabling easy feature additions</li> <li>Extensible Configuration: Framework for adding new validation rules</li> <li>Rich Plugin System: Foundation for third-party extensions</li> <li>Community Contributions: Clear contribution guidelines and development workflows</li> </ul>"},{"location":"usage/changelog/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Begin using <code>docstring-format-checker</code> immediately:</p> <pre><code># Install with UV\nuv add docstring-format-checker\n\n# Quick start - check a file\ndfc check my_module.py\n\n# Check entire project\ndfc check src/\n\n# Generate configuration template\ndfc config-example\n\n# Advanced usage with custom configuration\ndfc check --config pyproject.toml --output table --quiet src/\n</code></pre>"},{"location":"usage/changelog/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>Continue enhancing your documentation workflow:</p> <ol> <li>Generate Configuration: Use <code>dfc config-example</code> to create project-specific rules</li> <li>CI Integration: Add docstring validation to continuous integration workflows  </li> <li>Pre-commit Hooks: Enforce validation before code commits</li> <li>Team Standards: Establish consistent documentation standards across your team</li> <li>Advanced Features: Explore custom section types and validation rules</li> </ol> <p>CI Integration Example: <pre><code># .github/workflows/test.yml\n- name: Check docstrings\n  run: dfc check src/ --check\n</code></pre></p> <p>Transform your Python project's documentation quality with <code>docstring-format-checker</code> v1.0.1 \u2013 the comprehensive, configurable, and reliable solution for docstring validation and enforcement.</p>"},{"location":"usage/changelog/#pull-requests_5","title":"\ud83d\udcaa Pull Requests","text":"<ul> <li>Modernise Version Management and GitHub Actions Integration by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/12</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v1.0.0...v1.0.1</p>"},{"location":"usage/changelog/#v100-first-major-release","title":"v1.0.0 - First Major Release","text":"<p><code>v1.0.0</code> <code>2025-09-10</code> data-science-extensions/docstring-format-checker/releases/v1.0.0</p> Release Notes Updates <ul> <li><code>064a905</code>: Fix typo     (by chrimaho)</li> </ul>"},{"location":"usage/changelog/#summary_7","title":"\ud83c\udfaf Summary","text":"<p>Introduce the inaugural major release of <code>docstring-format-checker</code>, a powerful Python CLI tool that validates docstring formatting and completeness using AST parsing. This milestone release represents the culmination of comprehensive development spanning 11 minor versions and 11 major pull requests, delivering a production-ready solution for ensuring consistent, high-quality documentation across Python codebases.</p> <p>Transform from initial concept to enterprise-grade tool with configurable validation rules, rich terminal output, comprehensive test coverage, and robust cross-platform compatibility. Establish <code>docstring-format-checker</code> as the definitive solution for Python docstring validation, offering flexibility for diverse documentation standards whilst maintaining strict quality enforcement.</p> <p>Core Capabilities: - AST-Based Parsing: Robust code analysis without regex fragility - Configurable Validation: Four distinct section types with TOML-based configuration - Cross-Platform Reliability: 100% test coverage across Windows, macOS, and Linux - Rich Terminal Output: Beautiful coloured output with structured error tables - Dual CLI Entry Points: Accessible via <code>docstring-format-checker</code> or <code>dfc</code> commands</p>"},{"location":"usage/changelog/#foundational-architecture_1","title":"\ud83d\ude80 Foundational Architecture","text":""},{"location":"usage/changelog/#core-validation-engine_1","title":"\ud83c\udfd7\ufe0f Core Validation Engine","text":"<p>Establish a sophisticated docstring validation system built on Python AST parsing:</p> <ul> <li><code>DocstringChecker()</code>: Primary validation engine with comprehensive rule enforcement</li> <li><code>FunctionAndClassDetails()</code>: Structured representation of code elements for precise analysis</li> <li>AST Integration: Robust parsing of Python source files without dependency on fragile regex patterns</li> <li>Multi-Format Support: Handle functions, methods, classes, and async functions uniformly</li> </ul> <p>Validation Rule Categories: <pre><code>VALID_TYPES = (\n    \"free_text\",           # Summary, details, examples, notes\n    \"list_name\",           # Simple name sections\n    \"list_type\",           # Type-only sections (raises, yields)\n    \"list_name_and_type\",  # Parameter-style sections with descriptions\n)\n</code></pre></p>"},{"location":"usage/changelog/#configuration-management-system_1","title":"\u2699\ufe0f Configuration Management System","text":"<p>Implement hierarchical configuration discovery with TOML-based section definitions:</p> <ul> <li><code>Config()</code>: Top-level configuration container with global settings and section definitions</li> <li><code>SectionConfig()</code>: Individual section configuration with validation rules</li> <li><code>GlobalConfig()</code>: Global validation behaviour control flags</li> <li>Automatic Discovery: Hierarchical search for <code>pyproject.toml</code> configuration files</li> </ul> <p>Configuration Architecture: <pre><code>[tool.dfc]\nallow_undefined_sections = false\nrequire_docstrings = true\ncheck_private = true\nsections = [\n    { order = 1, name = \"summary\", type = \"free_text\", required = true },\n    { order = 2, name = \"params\", type = \"list_name_and_type\", required = true },\n    # ... additional sections\n]\n</code></pre></p>"},{"location":"usage/changelog/#command-line-interface-excellence","title":"\ud83d\udda5\ufe0f Command-Line Interface Excellence","text":"<p>Deliver a polished CLI experience with comprehensive features:</p> <ul> <li>Typer Integration: Modern CLI framework with automatic help generation</li> <li>Rich Output: Structured error tables and coloured terminal output</li> <li>Multiple Output Formats: Table format for detailed analysis, list format for CI/CD integration</li> <li>Example System: Built-in configuration and usage examples accessible via <code>--example</code> flag</li> </ul>"},{"location":"usage/changelog/#user-experience-enhancements","title":"\ud83c\udfa8 User Experience Enhancements","text":""},{"location":"usage/changelog/#rich-terminal-output","title":"\ud83c\udf08 Rich Terminal Output","text":"<p>Provide professional-grade terminal output with visual clarity:</p> <ul> <li>Error Tables: Structured display of validation errors with file, function, and line details</li> <li>Colour Coding: Green for success, red for errors, cyan for information</li> <li>Cross-Platform Compatibility: Handle terminal width variations and Unicode support differences</li> <li>Quiet Modes: Minimal output options for automated workflows and CI/CD integration</li> </ul>"},{"location":"usage/changelog/#flexible-output-formats","title":"\ud83d\udccb Flexible Output Formats","text":"<p>Support diverse workflow requirements with multiple output modes:</p> <ul> <li>Table Format: Rich structured display ideal for interactive development</li> <li>List Format: Simple line-by-line output perfect for CI/CD parsing and automation</li> <li>Summary Statistics: Clear reporting of validation results with error counts</li> <li>Exit Code Standards: Consistent return codes (0=success, 1=validation errors, 2=CLI errors)</li> </ul>"},{"location":"usage/changelog/#dual-cli-entry-points","title":"\ud83d\udd27 Dual CLI Entry Points","text":"<p>Provide convenient access through multiple command interfaces:</p> <ul> <li><code>docstring-format-checker</code>: Full descriptive command name for clarity</li> <li><code>dfc</code>: Abbreviated form for frequent use and scripting</li> <li>Consistent Behaviour: Identical functionality across both entry points</li> <li>Auto-completion Support: Built-in shell completion capabilities</li> </ul>"},{"location":"usage/changelog/#comprehensive-validation-logic","title":"\ud83e\uddea Comprehensive Validation Logic","text":""},{"location":"usage/changelog/#section-type-validation","title":"\ud83d\udcdd Section Type Validation","text":"<p>Implement sophisticated validation for four distinct docstring section types:</p> <p>Free Text Sections (<code>free_text</code>): - Summary, details, examples, notes sections - Support for admonition syntax with customisable prefixes - Flexible content validation with configurable requirements</p> <p>List Name Sections (<code>list_name</code>): - Simple name-only lists for basic documentation - Validation of proper formatting and structure - Support for bullet points and indentation requirements</p> <p>List Type Sections (<code>list_type</code>): - Exception and yield type documentation - Type information validation with parentheses checking - Title case enforcement for consistency</p> <p>List Name and Type Sections (<code>list_name_and_type</code>): - Parameter documentation with name, type, and description - Advanced parsing to distinguish definitions from descriptions - Multi-criteria validation including indentation and word count analysis</p>"},{"location":"usage/changelog/#advanced-rule-enforcement","title":"\ud83c\udfaf Advanced Rule Enforcement","text":"<p>Deliver comprehensive validation with intelligent error detection:</p> <ul> <li>Colon Usage Validation: Ensure proper colon placement in admonition and non-admonition sections</li> <li>Title Case Enforcement: Validate section headers follow proper capitalisation</li> <li>Parentheses Requirements: Check type definitions include required parentheses</li> <li>Indentation Analysis: Multi-level validation of content structure and formatting</li> <li>Blank Line Requirements: Enforce proper spacing after docstrings for readability</li> </ul>"},{"location":"usage/changelog/#smart-error-prevention","title":"\ud83d\udeab Smart Error Prevention","text":"<p>Reduce false positives whilst maintaining strict validation:</p> <ul> <li>Context-Aware Parsing: Distinguish between parameter definitions and description content</li> <li>Bullet Point Detection: Recognise legitimate description patterns vs. malformed parameters</li> <li>Word Count Analysis: Use intelligent thresholds to identify content vs. structure issues</li> <li>Configuration Flexibility: Allow customisation of validation strictness per project requirements</li> </ul>"},{"location":"usage/changelog/#continuous-integration-excellence","title":"\ud83d\udd04 Continuous Integration Excellence","text":""},{"location":"usage/changelog/#github-actions-integration","title":"\ud83c\udfd7\ufe0f GitHub Actions Integration","text":"<p>Establish robust CI/CD workflows with comprehensive testing:</p> <ul> <li>Multi-Platform Testing: Validate functionality across Ubuntu, macOS, and Windows</li> <li>Python Version Matrix: Support Python 3.9 through 3.13 with comprehensive compatibility testing</li> <li>UV Package Manager: Modern dependency management with faster resolution and caching</li> <li>Automated Versioning: Streamlined release processes with automatic changelog generation</li> </ul>"},{"location":"usage/changelog/#quality-assurance-standards_1","title":"\ud83d\udcca Quality Assurance Standards","text":"<p>Maintain exceptional code quality with comprehensive validation:</p> <ul> <li>100% Test Coverage: Complete test suite with 199 individual test cases across all modules</li> <li>Cross-Platform Reliability: Resolve Windows-specific issues with file locking and terminal formatting</li> <li>Pre-commit Hooks: Automated code quality checks with Black formatting and lint validation</li> <li>Documentation Standards: Consistent docstring formatting across entire codebase</li> </ul>"},{"location":"usage/changelog/#release-automation","title":"\ud83d\ude80 Release Automation","text":"<p>Streamline release processes with automated workflows:</p> <ul> <li>Version Bumping: Automated version management with changelog generation</li> <li>Coverage Reporting: Automatic generation and publication of test coverage reports</li> <li>Documentation Deployment: Automated documentation site updates with MkDocs integration</li> <li>PyPI Publishing: Seamless package distribution with automated release workflows</li> </ul>"},{"location":"usage/changelog/#exception-handling-architecture","title":"\ud83e\uddec Exception Handling Architecture","text":""},{"location":"usage/changelog/#structured-error-classes","title":"\ud83c\udfaf Structured Error Classes","text":"<p>Implement comprehensive exception hierarchy for clear error communication:</p> <ul> <li><code>DocstringError()</code>: Base exception for docstring validation issues with detailed context</li> <li><code>InvalidConfigError()</code>: Configuration file validation with specific error details</li> <li><code>InvalidTypeValuesError()</code>: Type validation errors with suggestions for correction</li> <li><code>DirectoryNotFoundError()</code>: File system errors with helpful resolution guidance</li> </ul>"},{"location":"usage/changelog/#error-reporting-excellence","title":"\ud83d\udccb Error Reporting Excellence","text":"<p>Provide detailed error information for rapid issue resolution:</p> <ul> <li>Line Number Precision: Exact location reporting for validation errors</li> <li>Context Information: Include surrounding code context for error understanding</li> <li>Suggestion Engine: Provide specific recommendations for error resolution</li> <li>Batch Error Processing: Handle multiple errors efficiently with comprehensive reporting</li> </ul>"},{"location":"usage/changelog/#platform-compatibility-achievements","title":"\ud83d\udcc8 Platform Compatibility Achievements","text":""},{"location":"usage/changelog/#cross-platform-reliability","title":"\ud83c\udf10 Cross-Platform Reliability","text":"<p>Resolve critical compatibility issues across operating systems:</p> <ul> <li>Windows File Locking: Fix temporary file management with proper handle cleanup and <code>flush()</code> calls</li> <li>Terminal Width Handling: Accommodate varying terminal sizes and line wrapping differences</li> <li>Unicode Support: Handle diverse character sets and border compatibility across terminals</li> <li>Path Management: Ensure consistent absolute path usage across all platforms</li> </ul>"},{"location":"usage/changelog/#test-suite-robustness","title":"\ud83e\uddea Test Suite Robustness","text":"<p>Achieve comprehensive test reliability with platform-agnostic approaches:</p> <ul> <li>Isolated Test Environments: Prevent interference with temporary directories and proper cleanup</li> <li>ANSI Code Handling: Strip formatting codes for consistent output validation across terminals</li> <li>Help Text Flexibility: Handle platform-specific formatting variations in CLI output</li> <li>Assertion Robustness: Use flexible matching patterns for cross-platform compatibility</li> </ul>"},{"location":"usage/changelog/#development-workflow-excellence","title":"\ud83d\udd0d Development Workflow Excellence","text":""},{"location":"usage/changelog/#documentation-standards","title":"\ud83d\udcdd Documentation Standards","text":"<p>Establish comprehensive documentation practices throughout the project:</p> <ul> <li>Docstring Standardisation: Implement consistent <code>!!! note \"Summary\"</code> format across all modules</li> <li>API Documentation: Complete function and class documentation with parameter details</li> <li>Usage Examples: Built-in examples accessible through CLI for immediate reference</li> <li>Contributing Guidelines: Detailed development and contribution documentation</li> </ul>"},{"location":"usage/changelog/#developer-experience_1","title":"\ud83d\udee0\ufe0f Developer Experience","text":"<p>Provide exceptional development tooling and workflows:</p> <ul> <li>Utility Scripts: Comprehensive automation for linting, testing, and version management</li> <li>Pre-commit Integration: Automated code quality enforcement with configurable rules</li> <li>Coverage Reporting: Detailed test coverage analysis with HTML and XML output formats</li> <li>Modern Tooling: Integration with contemporary Python tools including UV, Typer, and Rich</li> </ul>"},{"location":"usage/changelog/#configuration-flexibility_1","title":"\ud83c\udfaf Configuration Flexibility","text":""},{"location":"usage/changelog/#toml-integration","title":"\ud83d\udccb TOML Integration","text":"<p>Provide comprehensive configuration management through TOML files:</p> <ul> <li>Multiple Configuration Names: Support both <code>[tool.dfc]</code> and <code>[tool.docstring-format-checker]</code> sections</li> <li>Hierarchical Discovery: Automatic search for configuration files in project hierarchy</li> <li>Validation Engine: Comprehensive configuration validation with detailed error reporting</li> <li>Default Configuration: Sensible defaults for immediate use without configuration</li> </ul>"},{"location":"usage/changelog/#customisation-options","title":"\ud83d\udd27 Customisation Options","text":"<p>Enable extensive customisation for diverse project requirements:</p> <ul> <li>Section Definition: Complete control over docstring section requirements and order</li> <li>Admonition Support: Configurable admonition types with custom prefixes</li> <li>Global Flags: Control validation behaviour with <code>allow_undefined_sections</code>, <code>require_docstrings</code>, and <code>check_private</code></li> <li>Type System: Four distinct section types to accommodate different documentation patterns</li> </ul>"},{"location":"usage/changelog/#configuration-examples_1","title":"\ud83d\udcca Configuration Examples","text":"<p>Provide comprehensive examples for immediate implementation:</p> <ul> <li>Default Configuration: Production-ready configuration suitable for most Python projects</li> <li>Custom Sections: Examples of specialised section configurations for specific needs</li> <li>Integration Patterns: Demonstrate integration with existing project configurations</li> <li>Migration Guides: Support for updating configurations across versions</li> </ul>"},{"location":"usage/changelog/#quality-metrics_1","title":"\ud83c\udfc6 Quality Metrics","text":""},{"location":"usage/changelog/#test-coverage-excellence","title":"\ud83d\udcc8 Test Coverage Excellence","text":"<p>Achieve and maintain exceptional test coverage across all components:</p> <pre><code>Module Coverage Statistics:\n- src/docstring_format_checker/__init__.py:      100%\n- src/docstring_format_checker/cli.py:           100%  \n- src/docstring_format_checker/config.py:        100%\n- src/docstring_format_checker/core.py:          100%\n- src/docstring_format_checker/utils/exceptions.py: 100%\n------------------------------------------------------\nTOTAL COVERAGE:                                  100%\n</code></pre>"},{"location":"usage/changelog/#code-quality-standards_3","title":"\ud83c\udfaf Code Quality Standards","text":"<p>Maintain exceptional code quality with comprehensive validation:</p> <ul> <li>Type Safety: Complete type hint coverage with dataclass-based configuration</li> <li>Error Handling: Comprehensive exception hierarchy with structured error messages  </li> <li>Code Organisation: Consistent import structure and modular architecture</li> <li>Documentation: Enhanced docstrings following project standards across all modules</li> </ul>"},{"location":"usage/changelog/#performance-benchmarks","title":"\ud83d\ude80 Performance Benchmarks","text":"<p>Deliver efficient validation with optimised processing:</p> <ul> <li>AST Parsing: Efficient code analysis with minimal memory overhead</li> <li>File Processing: Optimised directory traversal with pattern matching</li> <li>Error Reporting: Structured error collection with minimal performance impact</li> <li>Configuration Loading: Cached configuration parsing for repeated operations</li> </ul>"},{"location":"usage/changelog/#user-benefits","title":"\ud83c\udf1f User Benefits","text":""},{"location":"usage/changelog/#for-development-teams","title":"\ud83d\udc65 For Development Teams","text":"<p>Enable consistent documentation standards across development teams:</p> <ul> <li>Standardised Documentation: Enforce consistent docstring formats across entire codebase</li> <li>Flexible Configuration: Adapt validation rules to match team conventions and standards</li> <li>CI/CD Integration: Automated validation with reliable exit codes for build pipelines</li> <li>Rich Feedback: Detailed error reporting with specific suggestions for resolution</li> </ul>"},{"location":"usage/changelog/#for-enterprise-users","title":"\ud83c\udfe2 For Enterprise Users","text":"<p>Provide enterprise-grade documentation validation capabilities:</p> <ul> <li>Scalable Architecture: Handle large codebases with efficient processing</li> <li>Compliance Support: Configurable validation rules for documentation standards compliance</li> <li>Cross-Platform Deployment: Consistent behaviour across diverse development environments</li> <li>Quality Assurance: 100% test coverage ensuring reliable operation in production environments</li> </ul>"},{"location":"usage/changelog/#for-open-source-projects","title":"\ud83d\udee0\ufe0f For Open Source Projects","text":"<p>Support open source development with comprehensive validation tools:</p> <ul> <li>Easy Integration: Simple installation and configuration for immediate use</li> <li>Documentation Excellence: Enforce high-quality documentation standards for contributors</li> <li>CI/CD Ready: Seamless integration with GitHub Actions and other CI platforms</li> <li>Community Standards: Support common Python documentation patterns and conventions</li> </ul>"},{"location":"usage/changelog/#version-evolution-summary","title":"\ud83d\udcca Version Evolution Summary","text":""},{"location":"usage/changelog/#release-timeline","title":"\ud83c\udfaf Release Timeline","text":"<p>Track the comprehensive evolution from initial concept to production release:</p> <ul> <li>v0.1.0: Initial release with basic validation functionality</li> <li>v0.2.0: Add <code>@overload</code> function support and CI/CD workflows</li> <li>v0.3.0: Enhance error message formatting and admonition validation</li> <li>v0.4.0: Remove recursive flags, add examples system, improve CLI interface</li> <li>v0.5.0: Resolve output formatting issues with list mode and summary statistics</li> <li>v0.6.0: Fix description line validation and list output formatting</li> <li>v0.7.0: Improve validation logic for list sections with enhanced type handling</li> <li>v0.8.0: Introduce global configuration architecture with comprehensive control flags</li> <li>v0.9.0: Refactor configuration structure and enhance test reliability</li> <li>v0.10.0: Resolve Windows CI issues and improve cross-platform compatibility</li> <li>v0.11.0: Standardise documentation formats and complete test suite reliability improvements</li> </ul>"},{"location":"usage/changelog/#cumulative-improvements","title":"\ud83d\udcc8 Cumulative Improvements","text":"<p>Demonstrate the comprehensive scope of development across all versions:</p> <ul> <li>199 Test Cases: Comprehensive test suite covering all functionality and edge cases</li> <li>11 Pull Requests: Major feature additions and reliability improvements</li> <li>74 Files Modified: Extensive codebase development with complete project structure  </li> <li>21,938 Lines Added: Substantial functionality implementation with comprehensive documentation</li> <li>100% Coverage: Complete test coverage across all modules and functions</li> </ul>"},{"location":"usage/changelog/#future-roadmap-foundation","title":"\ud83d\udd2e Future Roadmap Foundation","text":"<p>Establish architectural foundation for continued evolution:</p> <ul> <li>Plugin System: Configuration structure ready for extensible validation rules</li> <li>Custom Section Types: Framework prepared for additional docstring section types</li> <li>IDE Integration: Rich error reporting suitable for editor integration and tooling</li> <li>Performance Optimisation: Modular architecture enabling targeted performance enhancements</li> <li>Community Extensions: Extensible design supporting community-contributed validation rules</li> </ul>"},{"location":"usage/changelog/#pull-requests_6","title":"\ud83d\udcaa Pull Requests","text":""},{"location":"usage/changelog/#whats-changed_1","title":"What's Changed","text":"<ul> <li>Complete Foundation Setup: Introduce Docstring Format Checker CLI Tool with 100% Test Coverage and Professional Documentation by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/1</li> <li>Fix <code>@overload</code> Function Handling: Enhance Docstring Checker to Properly Ignore Function Type Overloads by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/2</li> <li>Comprehensive Docstring Validation Enhancement: Introduce Advanced Rule Enforcement and Achieve 100% Test Coverage by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/3</li> <li>Enhanced CLI Error Output Formatting: Improve Multi-Error Message Presentation and Achieve Comprehensive Test Coverage by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/4</li> <li>Streamline CLI Architecture: Simplify Interface Design and Achieve Complete Test Coverage by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/5</li> <li>Advanced List Output Formatting &amp; Error Summary Display by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/6</li> <li>Enhanced Docstring Validation Logic: Description Line Colon Handling &amp; Complete Code Coverage by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/7</li> <li>Enhanced Docstring Validation Logic: Advanced Parameter Description Handling by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/8</li> <li>Major Test Suite Refactor and Configuration Architecture Enhancement by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/9</li> <li>Enhanced CLI Architecture and Cross-Platform Test Reliability by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/10</li> <li>Comprehensive Docstring Validation Enhancement and Test Suite Reliability Improvement by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/11</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v0.1.0...v1.0.0</p> <p>Version: v0.0.0 \u2192 v1.0.0 Tests: 199 comprehensive test cases (100% coverage) Platforms: Windows, macOS, Linux Python: 3.9+ supported PyPI Status: Production/Stable</p>"},{"location":"usage/changelog/#v0110-test-suite-reliability-improvement","title":"v0.11.0 - Test Suite Reliability Improvement","text":"<p><code>v0.11.0</code> <code>2025-09-10</code> data-science-extensions/docstring-format-checker/releases/v0.11.0</p> Release Notes Updates <ul> <li><code>d9494dd</code>: Fix typo     (by chrimaho)</li> <li><code>24de498</code>: Standardise admonition types and isolate test environment<ul> <li>Change admonition type from <code>info</code> to <code>abstract</code> for consistency in documentation formatting</li> <li>Isolate configuration loading test by switching to temporary directory to prevent interference from existing project configuration files</li> <li>Ensure test runs in clean environment by temporarily changing working directory and restoring original location afterwards (by chrimaho)</li> </ul> </li> <li><code>d569da7</code>: Add or fix package docstrings     (by chrimaho)</li> <li><code>581109e</code>: Fix typo     (by chrimaho)</li> <li><code>ec7103e</code>: Fix typo     (by chrimaho)</li> </ul>"},{"location":"usage/changelog/#whats-changed_2","title":"What's Changed","text":"<ul> <li>Comprehensive Docstring Validation Enhancement and Test Suite Reliability Improvement by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/11</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v0.10.0...v0.11.0</p>"},{"location":"usage/changelog/#v0100-enhanced-cli-architecture-and-cross-platform-test-reliability","title":"v0.10.0 - Enhanced CLI Architecture and Cross-Platform Test Reliability","text":"<p><code>v0.10.0</code> <code>2025-09-10</code> data-science-extensions/docstring-format-checker/releases/v0.10.0</p> Release Notes Updates <ul> <li><code>f795295</code>: Improve test assertion robustness for CLI help text validation<ul> <li>Replace exact string matching with word-by-word validation to handle platform-specific line wrapping</li> <li>Use <code>all()</code> function with generator expression to check each word individually in help output</li> <li>Add explicit type annotation for output variable to improve code clarity</li> <li>Ensure tests pass consistently across different terminal widths and operating systems (by chrimaho)</li> </ul> </li> <li><code>145f68c</code>: Fix test assertions to handle platform-specific line wrapping<ul> <li>Remove trailing period from expected help text string to account for line wrapping variations across different platforms</li> <li>Extract cleaned output to variable for better readability and maintainability</li> <li>Ensure test reliability when help text formatting differs due to terminal width constraints (by chrimaho)</li> </ul> </li> <li><code>af74cc5</code>: Fix Windows CI issues: resolve temp file locking and help text assertion mismatches<ul> <li>Close all temporary files before CLI invocation to prevent Windows file locking errors</li> <li>Update help text assertions to match actual output (completeness. vs completeness)</li> <li>All 167 tests now pass with 100% code coverage locally (by chrimaho)</li> </ul> </li> <li><code>e580876</code>: Improve CI setup and fix test reliability issues<ul> <li>Add UV package manager setup in CD workflow for faster Python dependency management</li> <li>Fix Python version handling to use UV for installing matrix versions while maintaining setup consistency</li> <li>Improve test stability by adding <code>f.flush()</code> calls and proper temporary file name handling to prevent file system race conditions</li> <li>Expand table border detection to handle various Unicode characters for more robust output validation</li> <li>Update help text to better reflect tool capabilities including completeness checking</li> <li>Fix test configuration to use proper <code>Config</code> objects instead of deprecated helper functions (by chrimaho)</li> </ul> </li> </ul>"},{"location":"usage/changelog/#whats-changed_3","title":"What's Changed","text":"<ul> <li>Enhanced CLI Architecture and Cross-Platform Test Reliability by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/10</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v0.9.0...v0.10.0</p>"},{"location":"usage/changelog/#v090-configuration-architecture-enhancement","title":"v0.9.0 - Configuration Architecture Enhancement","text":"<p><code>v0.9.0</code> <code>2025-09-10</code> data-science-extensions/docstring-format-checker/releases/v0.9.0</p> Release Notes Updates <ul> <li><code>46cd052</code>: Refactor tests to utilize new Config structure and global configuration flags<ul> <li>Updated test_config.py to reflect changes in load_config function, ensuring it returns a Config object instead of a list of SectionConfig.</li> <li>Enhanced assertions in test cases to validate global configuration values such as allow_undefined_sections, require_docstrings, and check_private.</li> <li>Introduced test_global_config.py to cover new global configuration features, including loading from TOML files and validating behavior based on global flags.</li> <li>Added tests for scenarios where undefined sections and missing docstrings are handled according to the global configuration settings. (by chrimaho)</li> </ul> </li> </ul>"},{"location":"usage/changelog/#whats-changed_4","title":"What's Changed","text":"<ul> <li>Major Test Suite Refactor and Configuration Architecture Enhancement by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/9</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v0.8.0...v0.9.0</p>"},{"location":"usage/changelog/#v080-enhanced-docstring-validation-logic","title":"v0.8.0 - Enhanced Docstring Validation Logic","text":"<p><code>v0.8.0</code> <code>2025-09-09</code> data-science-extensions/docstring-format-checker/releases/v0.8.0</p> Release Notes Updates <ul> <li><code>1852daf</code>: Improves validation logic for list sections with types     Enhances the docstring checker to better distinguish between parameter     definitions and description content in list_name_and_type sections.     Previously flagged description lines containing colons as invalid parameter     definitions. Now uses multiple criteria including indentation levels, word     count analysis, and bullet point detection to avoid false positives.     Prevents validation errors on legitimate description content while maintaining     strict checking for actual parameter definition lines.     (by chrimaho)</li> </ul>"},{"location":"usage/changelog/#whats-changed_5","title":"What's Changed","text":"<ul> <li>Enhanced Docstring Validation Logic: Advanced Parameter Description Handling by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/8</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v0.7.0...v0.8.0</p>"},{"location":"usage/changelog/#v070-enhanced-docstring-validation-logic","title":"v0.7.0 - Enhanced Docstring Validation Logic","text":"<p><code>v0.7.0</code> <code>2025-09-09</code> data-science-extensions/docstring-format-checker/releases/v0.7.0</p> Release Notes Updates <ul> <li><code>cf9b610</code>: Updates test expectations for parentheses validation     Adjusts test assertions to reflect current implementation behavior where certain type annotations are skipped when no parenthesized types have been found yet.     Changes expected error types from missing parentheses violations to undefined section errors, and removes assertions for cases that no longer generate errors due to the permissive logic.     (by chrimaho)</li> <li><code>ce0cca0</code>: Update src/docstring_format_checker/core.py     (by chrimaho)</li> <li><code>39aaf52</code>: Fixes description line validation in list_type sections     Improves docstring validation logic to properly handle description lines that contain colons in list_type sections.     Previously, description lines indented under type definitions were incorrectly flagged as requiring parenthesized types. Now tracks indentation levels to distinguish between type definition lines and their corresponding descriptions.     Adds comprehensive test coverage for various scenarios including multi-line descriptions, same-line descriptions, and invalid formats to ensure robust validation behavior.     (by chrimaho)</li> <li><code>7f65068</code>: Correct output as list, ensure errors are on individual lines     (by chrimaho)</li> </ul>"},{"location":"usage/changelog/#whats-changed_6","title":"What's Changed","text":"<ul> <li>Enhanced Docstring Validation Logic: Description Line Colon Handling &amp; Complete Code Coverage by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/7</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v0.6.0...v0.7.0</p>"},{"location":"usage/changelog/#v060-advanced-list-output-formatting-error-summary-display","title":"v0.6.0 - Advanced List Output Formatting &amp; Error Summary Display","text":"<p><code>v0.6.0</code> <code>2025-09-08</code> data-science-extensions/docstring-format-checker/releases/v0.6.0</p> Release Notes Updates <ul> <li><code>44578b4</code>: Resove issues with the output when <code>-o list</code> and with the summary stats on the printed output     (by chrimaho)</li> </ul>"},{"location":"usage/changelog/#whats-changed_7","title":"What's Changed","text":"<ul> <li>Advanced List Output Formatting &amp; Error Summary Display by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/6</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v0.5.0...v0.6.0</p>"},{"location":"usage/changelog/#v050-streamline-cli-architecture","title":"v0.5.0 - Streamline CLI Architecture","text":"<p><code>v0.5.0</code> <code>2025-09-07</code> data-science-extensions/docstring-format-checker/releases/v0.5.0</p> Release Notes Updates <ul> <li><code>d29faf0</code>: Increase code coverage     (by chrimaho)</li> <li><code>8b4f42a</code>: Fix failing unit tests     (by chrimaho)</li> <li><code>dfccf35</code>: Add <code>--examples</code>/<code>-e</code> flags to the CLI, instead of using a sub-command     (by chrimaho)</li> <li><code>76cbd78</code>: Remove the unnecessary <code>_parse_boolean_flag()</code> function and all associated unit tests     (by chrimaho)</li> <li><code>3e583f5</code>: Remove all references to the <code>--recursive</code>/<code>-r</code> flag, and ensure that it will always be recursive by default     (by chrimaho)</li> <li><code>2614316</code>: Update docstring format in CLI module to be more pythonic     (by chrimaho)</li> </ul>"},{"location":"usage/changelog/#whats-changed_8","title":"What's Changed","text":"<ul> <li>Streamline CLI Architecture: Simplify Interface Design and Achieve Complete Test Coverage by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/5</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v0.4.0...v0.5.0</p>"},{"location":"usage/changelog/#v040-enhance-cli-error-output-formatting","title":"v0.4.0 - Enhance CLI Error Output Formatting","text":"<p><code>v0.4.0</code> <code>2025-09-06</code> data-science-extensions/docstring-format-checker/releases/v0.4.0</p> Release Notes Updates <ul> <li><code>8bf056c</code>: Fix typo     (by chrimaho)</li> <li><code>a58c64e</code>: Enhance error message formatting in CLI output and add corresponding unit tests     (by chrimaho)</li> </ul>"},{"location":"usage/changelog/#whats-changed_9","title":"What's Changed","text":"<ul> <li>Enhanced CLI Error Output Formatting: Improve Multi-Error Message Presentation and Achieve Comprehensive Test Coverage by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/4</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v0.3.0...v0.4.0</p>"},{"location":"usage/changelog/#v030-enhance-validation-configuration-rules","title":"v0.3.0 - Enhance Validation &amp; Configuration Rules","text":"<p><code>v0.3.0</code> <code>2025-09-06</code> data-science-extensions/docstring-format-checker/releases/v0.3.0</p> Release Notes Updates <ul> <li><code>c7ada96</code>: Fix typo     (by chrimaho)</li> <li><code>66de3cf</code>: Add additional unit tests to check more edge cases     (by chrimaho)</li> <li><code>1f35cc2</code>: Add more unit tests for edge cases     (by chrimaho)</li> <li><code>1110894</code>: Enhance admonition validation by ensuring admonition is a string and refining section name matching patterns     (by chrimaho)</li> <li><code>2e656f1</code>: Add parentheses validation for list type sections in docstring checks     (by chrimaho)</li> <li><code>2528a63</code>: Add title case validation for non-admonition sections in docstrings     (by chrimaho)</li> <li><code>186377a</code>: Add colon usage checks for admonition and non-admonition sections in docstrings     (by chrimaho)</li> <li><code>1881e90</code>: Add blank lines after docstrings for improved readability     (by chrimaho)</li> <li><code>ca5bbd9</code>: Refactor <code>SectionConfig()</code> to enhance admonition validation and type handling     (by chrimaho)</li> <li><code>8e3598a</code>: Extend the <code>core</code> module to better handle edge-cases     This will now throw errors when:<ol> <li>When there is a section in a docstring which are not defined in the config</li> <li>When the admonition used in the docstring does not match the admonition defined in the config (by chrimaho)</li> </ol> </li> </ul>"},{"location":"usage/changelog/#whats-changed_10","title":"What's Changed","text":"<ul> <li>Comprehensive Docstring Validation Enhancement: Introduce Advanced Rule Enforcement and Achieve 100% Test Coverage by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/3</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v0.2.0...v0.3.0</p>"},{"location":"usage/changelog/#v020-allow-app-to-properly-handle-functions-with-overload-decorator","title":"v0.2.0 - Allow app to properly handle functions with @overload decorator","text":"<p><code>v0.2.0</code> <code>2025-09-04</code> data-science-extensions/docstring-format-checker/releases/v0.2.0</p> Release Notes Updates <ul> <li><code>a4cde50</code>: typo     (by chrimaho)</li> <li><code>42936b4</code>: Fix typo     (by chrimaho)</li> <li><code>36f4d07</code>: Fix bug regarding bumping versions during CD workflow     (by chrimaho)</li> <li><code>6e610c7</code>: Add support for ignoring <code>@overload</code> functions in docstring checks     (by chrimaho)</li> </ul>"},{"location":"usage/changelog/#whats-changed_11","title":"What's Changed","text":"<ul> <li>Fix <code>@overload</code> Function Handling: Enhance Docstring Checker to Properly Ignore Function Type Overloads by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/2</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/compare/v0.1.0...v0.2.0</p>"},{"location":"usage/changelog/#v010-first-minor-release","title":"v0.1.0 - First Minor Release","text":"<p><code>v0.1.0</code> <code>2025-08-31</code> data-science-extensions/docstring-format-checker/releases/v0.1.0</p> Release Notes Updates <ul> <li><code>59d7bf2</code>: Fix bug in CD workflow when building package     (by chrimaho)</li> <li><code>d5dadcd</code>: Fix bugs in Git commit processes during CD workflow     (by chrimaho)</li> <li><code>1b7c824</code>: Fix bug     (by chrimaho)</li> <li><code>d22d331</code>: Fix git command for coverage report     (by chrimaho)</li> <li><code>1c12bdb</code>: Fix git commands     (by chrimaho)</li> <li><code>a600108</code>: Update Code Coverage info     (by chrimaho)</li> <li><code>b65ca7e</code>: Ensure coverage report directory exists before copying files     (by chrimaho)</li> <li><code>56333ef</code>: Streamline constants in the <code>scripts</code> module     (by chrimaho)</li> <li><code>6bac29e</code>: Fix failing unit tests for macos, caused by <code>rm</code> flags     (by chrimaho)</li> <li><code>a20c997</code>: Enhance CLI test assertions for output flexibility and Windows compatibility     (by chrimaho)</li> <li><code>233b01f</code>: Resolve failing unit tests on macos     (by chrimaho)</li> <li><code>482346e</code>: Fix failing unit tests     (by chrimaho)</li> <li><code>2784a12</code>: Restructure unit tests to better handle temp files on the windows os     (by chrimaho)</li> <li><code>2a8016c</code>: Fix failing <code>macos</code> unit test     (by chrimaho)</li> <li><code>6c02f67</code>: Fix bug     (by chrimaho)</li> <li><code>8428d91</code>: Fix configuration file path assertion in CLI tests     (by chrimaho)</li> <li><code>e78f78b</code>: Fix failing unit tests     (by chrimaho)</li> <li><code>cdaa768</code>: Update CI workflow to only run on Python versions 3.9 to 3.13     (by chrimaho)</li> <li><code>8cad4f4</code>: Refactor type hints in <code>test_config.py</code> for consistency and clarity     (by chrimaho)</li> <li><code>f31230d</code>: Strip ANSI codes from all <code>CliRunner</code> output in unit tests     (by chrimaho)</li> <li><code>7cf4532</code>: Update <code>pyupgrade</code> pre-commit config to target Python 3.7 features (previously 3.9)     (by chrimaho)</li> <li><code>373939f</code>: Refactor all type hints to use <code>Optional</code> and <code>Union</code> instead of <code>|</code> for improved clarity,  consistency, and compatability     (by chrimaho)</li> <li><code>7e69f56</code>: Add Python 3.7 to CI workflow matrix for enhanced compatibility     (by chrimaho)</li> <li><code>8af990a</code>: Add detailed docstrings to all core modules     (by chrimaho)</li> <li><code>091f4c7</code>: Add <code>strip_ansi_codes()</code> function to generic Unit Tests setup and update CLI tests to use it for robust output validation     (by chrimaho)</li> <li><code>023147d</code>: Do more debugging in the CLI unit tests     (by chrimaho)</li> <li><code>73d53e6</code>: Add <code>re</code> to CLI unit tests     (by chrimaho)</li> <li><code>e7a7264</code>: Add <code>strip_ansi_codes()</code> function to the CLI Unit Tests     (by chrimaho)</li> <li><code>36689f4</code>: Debug CLI Unit Test 19     (by chrimaho)</li> <li><code>5028bdd</code>: Temporarily turn off <code>pylint</code> checks during pre-commit hooks     (by chrimaho)</li> <li><code>ebc514e</code>: Refactor CLI to use Typer imports directly and improve error messages     (by chrimaho)</li> <li><code>64dd8d9</code>: Fix linting     (by chrimaho)</li> <li><code>e1b34dd</code>: Remove redundant reference code     (by chrimaho)</li> <li><code>626a820</code>: Update CI and CD workflows to use specific script paths for running checks     (by chrimaho)</li> <li><code>62b4f1a</code>: Fix CLI tests: Disable Rich colors to prevent ANSI formatting issues in CI<ul> <li>Set NO_COLOR=1 environment variable in CliRunner to ensure consistent test output</li> <li>Resolves GitHub Actions test failures due to Rich library adding ANSI color codes</li> <li>Local and CI environments now produce identical plain text error messages</li> <li>All 175 tests now pass with 100% coverage in both local and CI environments (by chrimaho)</li> </ul> </li> <li><code>174e662</code>: Improve error message assertions for invalid recursive flag in CLI tests     (by chrimaho)</li> <li><code>cef91a9</code>: Add CD workflow along with scripts to bump version and generate changelog     (by chrimaho)</li> <li><code>235c66d</code>: Fix typo     (by chrimaho)</li> <li><code>741ceba</code>: Streamline automation scripts     (by chrimaho)</li> <li><code>79daa31</code>: Add CI workflow     (by chrimaho)</li> <li><code>050b397</code>: Fix hardcoding in the Unit Tests     Hardcoded absolute path used in test. The <code>cwd</code> parameter contains a hardcoded personal directory path that will not work on other systems. This should use a relative path or be made configurable.     (by chrimaho)</li> <li><code>6db7b02</code>: Add a nice README     (by chrimaho)</li> <li><code>af7ac2c</code>: Fix a typo     (by chrimaho)</li> <li><code>44d4d04</code>: Add docs structure and config     (by chrimaho)</li> <li><code>7791970</code>: Add project guidelines     (by chrimaho)</li> <li><code>864f602</code>: Refactor exception handling: rename exceptions for clarity and consistency     (by chrimaho)</li> <li><code>f80b83a</code>: Remove <code>check-docstrings</code> from the <code>pre-commit</code> checks     (by chrimaho)</li> <li><code>ec53fa7</code>: Fix failing Unit Tests     (by chrimaho)</li> <li><code>0719d8e</code>: Clarify some of the <code>raise</code> sections to instead use Exceptions defined in the local module, instead of the default Exceptions from the builtins module     (by chrimaho)</li> <li><code>cffa310</code>: Refine any sections which use the <code>/</code> operator to merge objects in the <code>Path</code> package to instead use the <code>.joinpath()</code> method. This is to make the code more robust and more readable.     (by chrimaho)</li> <li><code>8921f24</code>: Correct and refine some of the docstrings in the <code>config</code> and <code>core</code> modules     (by chrimaho)</li> <li><code>98a2409</code>: Add new <code>_validate_config_order()</code> function to the <code>config</code> module     (by chrimaho)</li> <li><code>f711ac7</code>: Refine how the <code>import</code>'s and <code>export</code>'s are defined across both the <code>cli</code> and <code>config</code> modules     (by chrimaho)</li> <li><code>6cdc073</code>: Restructure how the <code>VALID_TYPES</code> constant is defined and utilised in the <code>config</code> module     (by chrimaho)</li> <li><code>5e9869a</code>: Add helpful docstrings and additional headers to the <code>cli</code> and <code>config</code> modules     (by chrimaho)</li> <li><code>5e227ec</code>: Refactor the Callbacks in the <code>cli</code> module to have better structure and organisation     (by chrimaho)</li> <li><code>22286e4</code>: Reorder the steps for the checks scripts     (by chrimaho)</li> <li><code>0779921</code>: Add new exception classes for improved clarity and organization     (by chrimaho)</li> <li><code>12aa070</code>: Bring code coverage for all unit tests up to 100% coverage     (by chrimaho)</li> <li><code>d98ed78</code>: Update dependencies and refine project configuration in <code>pyproject.toml</code>     (by chrimaho)</li> <li><code>7331f75</code>: Initial commit of all package unit tests     (by chrimaho)</li> <li><code>91493ee</code>: Initial commit of all package modules     (by chrimaho)</li> <li><code>609e9cb</code>: Add utility scripts for command execution and linting checks     (by chrimaho)</li> <li><code>4c0e003</code>: Fix typo     (by chrimaho)</li> <li><code>7d870ad</code>: Tweak some of the core package config     (by chrimaho)</li> <li><code>32acad0</code>: Initial commit of package config     (by )</li> <li><code>416b0b3</code>: Initial commit     (by chrimaho)</li> </ul>"},{"location":"usage/changelog/#whats-changed_12","title":"What's Changed","text":"<ul> <li>Complete Foundation Setup: Introduce Docstring Format Checker CLI Tool with 100% Test Coverage and Professional Documentation by @chrimaho in https://github.com/data-science-extensions/docstring-format-checker/pull/1</li> </ul>"},{"location":"usage/changelog/#new-contributors","title":"New Contributors","text":"<ul> <li>@chrimaho made their first contribution in https://github.com/data-science-extensions/docstring-format-checker/pull/1</li> </ul> <p>Full Changelog: https://github.com/data-science-extensions/docstring-format-checker/commits/v0.1.0</p>"},{"location":"usage/contributing/","title":"Contribution Guidelines","text":"<p>All contributions are welcome! Please follow these guidelines to ensure a smooth contribution process.</p>"},{"location":"usage/contributing/#overview","title":"Overview","text":"<p>Here are some guidelines to help you get started:</p> <ol> <li>Raise an Issue: Before starting work on a new feature or bug fix, please raise an issue to discuss it. All enhancements and changes are discussed in the issues section. This helps us avoid duplicate work and ensures that your contribution aligns with the project's goals.</li> <li>Check the issues and milestones: Look at the issues and milestones to see if your contribution fits into the current roadmap.</li> <li>Fork the Repository: Create a fork of the repository to work on your changes. This allows you to make changes without affecting the main codebase.</li> <li>Create a new branch: When working on a new feature or bug fix, create a new branch from the <code>main</code> branch. Use a descriptive name for your branch that reflects the changes you are making.</li> <li>Clone the repository: Clone your forked repository to your local machine to start working on it.</li> <li>Creating your environment: Set up your development environment according to the project's requirements. This may include installing dependencies, setting up virtual environments, and configuring tools like uv, pre-commit, pytest, and mypy.</li> <li>Make your changes: Implement your changes in the new branch. Ensure that your code adheres to the project's coding standards and style guidelines.</li> <li>Commit your changes: Commit your changes with a clear and descriptive commit message.</li> <li>Write tests: If you are adding new features or fixing bugs, please write tests to ensure that your changes work as expected.</li> <li>Submit a Pull Request: Once you have made your changes and committed them, submit a pull request to the main repository. Provide a clear description of the changes you made and reference any related issues.</li> </ol>"},{"location":"usage/contributing/#raise-an-issue","title":"Raise an Issue","text":"<p>If you find a bug or have a feature request, please raise an issue. This helps us track and prioritize contributions effectively.</p> <p>Raise an Issue</p> <p>When raising an issue, please follow these guidelines to ensure clarity and effectiveness:</p> <ol> <li>Title: Provide a clear and concise title that summarizes the issue or feature request.</li> <li>Description: Include a detailed description of the issue or feature request. Explain what the problem is, how it can be reproduced, and any relevant context.</li> <li>Steps to Reproduce: If applicable, provide a step-by-step guide on how to reproduce the issue. This helps us understand the problem better.</li> <li>Expected vs Actual Behavior: Describe what you expected to happen and what actually happened. This helps clarify the issue.</li> <li>Screenshots or Logs: If possible, include screenshots or logs that illustrate the issue. This can be very helpful for debugging.</li> <li>Context: Provide any additional context that might be relevant, such as the environment in which the issue occurred (e.g., operating system, Python version, etc.).</li> </ol>"},{"location":"usage/contributing/#issues-and-milestones","title":"Issues and Milestones","text":"<p>We are using issues to track bugs, feature requests, and enhancements, and milestones to organize these issues into manageable chunks.</p> <p>If you want to contribute to the project, please check the current issues and milestones before starting work to ensure that your contribution aligns with the project's goals and priorities. This will help avoid duplication of effort and ensure that your contributions align with the project's roadmap. If you want to add something that is not already listed in the milestones, please raise an issue to discuss it first.</p> <p>You can view the current issues and milestones on the project's GitHub page.</p> <p>View Issues</p> <p>View Milestones</p>"},{"location":"usage/contributing/#create-a-fork","title":"Create a Fork","text":"<p>To contribute to this project, you need to create a fork of the repository. This allows you to make changes without affecting the main codebase.</p> <p>Create a Fork</p>"},{"location":"usage/contributing/#create-a-new-branch","title":"Create a New Branch","text":"<p>When working on a new feature or bug fix, create a new branch from the <code>main</code> branch. Use a descriptive name for your branch that reflects the changes you are making.</p> <p>Create a New Branch</p>"},{"location":"usage/contributing/#clone-the-repository","title":"Clone the Repository","text":"<p>To start working on your forked repository, you need to clone it to your local machine. This allows you to make changes and test them locally before submitting a pull request.</p>"},{"location":"usage/contributing/#creating-your-environment","title":"Creating your Environment","text":"<p>When you are ready to start working on your changes, set up your development environment according to the project's requirements. In this project, we use uv to manage the Python environments, pre-commit for code quality checks, and pytest for testing.</p> <p>This project is a Python docstring format checker that validates docstring structure and content according to configurable rules. The main components include:</p> <ul> <li>Core checker: Validates docstring sections, types, and formatting</li> <li>CLI interface: Command-line tool for checking files and directories</li> <li>Configuration system: TOML-based configuration for customizing validation rules</li> <li>Exception handling: Custom exceptions for different error types</li> </ul> <p>Follow these steps to set up your environment:</p> <ol> <li>Install uv: Follow the instructions in the uv installation guide to install uv.     <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre></li> <li>Sync the environment: Use <code>uv</code> to set up the environment with the required dependencies.     <pre><code>uv sync --all-groups --link-mode=copy\n</code></pre></li> <li>Install pre-commit: Install pre-commit to manage code quality checks.     <pre><code>uv run --link-mode=copy pre-commit install\n</code></pre></li> <li>Update pre-commit hooks: Ensure that the pre-commit hooks are up to date.     <pre><code>uv run --link-mode=copy pre-commit autoupdate\n</code></pre></li> <li>Run tests to verify setup: Verify your environment is working correctly by running the test suite.     <pre><code>uv run ./src/utils/scripts.py check_pytest\n</code></pre></li> </ol>"},{"location":"usage/contributing/#testing-your-changes","title":"Testing Your Changes","text":"<p>This project maintains 100% test coverage. When making changes, ensure you:</p> <ol> <li>Run the full test suite: Use <code>uv run ./src/utils/scripts.py check_pytest</code> to run all tests with coverage reporting</li> <li>Test specific modules: You can run tests for specific modules:    <pre><code>uv run pytest src/tests/test_core.py\nuv run pytest src/tests/test_config.py\nuv run pytest src/tests/test_cli.py\n</code></pre></li> <li>Test the CLI: Test the command-line interface with real files:    <pre><code>uv run docstring-format-checker examples/example_code.py\n</code></pre></li> <li>Add tests for new features: Any new functionality must include comprehensive tests</li> <li>Maintain coverage: Ensure your changes don't reduce the overall test coverage</li> </ol>"},{"location":"usage/contributing/#make-your-changes","title":"Make Your Changes","text":"<p>Make your changes in the new branch you created. Ensure that your code adheres to the project's coding standards and style guidelines. If you are adding new features or fixing bugs, please write tests to ensure that your changes work as expected.</p> <p>This project has specific areas where contributions are especially valuable:</p> <ul> <li>Core validation logic (<code>src/docstring_format_checker/core.py</code>): Enhance docstring parsing and validation</li> <li>Configuration system (<code>src/docstring_format_checker/config.py</code>): Improve TOML configuration handling</li> <li>CLI interface (<code>src/docstring_format_checker/cli.py</code>): Add new command-line options and features</li> <li>Exception handling (<code>src/docstring_format_checker/utils/exceptions.py</code>): Custom exception types</li> <li>Documentation and examples: Help users understand how to use the tool effectively</li> </ul> <p>Ensure you follow the project's coding standards and style guidelines. This includes:</p> <ol> <li>Code Style: Follow the PEP 8 style guide for Python code.</li> <li>Docstrings: Use clear and concise docstrings for all functions, classes, and modules. Since this is a docstring format checker, we practice what we preach! Follow the project's own validation rules and ensure docstrings include:</li> <li>Clear summary sections</li> <li>Proper parameter descriptions with types</li> <li>Return value descriptions</li> <li>Exception documentation where applicable</li> <li>Examples for complex functions</li> <li>Testing: Write unit tests for your code using unittest or pytest. Ensure that your tests cover all new functionality and edge cases.</li> <li>Code Coverage: Maintain high code coverage for your tests. Use Codecov to check your coverage reports.</li> <li>Type Checking: Use mypy for static type checking. Ensure that your code passes all type checks.</li> <li>Docstring Validation: Use the project's own tool to validate your docstrings:    <pre><code>uv run docstring-format-checker src/docstring_format_checker/\n</code></pre></li> </ol> <p>Because you have set up <code>pre-commit</code>, these checks will be run automatically when you commit your changes. If any checks fail, you will need to fix them before you can successfully commit your changes. Further checks will also be run when you submit a pull request, so it's a good idea to ensure your code passes all checks before proceeding.</p>"},{"location":"usage/contributing/#commit-your-changes","title":"Commit Your Changes","text":"<p>Once you have made your changes, commit them with a clear and descriptive commit message. This helps reviewers understand the purpose of your changes. A good commit message should:</p> <ul> <li>Start with a short summary of the changes (50 characters or less).</li> <li>Follow the summary with a blank line.</li> <li>Provide a detailed description of the changes, including why they were made and any relevant context.</li> <li>Use the imperative mood (e.g., \"Add feature\" instead of \"Added feature\").</li> <li>Reference any related issues or pull requests.</li> <li>Use bullet points or paragraphs to organize the description for readability.</li> <li>Avoid using vague terms like \"fixes\" or \"changes\" without context.</li> <li>Be concise but informative, providing enough detail for someone unfamiliar with the code to understand the changes.</li> <li>Avoid including unnecessary information or personal opinions.</li> <li>Use proper grammar and punctuation to enhance clarity.</li> <li>If applicable, include any relevant links to documentation or resources that provide additional context for the changes.</li> <li>If the commit is related to a specific issue, include the issue number in the commit message (e.g., \"Fixes #123\").</li> <li>If the commit is part of a larger feature or task, consider using a prefix like \"feat:\", \"fix:\", or \"chore:\" to categorize the commit (e.g., \"feat: add new feature for user authentication\").</li> <li>If the commit is a work in progress, consider using a prefix like \"WIP:\" to indicate that it is not yet complete (e.g., \"WIP: start implementing new feature for user authentication\").</li> <li>If the commit is a refactor or cleanup, consider using a prefix like \"refactor:\" to indicate that it does not introduce new functionality (e.g., \"refactor: improve code readability and maintainability\").</li> <li>If the commit is a documentation update, consider using a prefix like \"docs:\" to indicate that it only affects documentation (e.g., \"docs: update README with installation instructions\").</li> <li>If the commit is a test update, consider using a prefix like \"test:\" to indicate that it only affects tests (e.g., \"test: add unit tests for new feature\").</li> </ul> <p>Ensure that any pre-commit checks pass before committing your changes. This includes code style checks, linting, and tests. If any checks fail, you will need to fix them before you can successfully commit your changes.</p>"},{"location":"usage/contributing/#submit-a-pull-request","title":"Submit a Pull Request","text":"<p>Once you have made your changes and committed them, submit a pull request to the main repository. Provide a clear description of the changes you made and reference any related issues.</p> <p>When submitting a pull request, please follow these guidelines:</p> <ol> <li>Title: Use a clear and descriptive title that summarizes the changes you made.</li> <li>Description: Provide a detailed description of the changes you made, including:</li> <li>What the changes do.</li> <li>Why the changes were made.</li> <li>Any relevant context or background information.</li> <li>How to test the changes.</li> <li>Reference Issues: If your changes address a specific issue, reference it in the pull request description (e.g., \"Fixes #123\" or \"Closes #123).</li> <li>Link to Related Pull Requests: If your changes are related to other pull requests, link to them in the description.</li> <li>Reviewers: Optionally, you can request specific reviewers to review your pull request.</li> <li>Milestone: Optionally, you can assign your pull request to a specific milestone if it is related to a larger feature or task.</li> <li>Check for Merge Conflicts: Ensure that your branch is up to date with the main branch and that there are no merge conflicts. If there are conflicts, resolve them before submitting the pull request.</li> <li>Be Responsive: Be prepared to respond to feedback from reviewers. They may request changes or ask for clarification on certain aspects of your pull request. Address their comments promptly and respectfully.</li> <li>Be Patient: Reviewers may take some time to review your pull request, especially if they are busy with other tasks. Be patient and give them time to provide feedback.</li> <li>Follow Up: After your pull request is merged, consider following up with any additional changes or improvements based on feedback from the review process. This helps maintain a high-quality codebase and shows that you are committed to improving the project.</li> </ol> <p>Submit a Pull Request</p>"},{"location":"usage/overview/","title":"Overview","text":"<code>docstring-format-checker</code>"},{"location":"usage/overview/#introduction","title":"Introduction","text":"<p>A powerful Python CLI tool that validates docstring formatting and completeness using AST parsing. Ensure consistent, high-quality documentation across your entire codebase with configurable validation rules and rich terminal output.</p> <p>Key Features:</p> <ul> <li>\ud83d\udd0d AST-based parsing - Robust code analysis without regex fragility</li> <li>\u2699\ufe0f Configurable validation - Four section types with TOML-based configuration</li> <li>\ud83d\udcc1 Hierarchical config discovery - Automatic <code>pyproject.toml</code> detection</li> <li>\ud83c\udfa8 Rich terminal output - Beautiful colored output and error tables</li> <li>\ud83d\ude80 Dual CLI entry points - Use <code>docstring-format-checker</code> or <code>dfc</code></li> <li>\ud83d\udee1\ufe0f 100% test coverage - Thoroughly tested and reliable</li> </ul>"},{"location":"usage/overview/#quick-start","title":"Quick Start","text":"<pre><code># Install\nuv add docstring-format-checker\n\n# Check a single file\ndfc check my_module.py\n\n# Check entire directory\ndfc check src/\n\n# Generate example configuration\ndfc config-example\n</code></pre>"},{"location":"usage/overview/#key-urls","title":"Key URLs","text":"<p>For reference, these URL's are used:</p> Type Source URL Git Repo GitHub https://github.com/data-science-extensions/docstring-format-checker Python Package PyPI https://pypi.org/project/docstring-format-checker Package Docs Pages https://data-science-extensions.com/docstring-format-checker"},{"location":"usage/overview/#section-types","title":"Section Types","text":"<p>Configure validation for four types of docstring sections:</p> Type Description Example Use <code>free_text</code> Admonition-style sections Summary, details, examples <code>list_name</code> Simple name lists Simple parameter lists <code>list_type</code> Type-only lists Raises, yields sections <code>list_name_and_type</code> Name and type lists Parameters, returns with types"},{"location":"usage/overview/#configuration","title":"Configuration","text":"<p>Create a <code>pyproject.toml</code> with your validation rules:</p> <pre><code>[tool.dfc]\n\n[[tool.dfc.sections]]\norder = 1\nname = \"summary\"\ntype = \"free_text\"\nadmonition = \"note\"\nprefix = \"!!!\"\nrequired = true\n\n[[tool.dfc.sections]]\norder = 2\nname = \"params\"\ntype = \"list_name_and_type\"\nrequired = true\n\n[[tool.dfc.sections]]\norder = 3\nname = \"returns\"\ntype = \"list_name_and_type\"\nrequired = false\n\n[[tool.dfc.sections]]\norder = 4\nname = \"raises\"\ntype = \"list_type\"\nrequired = false\n</code></pre>"},{"location":"usage/overview/#installation","title":"Installation","text":"<p>You can install and use this package multiple ways by using any of your preferred methods: <code>pip</code>, <code>pipenv</code>, <code>poetry</code>, or <code>uv</code>.</p>"},{"location":"usage/overview/#using-pip","title":"Using <code>pip</code>:","text":"<ol> <li> <p>In your terminal, run:</p> <pre><code>python3 -m pip install --upgrade pip\npython3 -m pip install docstring-format-checker\n</code></pre> </li> <li> <p>Or, in your <code>requirements.txt</code> file, add:</p> <pre><code>docstring-format-checker\n</code></pre> <p>Then run:</p> <pre><code>python3 -m pip install --upgrade pip\npython3 -m pip install --requirement=requirements.txt\n</code></pre> </li> </ol>"},{"location":"usage/overview/#using-pipenv","title":"Using <code>pipenv</code>:","text":"<ol> <li> <p>Install using environment variables:</p> <p>In your <code>Pipfile</code> file, add:</p> <pre><code>[[source]]\nurl = \"https://pypi.org/simple\"\nverify_ssl = false\nname = \"pypi\"\n\n[packages]\ndocstring-format-checker = \"*\"\n</code></pre> <p>Then run:</p> <pre><code>python3 -m pip install pipenv\npython3 -m pipenv install --verbose --skip-lock --categories=root index=pypi docstring-format-checker\n</code></pre> </li> <li> <p>Or, in your <code>requirements.txt</code> file, add:</p> <pre><code>docstring-format-checker\n</code></pre> <p>Then run:</p> <pre><code>python3 -m pipenv install --verbose --skip-lock --requirements=requirements.txt\n</code></pre> </li> <li> <p>Or just run this:</p> <pre><code>python3 -m pipenv install --verbose --skip-lock docstring-format-checker\n</code></pre> </li> </ol>"},{"location":"usage/overview/#using-poetry","title":"Using <code>poetry</code>:","text":"<ol> <li> <p>In your <code>pyproject.toml</code> file, add:</p> <pre><code>[project]\ndependencies = [\n    \"docstring-format-checker==0.*\",\n]\n</code></pre> <p>Then run:</p> <pre><code>poetry sync\npoetry install\n</code></pre> </li> <li> <p>Or just run this:</p> <pre><code>poetry add \"docstring-format-checker==0.*\"\npoetry sync\npoetry install\n</code></pre> </li> </ol>"},{"location":"usage/overview/#using-uv","title":"Using <code>uv</code>:","text":"<ol> <li> <p>In your <code>pyproject.toml</code> file, add:</p> <pre><code>[project]\ndependencies = [\n    \"docstring-format-checker==0.*\",\n]\n</code></pre> </li> </ol> <p>Then run:</p> <pre><code>uv sync\n</code></pre> <ol> <li> <p>Or run this:</p> <pre><code>uv add \"docstring-format-checker==0.*\"\nuv sync\n</code></pre> </li> <li> <p>Or just run this:</p> <pre><code>uv pip install \"docstring-format-checker==0.*\"\n</code></pre> </li> </ol>"},{"location":"usage/overview/#usage-examples","title":"Usage Examples","text":""},{"location":"usage/overview/#basic-usage","title":"Basic Usage","text":"<pre><code># Check a single Python file\ndfc check src/my_module.py\n\n# Check entire directory recursively\ndfc check src/\n\n# Check with verbose output\ndfc check --verbose src/\n\n# Generate example configuration file\ndfc config-example &gt; pyproject.toml\n</code></pre>"},{"location":"usage/overview/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code># Use custom config file location\ndfc check --config custom_config.toml src/\n\n# Check specific function patterns\ndfc check --include-pattern \"**/api/*.py\" src/\n\n# Exclude test files\ndfc check --exclude-pattern \"**/test_*.py\" src/\n</code></pre>"},{"location":"usage/overview/#integration-with-cicd","title":"Integration with CI/CD","text":"<pre><code># .github/workflows/docs.yml\nname: Documentation Quality\non: [push, pull_request]\n\njobs:\n  docstring-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: astral-sh/setup-uv@v3\n      - run: uv pip install docstring-format-checker\n      - run: dfc check src/\n</code></pre>"},{"location":"usage/overview/#example-output","title":"Example Output","text":"<pre><code>\ud83d\udccb Docstring Format Checker Results\n\n\u2705 src/utils/helpers.py\n\u274c src/models/user.py\n   \u2514\u2500\u2500 Function 'create_user' missing required section: 'params'\n   \u2514\u2500\u2500 Function 'delete_user' missing required section: 'returns'\n\n\u274c src/api/endpoints.py\n   \u2514\u2500\u2500 Method 'UserAPI.get_user' invalid section format: 'raises'\n\n\ud83d\udcca Summary: 1/3 files passed (33.3%)\n</code></pre>"},{"location":"usage/overview/#architecture","title":"Architecture","text":"<p>The tool follows a clean, modular architecture:</p> <ul> <li><code>core.py</code> - <code>DocstringChecker</code> class with AST parsing and validation logic</li> <li><code>config.py</code> - Configuration loading and <code>SectionConfig</code> management</li> <li><code>cli.py</code> - Typer-based CLI with dual entry points</li> <li><code>utils/exceptions.py</code> - Custom exception classes for structured error handling</li> </ul>"},{"location":"usage/overview/#contribution","title":"Contribution","text":"<p>Check the CONTRIBUTING.md file or Contributing page.</p>"},{"location":"usage/overview/#development","title":"Development","text":"<ol> <li> <p>Clone the repository:</p> <pre><code>git clone https://github.com/data-science-extensions/docstring-format-checker.git\ncd docstring-format-checker\n</code></pre> </li> <li> <p>Set up development environment:</p> <pre><code>uv sync --all-groups\n</code></pre> </li> <li> <p>Run tests:</p> <pre><code>uv run pytest --config-file=pyproject.toml --cov-report=term-missing\n</code></pre> </li> <li> <p>Run CLI locally:</p> <pre><code>uv run dfc check examples/example_code.py\n</code></pre> </li> </ol>"},{"location":"usage/overview/#build-and-test","title":"Build and Test","text":"<p>To ensure that the package is working as expected, please ensure that:</p> <ol> <li>You write your code as per PEP8 requirements.</li> <li>You write a UnitTest for each function/feature you include.</li> <li>The CodeCoverage is 100%.</li> <li>All UnitTests are passing.</li> <li>MyPy is passing 100%.</li> </ol>"},{"location":"usage/overview/#testing","title":"Testing","text":"<ul> <li> <p>Run them all together:</p> <pre><code>uv run pytest --config-file=pyproject.toml\n</code></pre> </li> <li> <p>Or run them individually:</p> <ul> <li> <p>Tests with Coverage: <pre><code>uv run pytest --config-file=pyproject.toml --cov-report=term-missing\n</code></pre></p> </li> <li> <p>Type Checking: <pre><code>uv run mypy src/\n</code></pre></p> </li> <li> <p>Code Formatting: <pre><code>uv run black --check src/\n</code></pre></p> </li> <li> <p>Linting: <pre><code>uv run ruff check src/\n</code></pre></p> </li> </ul> </li> </ul>"},{"location":"usage/overview/#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"}]}